{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/avatar/avatar.png","path":"avatar/avatar.png","modified":0,"renderable":0},{"_id":"source/favicon/favicon.ico","path":"favicon/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/forkme_left_white_ffffff.png","path":"images/forkme_left_white_ffffff.png","modified":0,"renderable":0},{"_id":"source/images/css-hack-1.png","path":"images/css-hack-1.png","modified":0,"renderable":0},{"_id":"source/images/gulp-1.png","path":"images/gulp-1.png","modified":0,"renderable":0},{"_id":"source/images/hexo-next-five-1.png","path":"images/hexo-next-five-1.png","modified":0,"renderable":0},{"_id":"source/images/hexo-next-five-3.png","path":"images/hexo-next-five-3.png","modified":0,"renderable":0},{"_id":"source/images/hexo-next-five-2.png","path":"images/hexo-next-five-2.png","modified":0,"renderable":0},{"_id":"source/images/hexo-next-five-4.png","path":"images/hexo-next-five-4.png","modified":0,"renderable":0},{"_id":"source/images/hexo-next-five-5.png","path":"images/hexo-next-five-5.png","modified":0,"renderable":0},{"_id":"source/images/service-worker-2.png","path":"images/service-worker-2.png","modified":0,"renderable":0},{"_id":"source/images/service-worker-1.png","path":"images/service-worker-1.png","modified":0,"renderable":0},{"_id":"source/images/service-worker-3.png","path":"images/service-worker-3.png","modified":0,"renderable":0},{"_id":"source/images/service-worker-4.png","path":"images/service-worker-4.png","modified":0,"renderable":0},{"_id":"source/images/service-worker-5.png","path":"images/service-worker-5.png","modified":0,"renderable":0},{"_id":"source/images/vue-music-1.png","path":"images/vue-music-1.png","modified":0,"renderable":0},{"_id":"source/images/vue-sell-1.png","path":"images/vue-sell-1.png","modified":0,"renderable":0},{"_id":"source/images/vue-sell-2.png","path":"images/vue-sell-2.png","modified":0,"renderable":0},{"_id":"source/images/vue-sell-5.png","path":"images/vue-sell-5.png","modified":0,"renderable":0},{"_id":"source/images/vue-sell-pay.png","path":"images/vue-sell-pay.png","modified":0,"renderable":0},{"_id":"themes/next/source/service-worker.js","path":"service-worker.js","modified":0,"renderable":1},{"_id":"source/images/view-my-blog.png","path":"images/view-my-blog.png","modified":0,"renderable":0},{"_id":"source/reward/reward_wechat.png","path":"reward/reward_wechat.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/candy-cane-stars.png","path":"images/candy-cane-stars.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/jquery-stars.js","path":"js/src/jquery-stars.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/pace.min.js","path":"js/src/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/embed.js","path":"js/src/embed.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/gitment.browser.js","path":"js/src/gitment.browser.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/vue-sell-3.gif","path":"images/vue-sell-3.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"f2118aa1ef817ccf2d296d192f36b3334825dc32","modified":1565853533840},{"_id":"source/README.MDOWN","hash":"1c2752a9ba4344d0c9a138bc1a72e04b602fc03a","modified":1565853145136},{"_id":"source/offline.md","hash":"13bf2db5c069b942d2f6e6b3672e8216815f58b6","modified":1565853145449},{"_id":"source/robots.txt","hash":"2bab0081cc734877f50e0c02e3a83dcfd400d211","modified":1565853144117},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1516006650995},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1516006650995},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1516006650996},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1516006650996},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1516006650997},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1516006650996},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1516006650997},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1516006650999},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1516006650998},{"_id":"themes/next/_config.yml","hash":"bba0c26ed92f28eb94ed24c0de4ceeaaed488873","modified":1516006650998},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1516006650999},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1516006651026},{"_id":"source/about/index.md","hash":"b4638c1b0573e69a46e92c13a1f902d56032a697","modified":1565853522093},{"_id":"source/_posts/amd-cmd.md","hash":"1c2c61097d6621a218312be61b1f14e65ea62078","modified":1565853560102},{"_id":"source/_posts/china-javascript-environment.md","hash":"9140495dbe0fa79f294da9a73d11bb066593e410","modified":1565853532999},{"_id":"source/_posts/commonjs.md","hash":"84b14adf49d22703c8907caea4a945494d0dc26f","modified":1565853559335},{"_id":"source/_posts/css-hack.md","hash":"5feeb584694fb0700c3264a4773243599fa4f086","modified":1565853558598},{"_id":"source/_posts/git.md","hash":"ee69a1b9da25fb1860cb29693dff0ba9cbfa6445","modified":1565853531524},{"_id":"source/_posts/essay-20160925.md","hash":"acbf9d05696c317741377e67caf074de11c0c1dc","modified":1565853532281},{"_id":"source/_posts/gulp.md","hash":"f86f7a26fa465ca331fc1a9aff17dc7bcff5c1a7","modified":1565853557746},{"_id":"source/_posts/hexo-next-five.md","hash":"31bbbdc07f77548d42b12f2e65c9dd5a16ec18f3","modified":1565853556884},{"_id":"source/_posts/hexo-next-four.md","hash":"c4bd34220f0d79fca83d726e916eeae16f112902","modified":1565853530812},{"_id":"source/_posts/hexo-next-one.md","hash":"a38b835e58220eab1283d12e03e5920cf5969d08","modified":1565853529764},{"_id":"source/_posts/hexo-next-three.md","hash":"33d1a8517829ed12db5fe79d8ac5231acd234bd5","modified":1565853527648},{"_id":"source/_posts/hexo-next-two.md","hash":"1898d2a24e8d458f2bf3a575e02f4fa18ef1f051","modified":1565853526829},{"_id":"source/_posts/how-it-feels-to-learn-javascript-in-2016.md","hash":"f37d3530599ed45e99154bc38d8229a91d6eb2cc","modified":1565853525891},{"_id":"source/_posts/js-memory-management-and-gc.md","hash":"7caca023e4a46351c56e0c215e60526575688f0e","modified":1565853555323},{"_id":"source/_posts/html5shiv.md","hash":"7d94bea1d45ff2c0c90b6497ac504715d9d57b91","modified":1565853556138},{"_id":"source/_posts/memory-leak.md","hash":"622f1bc3cbf0f33f76237e407d70644c41739c9b","modified":1565853554548},{"_id":"source/_posts/npm-two.md","hash":"54f9157c62e1903204d3aed694c60858ce97daa1","modified":1565853553760},{"_id":"source/_posts/npm.md","hash":"4b2562e8b6715d3763c8664b03ed5522d1e109ea","modified":1565853552929},{"_id":"source/_posts/respond-js.md","hash":"fb038939429a36f4cbef30ee43ce9f085e1322da","modified":1565853552162},{"_id":"source/_posts/sass.md","hash":"d1068af3f9619c774f929a35497f67a5a6123bb1","modified":1565853525057},{"_id":"source/_posts/service-worker.md","hash":"4a6c1ae897f5ca664a1f0e0024ea093708e0202d","modified":1565853551372},{"_id":"source/_posts/vue-sell.md","hash":"40e5546b491061b62c651eaff4836dc019520453","modified":1565853550477},{"_id":"source/_posts/use-jquery-skill.md","hash":"fc981ae8b49c7a940a06da06d610df675456a148","modified":1565853524131},{"_id":"source/_posts/why-introversion-like-alone.md","hash":"59229e5ec1fb84b4c8ea8b95b7fdff09924b4d30","modified":1565853523246},{"_id":"source/_posts/why-we-dropped-zepto.md","hash":"b313f1799987a36b8015f05122f4df4b7c41bc60","modified":1565853549568},{"_id":"source/avatar/avatar.png","hash":"f205692c08fc1f013ab81caca5504e6c50fa0e52","modified":1516006650791},{"_id":"source/categories/index.md","hash":"7a8734a5f5a49b0f00aa16c50f7515ae52e624c4","modified":1565853520364},{"_id":"source/favicon/favicon.ico","hash":"8c48c4165fbf145abaddc99ac5891f731d5feec5","modified":1516006650791},{"_id":"source/guestbook/index.md","hash":"d70e20372b66a9d4cffb6c72ec336ddaef7d20d9","modified":1565853518400},{"_id":"source/images/forkme_left_white_ffffff.png","hash":"213f682ee0f6be9ee985c24b700b99c59ad004aa","modified":1516006650793},{"_id":"source/images/css-hack-1.png","hash":"e711166bade31ab958199dec52f9e30c43a0c26a","modified":1516006650792},{"_id":"source/images/gulp-1.png","hash":"14591ce57abd96e129e2ce9813ad75ce39d27b7a","modified":1516006650793},{"_id":"source/images/hexo-next-five-1.png","hash":"d16342b3f8cb34677c0f0d99dc28dd08ae543651","modified":1516006650794},{"_id":"source/images/hexo-next-five-3.png","hash":"b5dc3d88028d77c4a3036ba43fb203134af87d4f","modified":1516006650796},{"_id":"source/images/hexo-next-five-2.png","hash":"299f95827a48d65523d56215bd78b60a1df82296","modified":1516006650795},{"_id":"source/images/hexo-next-five-4.png","hash":"93d9085a3299985c3deee73967e957a045913380","modified":1516006650796},{"_id":"source/images/hexo-next-five-5.png","hash":"405eb5f830aa2ed5c0726a0954a1224a7b10bc5a","modified":1516006650798},{"_id":"source/images/service-worker-2.png","hash":"afebb9e71adcb7cad1292354a462d11992cf44a8","modified":1516006650800},{"_id":"source/images/service-worker-1.png","hash":"4eb29e6b92cb09a3d4fdbf75df81bc2407a66b81","modified":1516006650799},{"_id":"source/images/service-worker-3.png","hash":"906fb923781982d9769ca98dc7bd9059821231e1","modified":1516006650800},{"_id":"source/images/service-worker-4.png","hash":"c827bfe4285a96a84dca9f265fe7fceae15adf9b","modified":1516006650800},{"_id":"source/images/service-worker-5.png","hash":"9f9b61b90901e94bfec404a7df3afba189d0e8c4","modified":1516006650800},{"_id":"source/images/vue-music-1.png","hash":"7b3b640108eed7abb76e0713a2a242051ee24483","modified":1516006650802},{"_id":"source/images/vue-sell-1.png","hash":"fcee734750286ff4cfe4d7fd82a7caa9b888785f","modified":1516006650802},{"_id":"source/images/vue-sell-2.png","hash":"8a33ad9977ca992ad052ff79a3d3fd5ac70f6590","modified":1516006650803},{"_id":"source/images/vue-sell-5.png","hash":"a6d00954e64997ebf00f711003cc4b169671a271","modified":1516006650952},{"_id":"source/images/vue-sell-pay.png","hash":"ad8e1404a1e2778951a17b15ae1ea4a875584d6a","modified":1516006650952},{"_id":"source/weblog/index.md","hash":"0af9dd10d9871d6932d87797ef3517c273d316c6","modified":1565853510257},{"_id":"source/tags/index.md","hash":"a4cd5d9f005e12544444f3ca44793b87b11d2e64","modified":1565853516436},{"_id":"source/yu/css-hack.html","hash":"e47e5c2da8c7d9e3c29e07f8271b2ba64c0b2615","modified":1516006650956},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1516006650996},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1516006650996},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1516006650999},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1516006651000},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1516006651001},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1516006651001},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1516006651000},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1516006651002},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1516006651002},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1516006651002},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1516006651003},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1516006651003},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ab2f0b763f2515e61d4bbffd016b420893c03ab3","modified":1516006651003},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1516006651004},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1516006651004},{"_id":"themes/next/layout/_layout.swig","hash":"4bd6db896b3b8d6dde2707cf3406bd6bc3886d19","modified":1516006651006},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1516006651024},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1516006651024},{"_id":"themes/next/layout/index.swig","hash":"836631665db2b37639028fbc3aaa0b96f059e45c","modified":1516006651025},{"_id":"themes/next/layout/page.swig","hash":"a9c08b37f5f0fdb08d03e3e8a69d07d173a721df","modified":1516006651025},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1516006651025},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1516006651026},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1516006651026},{"_id":"themes/next/source/service-worker.js","hash":"6377f96d379d202926b5f48ba9a2fbdd9c7e235b","modified":1516006651077},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1516006651110},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1516006651111},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1516006651111},{"_id":"source/images/view-my-blog.png","hash":"5f1e743dba2584ac549d716e8e10599a1642ee9f","modified":1516006650801},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651063},{"_id":"source/reward/reward_wechat.png","hash":"9ee77787a889a5bbe6a083ff4ec9da466e4e3880","modified":1565853462235},{"_id":"themes/next/layout/_custom/love.swig","hash":"715cfabf12d68bfe65abdb43d5bd6bde67962727","modified":1516006651005},{"_id":"themes/next/layout/_custom/mouse.swig","hash":"76ab3efb1e0a4e238b0b600c510869c9c1a2af73","modified":1516171243301},{"_id":"themes/next/layout/_custom/title-change.swig","hash":"cec696f2e86c7c42a8d32bb14abfdc7ae920f92d","modified":1516006651006},{"_id":"themes/next/layout/_custom/particle-only-pc.swig","hash":"6504ff8f0dbb5ca0850fd82f44ecb6c2d213a395","modified":1516006651006},{"_id":"themes/next/layout/_custom/particle.swig","hash":"2b33c09e895110becedde3b99fd6c1b527e0e873","modified":1516006651006},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1516006651006},{"_id":"themes/next/layout/_macro/post.swig","hash":"9fad3d2c94bb8f0e262b4afb0f7f1efc155a384e","modified":1516006651007},{"_id":"themes/next/layout/_macro/reward.swig","hash":"10e351052605b6f31ee16f3fefd16b3315aee633","modified":1516171762725},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1516006651008},{"_id":"themes/next/layout/_partials/comments.swig","hash":"8ae1c61e527ca4393ebb050ede70aade5c7b3414","modified":1516006651009},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"77a4b4e0ef77419c8d1f8165b151df4d0416565c","modified":1516006651008},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1516006651009},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1bd6e0abd8092d49453dbe6f1d3c04bd934f6681","modified":1516006651010},{"_id":"themes/next/layout/_partials/head.swig","hash":"361a6214a56b9797f659535b8364babd321b42a6","modified":1516006651010},{"_id":"themes/next/layout/_partials/header.swig","hash":"c145d0e09e3c8f4e11679bc2db2a9fd65eb2531d","modified":1516006651011},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1516006651012},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1516006651012},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1516006651015},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1516006651015},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1516006651016},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1516006651024},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1516006651027},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1516006651027},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1516006651028},{"_id":"themes/next/source/css/gitment.css","hash":"11932fc8e881cefce7c5150d5581903c666be4d0","modified":1516006651062},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1516006651062},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516006651063},{"_id":"themes/next/source/images/candy-cane-stars.png","hash":"94c2b96474f973eae854e6927cd763ada892812a","modified":1516006651064},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1516006651064},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1516006651065},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1516006651066},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1516006651066},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1516006651067},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1516006651067},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1516006651068},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516006651068},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516006651068},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1516006651069},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516006651069},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1516006651069},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651017},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651017},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651051},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651051},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651052},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516006651061},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1516006651011},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"540441af1d5b1b53bfdd3270104b1da4925d730b","modified":1516006651012},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1516006651013},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1516006651013},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1516006651014},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1516006651014},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"965e2b9fa8a993101d6eb11677188907193a70c0","modified":1516006651014},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1516006651015},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1516006651017},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1516006651017},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1516006651021},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1516006651022},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1516006651018},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1516006651023},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1516006651023},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1516006651023},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a885cb1335e6b9af4f817e5f8ee0990c2fd355f7","modified":1516006651050},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1516006651051},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1516006651052},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1516006651061},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1516006651062},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"96e1962864fe6224f8da7c74c67bf3c8e2af6abf","modified":1516006651062},{"_id":"themes/next/source/css/_variables/base.styl","hash":"6e0957310cabba0fbb7db4744cbaa8fd15dba070","modified":1516170441035},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1516006651070},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1516006651071},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1516006651072},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1516006651073},{"_id":"themes/next/source/js/src/jquery-stars.js","hash":"8f14083a3ff8c3f8a87e3328444a7c2bae5835fc","modified":1516006651073},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1516006651074},{"_id":"themes/next/source/js/src/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1516006651074},{"_id":"themes/next/source/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1516006651075},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1516006651075},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1516006651076},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1516006651076},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1516006651085},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1516006651085},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1516006651086},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1516006651086},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1516006651088},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1516006651088},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1516006651090},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1516006651089},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1516006651090},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1516006651101},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1516006651107},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1516006651107},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1516006651109},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1516006651110},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1516006651110},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1516006651102},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1516006651103},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1516006651103},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1516006651104},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1516006651104},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1516006651105},{"_id":"themes/next/source/js/src/embed.js","hash":"639b2724c34ba16acdb731b2f628c66ecf0a49c0","modified":1516006651071},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1516006651102},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1516006651019},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1516006651018},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1516006651020},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1516006651019},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1516006651020},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1516006651020},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1516006651021},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"abf1087583ba3083053597a7e934f13e91c79091","modified":1516006651022},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2ed4ef9e69217b58d0e82fe60ad7d279ad8b5e10","modified":1516006651048},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1516006651048},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1516006651049},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1516006651049},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1516006651050},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1516006651029},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1516006651029},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1516006651029},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1516006651030},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1516006651035},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1516006651043},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1516006651047},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1516006651053},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1516006651053},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1516006651053},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1516006651053},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1516006651054},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1516006651054},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1516006651053},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1516006651058},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1516006651058},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4e8c319210bf8a8c4d9cf38d0f943871fede223a","modified":1516173933706},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1516006651059},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1516006651060},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1516006651060},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1516006651056},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1516006651060},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1516006651056},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1516006651057},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1516006651056},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1516006651057},{"_id":"themes/next/source/js/src/gitment.browser.js","hash":"0813b567b19ead0b36540dc0a8d38ac55d5ae777","modified":1516006651072},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1516006651076},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516006651078},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516006651078},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516006651079},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516006651079},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516006651080},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516006651081},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1516006651083},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1516006651084},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1516006651084},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516006651087},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1516006651087},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1516006651090},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1516006651090},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1516006651091},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1516006651100},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1516006651105},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1516006651106},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1516006651093},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1516006651094},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1516006651099},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1516006651108},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1516006651030},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1516006651030},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1516006651031},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1516006651032},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1516006651031},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1516006651032},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1516006651033},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1516006651033},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1516006651034},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1516006651034},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1516006651034},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1516006651035},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1516006651036},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1516006651036},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1516006651037},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"033036ec71ede2f2252638e5ab2ef1879db36308","modified":1516006651037},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1516006651038},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1516006651037},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1516006651037},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f4a8c3ad5a723e7624f25d0a53fdd0fdcbc284ee","modified":1516006651038},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1516006651038},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1516006651039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1516006651040},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1516006651041},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1516006651039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1516006651041},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ee7a5e6c29e1ed3e608b964d0a267ef066993975","modified":1516006651039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1516006651040},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1516006651042},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1516006651042},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1516006651041},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1516006651043},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1516006651043},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1516006651044},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"36e031e3bf303ea72110fe55d4c2884c4e9b46b6","modified":1516174159113},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1516006651046},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1516006651046},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"2785ff0c412ae042f783f64155d1053bf4c4bcfa","modified":1516006651046},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1516006651047},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1516006651044},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1516006651044},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"6c9a59b452e585bfcca71f7565636392630dc230","modified":1516006651044},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1516006651044},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1516006651055},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1516006651055},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1516006651058},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516006651081},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1516006651082},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1516006651081},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1516006651081},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1516006651082},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1516006651083},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1516006651099},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1516006651097},{"_id":"source/images/vue-sell-3.gif","hash":"e90c90eb6a5286b48875219c61d784e3388c8f6f","modified":1565853545494},{"_id":"public/baidusitemap.xml","hash":"7d35d6d8abfeab5825b935964e0dc2df8abac139","modified":1565853661848},{"_id":"public/atom.xml","hash":"6d1d2636ff0c3fcef41ef8e81c2a8cf74588a974","modified":1565853661861},{"_id":"public/sitemap.xml","hash":"f491724e4f7a750645dc26626005e8b06cfc1241","modified":1565853661861},{"_id":"public/search.xml","hash":"69f4b3c612624dc90ceb6a336aea3c0dc6b3c21d","modified":1565853661862},{"_id":"public/404.html","hash":"c7aad4cecb3119df9a897253b1d78d04c3a89f12","modified":1565853664605},{"_id":"public/offline.html","hash":"2e3fe7140bf1acda98e2e616f9f1d6baa59355b4","modified":1565853439275},{"_id":"public/about/index.html","hash":"33bb4953f26021f0393ba1bd4d8af66a0b892079","modified":1565853664622},{"_id":"public/categories/index.html","hash":"9ccf1e282847c3b4a8d0cde51409782378cff9a0","modified":1565853664622},{"_id":"public/guestbook/index.html","hash":"95dc4b076747c6c45fbaf89dcdf8b4543287e163","modified":1565853664623},{"_id":"public/weblog/index.html","hash":"ad6839cb9587c781fe4e5c05e0b4fe9a3e5b5a7e","modified":1565853664623},{"_id":"public/tags/index.html","hash":"b292c605d8f2f46e76f9313c369496a65f0b2eb3","modified":1565853664623},{"_id":"public/yu/css-hack.html","hash":"bd69e381dca9603499354b30a577c56175c7dfa3","modified":1565853439275},{"_id":"public/2017/11/11/vue-sell/index.html","hash":"28dc1d336f40871c1690ffc1f7899397839873ec","modified":1565853439275},{"_id":"public/2017/07/15/hexo-next-five/index.html","hash":"d80a008e8e4a16a43e1b4a19ffd660b064bc5d2c","modified":1565853439276},{"_id":"public/2017/06/25/css-hack/index.html","hash":"383cd703910eaa422efc3f1e1648b2821cc2a03c","modified":1565853439276},{"_id":"public/2017/06/08/service-worker/index.html","hash":"1bfcd70fd17a802b3b8ba270781447ba7026f358","modified":1565853439276},{"_id":"public/2017/05/20/npm-two/index.html","hash":"ef64616845ba52ab01d11a780259c84e3ccb1131","modified":1565853439276},{"_id":"public/2017/05/01/gulp/index.html","hash":"5a8f1d1d14abca4e6302bc2d3085b1314d575d37","modified":1565853439276},{"_id":"public/2017/04/10/npm/index.html","hash":"3ad4c9d7682d4150457911364983e6a0f36f5b63","modified":1565853439276},{"_id":"public/2017/03/20/amd-cmd/index.html","hash":"3a95b1cb6540102c552ba3bd36045c5d1e026eaf","modified":1565853439276},{"_id":"public/2017/03/07/commonjs/index.html","hash":"de41c7e72a4886ed1e8046df65a992c4e2cd6597","modified":1565853439276},{"_id":"public/2017/02/28/memory-leak/index.html","hash":"71ef98dd69b24e1da160a865b19dd65092dbccb0","modified":1565853439276},{"_id":"public/2017/02/18/js-memory-management-and-gc/index.html","hash":"303091a5293e8787b9fcf5c8e836bd9187d116ae","modified":1565853439276},{"_id":"public/2017/02/14/why-we-dropped-zepto/index.html","hash":"517515a260992a076f81b0bedcb31fd48877c8d3","modified":1565853439276},{"_id":"public/2017/02/11/respond-js/index.html","hash":"7956a23e7f35c451ee0bcf2a53182a9778a36768","modified":1565853439276},{"_id":"public/2017/01/18/html5shiv/index.html","hash":"ecc1801d97ec3faa6c424f99360a01dd683160fe","modified":1565853439276},{"_id":"public/2016/12/24/why-introversion-like-alone/index.html","hash":"c651e19e69d862d42cbf802100165e9fff2a568d","modified":1565853439276},{"_id":"public/2016/12/15/hexo-next-four/index.html","hash":"0cceec6a114d8004ccffe7c0b77e044cf7fd1954","modified":1565853439276},{"_id":"public/2016/11/22/use-jquery-skill/index.html","hash":"19da712ef9c52d4815247007f5884911fb78a1fd","modified":1565853439277},{"_id":"public/2016/11/18/china-javascript-environment/index.html","hash":"ea515c7992319fbcdb3bafe7834c683d366f34ca","modified":1565853439277},{"_id":"public/2016/11/11/hexo-next-three/index.html","hash":"1971b63e1591583a92fc3f4e1c184291f265fc05","modified":1565853439277},{"_id":"public/2016/10/23/sass/index.html","hash":"e9fd1d4c3b2edf34eb7cd0efcb0ef45c3fe5926e","modified":1565853439277},{"_id":"public/2016/10/16/how-it-feels-to-learn-javascript-in-2016/index.html","hash":"e3b20d9b766661833b4e5ef46850c0430defd85b","modified":1565853439277},{"_id":"public/2016/10/07/git/index.html","hash":"9a372c0df0b2021b9f67423009c4b8940e364b08","modified":1565853439277},{"_id":"public/2016/09/30/hexo-next-two/index.html","hash":"41bc3fa5037a554c6fb06c805b78d8d9a01db243","modified":1565853439277},{"_id":"public/2016/09/25/essay-20160925/index.html","hash":"ec02ca7563649e45afd47d87a3754ffce259f642","modified":1565853439277},{"_id":"public/2016/09/03/hexo-next-one/index.html","hash":"07f371c7d3450be3f73eef4f94bff542d85a9101","modified":1565853439277},{"_id":"public/categories/前端/index.html","hash":"4ddcc2239160de7f38e31fb65ab17bc1a33f498f","modified":1565853664623},{"_id":"public/categories/前端/page/2/index.html","hash":"6a299642fd6adf6308b6dbb9c5bbebbbf4424ebc","modified":1565853664623},{"_id":"public/categories/综合/index.html","hash":"18fc90e03eebdf75ff528a31b72fec7ba7d9a088","modified":1565853664623},{"_id":"public/categories/随笔/index.html","hash":"ac2ed73db5f52c59f53a9dc39b9821c580fdb1da","modified":1565853664623},{"_id":"public/categories/Hexo/index.html","hash":"7cae578fb35d7e66f84d6b6c83bc5c19ee35d211","modified":1565853664623},{"_id":"public/archives/index.html","hash":"c9f4502a43e2bca7542210734bd858d4a0c808a9","modified":1565853664623},{"_id":"public/archives/page/2/index.html","hash":"9b9cdbba41452c06cb1f1a14bde84ddad89e5245","modified":1565853664623},{"_id":"public/archives/page/3/index.html","hash":"2373ba733817ad027021f1e56f70e5f79990af7d","modified":1565853664623},{"_id":"public/archives/2016/index.html","hash":"db8fa386be094f6ab6b9caee4191be4d07e38802","modified":1565853439278},{"_id":"public/archives/2016/page/2/index.html","hash":"117f1bcadf0b6d5dc8a8b0522900097e1393fc1c","modified":1565853439278},{"_id":"public/archives/2016/09/index.html","hash":"2bd41d26c7dc17c254890a0e1816a1193beccae5","modified":1565853439278},{"_id":"public/archives/2016/10/index.html","hash":"ff560730b09805172c88d80fbf17227c86f86dd2","modified":1565853439278},{"_id":"public/archives/2016/11/index.html","hash":"7b8f3930f9201aab3228ea0710b8ee7c5b812489","modified":1565853439278},{"_id":"public/archives/2016/12/index.html","hash":"8a6cfabc2d8dbac9ffa6ac33d0b25271adea2d43","modified":1565853439278},{"_id":"public/archives/2017/index.html","hash":"ce501feb53cba43f3189dc1437fe97f1e779d32c","modified":1565853664623},{"_id":"public/archives/2017/page/2/index.html","hash":"9669bf52ddbdc370ad3ba4dc40b83339a3f55052","modified":1565853664623},{"_id":"public/archives/2017/01/index.html","hash":"5f74bbc0c5eac1ac5dcd42947684d1002c4f89f6","modified":1565853439279},{"_id":"public/archives/2017/02/index.html","hash":"d0d13c1b96254beeaa50a21dd204202cd1fedc84","modified":1565853439279},{"_id":"public/archives/2017/03/index.html","hash":"2a7ecc24a8cee9362181f351e6c097ce6d13bd01","modified":1565853439279},{"_id":"public/archives/2017/04/index.html","hash":"131382ea597f163993fb973ff6c4aa45046c71cd","modified":1565853439279},{"_id":"public/archives/2017/05/index.html","hash":"2f78f68e0b9f704c4628d02c8c7552070fa9751d","modified":1565853439279},{"_id":"public/archives/2017/06/index.html","hash":"375bc78f1a2a827e4758483147400ec25fa4464b","modified":1565853439279},{"_id":"public/archives/2017/07/index.html","hash":"d2b4bd709ebc7cc892615289cf038c8ad18fde24","modified":1565853439279},{"_id":"public/archives/2017/11/index.html","hash":"d1c57ed21da5764df61cce75a126fbcf25b4007c","modified":1565853664623},{"_id":"public/index.html","hash":"f665ffecb382611fdb49f95792832fe879fe5b98","modified":1565853664623},{"_id":"public/page/2/index.html","hash":"60024919e55008385884164ad4929f4adfbf3a60","modified":1565853664624},{"_id":"public/page/3/index.html","hash":"30b61bce3d6f6850840d7dffd8a95c0862b0affd","modified":1565853664624},{"_id":"public/tags/JavaScript/index.html","hash":"60cdbbee80b6fbdea8afbb40f10089194f86657c","modified":1565853664624},{"_id":"public/tags/essay/index.html","hash":"ed84b44cbc7954e080a57624f4cf7a8af9187d9f","modified":1565853664624},{"_id":"public/tags/CSS/index.html","hash":"12a55a31dc939ec9d9ac70ff4d490618114a3140","modified":1565853664624},{"_id":"public/tags/Git/index.html","hash":"e5e189e2e1eadbda770dbfea74de9eed84ce7787","modified":1565853664624},{"_id":"public/tags/Hexo/index.html","hash":"d4b830ba446985228d351ebb8b0335c2931ad5da","modified":1565853664624},{"_id":"public/tags/Next/index.html","hash":"0c4bfa16275637f099e21bf7a1076c558e08db5d","modified":1565853664624},{"_id":"public/tags/gulp/index.html","hash":"5870104fb1899bfb0ea3a7a12030dadd103363fc","modified":1565853664624},{"_id":"public/tags/npm/index.html","hash":"e696b7f1a53a5110cda525e2909757836e21d64a","modified":1565853664624},{"_id":"public/tags/css/index.html","hash":"f56347e05218fec8f8f07e839fc9ac129357d65b","modified":1565853664624},{"_id":"public/tags/sass/index.html","hash":"876b6f6306339cdc769c736ee7828db815db0082","modified":1565853664624},{"_id":"public/tags/vue/index.html","hash":"0c17e6c3c59fdf331d812d3b189dfc7b04fbc12d","modified":1565853664624},{"_id":"public/tags/Service-worker/index.html","hash":"3fdac7bdbd1466cc5b2de559829d539e88f1aa6f","modified":1565853664624},{"_id":"public/tags/jQuery/index.html","hash":"d811c710e74eced7c28427a97552d9c736fd4425","modified":1565853664624},{"_id":"public/tags/zepto/index.html","hash":"85720b14deeb7f6ca810c82d0864c84b0bb6fabe","modified":1565853664624},{"_id":"public/robots.txt","hash":"2bab0081cc734877f50e0c02e3a83dcfd400d211","modified":1565853439562},{"_id":"public/avatar/avatar.png","hash":"f205692c08fc1f013ab81caca5504e6c50fa0e52","modified":1565853439562},{"_id":"public/README.MDOWN","hash":"1c2752a9ba4344d0c9a138bc1a72e04b602fc03a","modified":1565853439562},{"_id":"public/images/forkme_left_white_ffffff.png","hash":"213f682ee0f6be9ee985c24b700b99c59ad004aa","modified":1565853439562},{"_id":"public/favicon/favicon.ico","hash":"8c48c4165fbf145abaddc99ac5891f731d5feec5","modified":1565853439562},{"_id":"public/images/hexo-next-five-4.png","hash":"93d9085a3299985c3deee73967e957a045913380","modified":1565853439562},{"_id":"public/images/css-hack-1.png","hash":"e711166bade31ab958199dec52f9e30c43a0c26a","modified":1565853439562},{"_id":"public/images/gulp-1.png","hash":"14591ce57abd96e129e2ce9813ad75ce39d27b7a","modified":1565853439562},{"_id":"public/images/hexo-next-five-3.png","hash":"b5dc3d88028d77c4a3036ba43fb203134af87d4f","modified":1565853439563},{"_id":"public/images/hexo-next-five-2.png","hash":"299f95827a48d65523d56215bd78b60a1df82296","modified":1565853439563},{"_id":"public/images/hexo-next-five-1.png","hash":"d16342b3f8cb34677c0f0d99dc28dd08ae543651","modified":1565853439563},{"_id":"public/images/service-worker-2.png","hash":"afebb9e71adcb7cad1292354a462d11992cf44a8","modified":1565853439563},{"_id":"public/images/hexo-next-five-5.png","hash":"405eb5f830aa2ed5c0726a0954a1224a7b10bc5a","modified":1565853439563},{"_id":"public/images/service-worker-4.png","hash":"c827bfe4285a96a84dca9f265fe7fceae15adf9b","modified":1565853439563},{"_id":"public/images/service-worker-5.png","hash":"9f9b61b90901e94bfec404a7df3afba189d0e8c4","modified":1565853439563},{"_id":"public/images/vue-music-1.png","hash":"7b3b640108eed7abb76e0713a2a242051ee24483","modified":1565853439564},{"_id":"public/images/vue-sell-1.png","hash":"fcee734750286ff4cfe4d7fd82a7caa9b888785f","modified":1565853439564},{"_id":"public/images/vue-sell-2.png","hash":"8a33ad9977ca992ad052ff79a3d3fd5ac70f6590","modified":1565853439564},{"_id":"public/images/service-worker-3.png","hash":"906fb923781982d9769ca98dc7bd9059821231e1","modified":1565853439564},{"_id":"public/images/service-worker-1.png","hash":"4eb29e6b92cb09a3d4fdbf75df81bc2407a66b81","modified":1565853439564},{"_id":"public/images/vue-sell-5.png","hash":"a6d00954e64997ebf00f711003cc4b169671a271","modified":1565853439564},{"_id":"public/images/vue-sell-pay.png","hash":"ad8e1404a1e2778951a17b15ae1ea4a875584d6a","modified":1565853439564},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1565853439564},{"_id":"public/images/candy-cane-stars.png","hash":"94c2b96474f973eae854e6927cd763ada892812a","modified":1565853439564},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1565853439564},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1565853439564},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1565853439565},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1565853439565},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1565853439565},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1565853439565},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1565853439565},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565853439565},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565853439565},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1565853439565},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1565853439565},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1565853439565},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1565853439565},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1565853439565},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565853439565},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565853439565},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565853439565},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565853439565},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565853439565},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565853439565},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1565853439565},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1565853439565},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565853439565},{"_id":"public/service-worker.js","hash":"a95bdab761388951d2910bf17f89d446a03bbb4d","modified":1565853440486},{"_id":"public/images/view-my-blog.png","hash":"5f1e743dba2584ac549d716e8e10599a1642ee9f","modified":1565853440486},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1565853440504},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1565853440504},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1565853440504},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1565853440510},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1565853440511},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1565853440511},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1565853440511},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1565853440511},{"_id":"public/js/src/jquery-stars.js","hash":"caeddc5ae60e8f7373f211efc59f124bd7a20975","modified":1565853440511},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1565853440511},{"_id":"public/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1565853440511},{"_id":"public/js/src/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1565853440512},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1565853440512},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1565853440512},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1565853440512},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1565853440512},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565853440512},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1565853440512},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1565853440512},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1565853440512},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1565853440512},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1565853440512},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1565853440512},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1565853440512},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1565853440512},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1565853440512},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1565853440512},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1565853440512},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1565853440512},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1565853440512},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565853440512},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1565853440512},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565853440512},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1565853440512},{"_id":"public/css/gitment.css","hash":"11395be03fce06683d9fa95a717c6f274e408d2e","modified":1565853440512},{"_id":"public/css/main.css","hash":"489dbc4e5396c3a53757ea49fc418621432846f5","modified":1565853440512},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565853440512},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565853440512},{"_id":"public/js/src/embed.js","hash":"04c86cfd2755cfb7519ac7543593bc9670bd64f6","modified":1565853440512},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565853440512},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1565853440512},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1565853440513},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1565853440513},{"_id":"public/js/src/gitment.browser.js","hash":"9515815df62741b7082447deb2f41740fcf6f8ea","modified":1565853440513},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1565853440513},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1565853440513},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565853440513},{"_id":"public/reward/reward_wechat.png","hash":"9ee77787a889a5bbe6a083ff4ec9da466e4e3880","modified":1565853664684},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1565853440513},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1565853440680},{"_id":"public/images/vue-sell-3.gif","hash":"e90c90eb6a5286b48875219c61d784e3388c8f6f","modified":1565853664838},{"_id":"public/2018/11/11/vue-sell/index.html","hash":"7f6472f6eb4480b3289cc710e4adf51d03a8b110","modified":1565853664634},{"_id":"public/2018/07/15/hexo-next-five/index.html","hash":"b87e2b43119b0da15fc9d8afcb65f98333a0fc8c","modified":1565853664634},{"_id":"public/2018/06/25/css-hack/index.html","hash":"8d5a2627558a1fae9f254af6b398094b2826eec8","modified":1565853664634},{"_id":"public/2018/06/08/service-worker/index.html","hash":"479bff01c7b47b771bddb144c1aa20b8ec1a12a7","modified":1565853664634},{"_id":"public/2018/05/20/npm-two/index.html","hash":"89714fedb974b9b6ce696912aefd1eb57294d297","modified":1565853664634},{"_id":"public/2018/05/01/gulp/index.html","hash":"c185af113485755a2cffd4e3499ccd54388bfa06","modified":1565853664634},{"_id":"public/2018/04/10/npm/index.html","hash":"bd8515be83c27ed5f7878e2d0fa32bc527d3a590","modified":1565853664634},{"_id":"public/2018/03/20/amd-cmd/index.html","hash":"df44f82aa06d3f40480205d4e3c4ee2ce3243ea6","modified":1565853664635},{"_id":"public/2018/03/07/commonjs/index.html","hash":"6fc3b73b5bf086d4ac3dbf2ce1c24ee064cb225c","modified":1565853664635},{"_id":"public/2018/02/28/memory-leak/index.html","hash":"3d419e57f2f19ede1c27d6162216047694961e0f","modified":1565853664635},{"_id":"public/2018/02/18/js-memory-management-and-gc/index.html","hash":"554dc6c9ef8d18492042fd8f53a2bfd89e458e15","modified":1565853664635},{"_id":"public/2018/02/11/respond-js/index.html","hash":"b89ef64dcdbbc6a436bc1e8cd8dd45dc8b999aab","modified":1565853664635},{"_id":"public/2018/02/14/why-we-dropped-zepto/index.html","hash":"0abbc74208119163877fbd5d757c72aee677c3bf","modified":1565853664635},{"_id":"public/2018/01/18/html5shiv/index.html","hash":"a247740a48f81c587d0e2e70c4377782dabcd7a7","modified":1565853664635},{"_id":"public/2017/12/24/why-introversion-like-alone/index.html","hash":"ed3e9a01a9cfcd69c2351f8fe753c5fb90190e77","modified":1565853664635},{"_id":"public/2017/12/15/hexo-next-four/index.html","hash":"d63b860ed50e09c9469c532406aaadfda8810f36","modified":1565853664635},{"_id":"public/2017/11/22/use-jquery-skill/index.html","hash":"f0966f315efb04a0ffc8dbc23a2cb6ef5551da03","modified":1565853664635},{"_id":"public/2017/11/18/china-javascript-environment/index.html","hash":"e67210f95022c62f8e5f31324b8bf73dcbc920db","modified":1565853664636},{"_id":"public/2017/11/11/hexo-next-three/index.html","hash":"8fdc7d784aa147e6ec408338a5d3933cdbcb336e","modified":1565853664636},{"_id":"public/2017/10/23/sass/index.html","hash":"6d9d64f251ca5b9159ce185aac862bb16350a412","modified":1565853664636},{"_id":"public/2017/10/16/how-it-feels-to-learn-javascript-in-2016/index.html","hash":"abeda4e1ebb8f236d6a1e16623f386b1cdd7fd26","modified":1565853664636},{"_id":"public/2017/10/07/git/index.html","hash":"b5da83923008923bcb35d0ed7c573c542e8b4b4d","modified":1565853664636},{"_id":"public/2017/09/30/hexo-next-two/index.html","hash":"7765f7d9ead1cd80777791c31793a70c025f8289","modified":1565853664636},{"_id":"public/2017/09/25/essay-20160925/index.html","hash":"43d01ca41969fb802c5589e159e3a892ef77927c","modified":1565853664636},{"_id":"public/2017/09/03/hexo-next-one/index.html","hash":"2405406f731aa5b702901d873ec0af777f892341","modified":1565853664636},{"_id":"public/archives/2017/09/index.html","hash":"26f019a3ddc78642522079a8cc92989e2ce7c13f","modified":1565853664636},{"_id":"public/archives/2017/10/index.html","hash":"083989850dadc00edfd39042693a814c87ee1cad","modified":1565853664636},{"_id":"public/archives/2017/12/index.html","hash":"90d882935b125075ba1b9989a2ba1f2ec68720e3","modified":1565853664636},{"_id":"public/archives/2018/index.html","hash":"ab878a43b77c34ce57deabd2d2883fa1c59acb22","modified":1565853664636},{"_id":"public/archives/2018/page/2/index.html","hash":"7772eedb0854117030a8776ab0e765779f029cc0","modified":1565853664636},{"_id":"public/archives/2018/01/index.html","hash":"e68779ebf9762c23493902206c22584d0ab5d9d9","modified":1565853664636},{"_id":"public/archives/2018/02/index.html","hash":"00bb1af41a1cb6624558e83c83d49b2a6e15761f","modified":1565853664636},{"_id":"public/archives/2018/03/index.html","hash":"fd4e9926c8dc9e5558666bc3bf5848541bd1bdad","modified":1565853664637},{"_id":"public/archives/2018/04/index.html","hash":"7952e1a94ef67735124b1251c95245e7aefed890","modified":1565853664637},{"_id":"public/archives/2018/05/index.html","hash":"fde3b618e1df783bca75cd5d7e1e07373833e54a","modified":1565853664637},{"_id":"public/archives/2018/06/index.html","hash":"caedb4248adfd87277a6ed7b6186b3034f4834c5","modified":1565853664637},{"_id":"public/archives/2018/07/index.html","hash":"bf2dfb41ea0847e7936994c449bfcb6073fbab08","modified":1565853664637},{"_id":"public/archives/2018/11/index.html","hash":"d1044797a81f16714ded8bbf583b6b0a4d136e7a","modified":1565853664637}],"Category":[{"name":"前端","_id":"cjzccpcyh0005z4v5ddazebck"},{"name":"综合","_id":"cjzccpcyo000az4v5qzx9e8s8"},{"name":"随笔","_id":"cjzccpcz0000mz4v596ofgj2r"},{"name":"Hexo","_id":"cjzccpcz5000vz4v5gr9sth4v"}],"Data":[],"Page":[{"title":"404-找不到页面","date":"2017-09-03T09:17:18.000Z","comments":0,"_content":"<center>404 Not Found<center>\n---\n<center>\n对不起，您所访问的页面不存在或者已删除\n你可以[点击此处](https://nigelyao.github.io)返回首页.\n你可以去我的微博看看：[http://weibo.com/nigelyao](http://weibo.com/nigelyao)\n我的Github：[http://github.com/nigelyao](http://github.com/nigelyao)\n我的CSDN：[http://blog.csdn.net/nigelyao](http://blog.csdn.net/nigelyao)\n或者给我留言：[https://nigelyao.github.io/guestbook/](https://nigelyao.github.io/guestbook/)\n\n</center>\n<blockquote class=\"blockquote-center\">\n    曾与你指尖相碰，也好过一无所有\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n","source":"404.md","raw":"---\ntitle: 404-找不到页面\ndate: 2017-09-03 17:17:18\ncomments: false\n---\n<center>404 Not Found<center>\n---\n<center>\n对不起，您所访问的页面不存在或者已删除\n你可以[点击此处](https://nigelyao.github.io)返回首页.\n你可以去我的微博看看：[http://weibo.com/nigelyao](http://weibo.com/nigelyao)\n我的Github：[http://github.com/nigelyao](http://github.com/nigelyao)\n我的CSDN：[http://blog.csdn.net/nigelyao](http://blog.csdn.net/nigelyao)\n或者给我留言：[https://nigelyao.github.io/guestbook/](https://nigelyao.github.io/guestbook/)\n\n</center>\n<blockquote class=\"blockquote-center\">\n    曾与你指尖相碰，也好过一无所有\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n","updated":"2019-08-15T07:18:53.840Z","path":"404.html","_id":"cjzccpcwt0000z4v57z3x0a4w","layout":"page","content":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></center></center></h2><p><center><br>对不起，您所访问的页面不存在或者已删除<br>你可以<a href=\"https://nigelyao.github.io\">点击此处</a>返回首页.<br>你可以去我的微博看看：<a href=\"http://weibo.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://weibo.com/nigelyao</a><br>我的Github：<a href=\"http://github.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://github.com/nigelyao</a><br>我的CSDN：<a href=\"http://blog.csdn.net/nigelyao\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/nigelyao</a><br>或者给我留言：<a href=\"https://nigelyao.github.io/guestbook/\">https://nigelyao.github.io/guestbook/</a></center></p>\n<p></p>\n<blockquote class=\"blockquote-center\"><br>    曾与你指尖相碰，也好过一无所有<br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></center></center></h2><p><center><br>对不起，您所访问的页面不存在或者已删除<br>你可以<a href=\"https://nigelyao.github.io\">点击此处</a>返回首页.<br>你可以去我的微博看看：<a href=\"http://weibo.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://weibo.com/nigelyao</a><br>我的Github：<a href=\"http://github.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://github.com/nigelyao</a><br>我的CSDN：<a href=\"http://blog.csdn.net/nigelyao\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/nigelyao</a><br>或者给我留言：<a href=\"https://nigelyao.github.io/guestbook/\">https://nigelyao.github.io/guestbook/</a></center></p>\n<p></p>\n<blockquote class=\"blockquote-center\"><br>    曾与你指尖相碰，也好过一无所有<br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote>\n\n"},{"title":"离线页面","date":"2017-06-28T13:46:18.000Z","comments":0,"_content":"<center>404 Not Found<center>\n---\n<center>\n对不起，没有检测到网络连接\n你可以[点击此处](https://nigelyao.github.io)返回首页.\n\n</center>\n<blockquote class=\"blockquote-center\">\n   \n</blockquote>\n\n","source":"offline.md","raw":"---\ntitle: 离线页面\ndate: 2017-06-28 21:46:18\ncomments: false\n---\n<center>404 Not Found<center>\n---\n<center>\n对不起，没有检测到网络连接\n你可以[点击此处](https://nigelyao.github.io)返回首页.\n\n</center>\n<blockquote class=\"blockquote-center\">\n   \n</blockquote>\n\n","updated":"2019-08-15T07:12:25.449Z","path":"offline.html","layout":"page","_id":"cjzccpcx90001z4v56r6111xi","content":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></center></center></h2><p><center><br>对不起，没有检测到网络连接<br>你可以<a href=\"https://nigelyao.github.io\">点击此处</a>返回首页.</center></p>\n<p></p>\n<blockquote class=\"blockquote-center\"><br><br></blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></center></center></h2><p><center><br>对不起，没有检测到网络连接<br>你可以<a href=\"https://nigelyao.github.io\">点击此处</a>返回首页.</center></p>\n<p></p>\n<blockquote class=\"blockquote-center\"><br><br></blockquote>\n\n"},{"title":"about","date":"2017-09-03T15:42:06.000Z","comments":0,"_content":"\n# 联系方式\nEmail: React.dong.yu@gmail.com\nWeibo: http://weibo.com/nigelyao\n\n# 基本信息\n学历：本科\n目前所在城市：深圳\n\n# 个人简介\n前端工程师 \n喜欢 javascript 语言和相关组件以及 backbone、vue.js、node.js、mongoDB、PHP、JAVA、GO、Redis、Docker、Linux等后端、数据库技术\n\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n\n# 技能清单\n第五届蓝桥杯JAVA软件开发省赛一等奖","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-09-03 23:42:06\ncomments: false\n---\n\n# 联系方式\nEmail: React.dong.yu@gmail.com\nWeibo: http://weibo.com/nigelyao\n\n# 基本信息\n学历：本科\n目前所在城市：深圳\n\n# 个人简介\n前端工程师 \n喜欢 javascript 语言和相关组件以及 backbone、vue.js、node.js、mongoDB、PHP、JAVA、GO、Redis、Docker、Linux等后端、数据库技术\n\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n\n# 技能清单\n第五届蓝桥杯JAVA软件开发省赛一等奖","updated":"2019-08-15T07:18:42.093Z","path":"about/index.html","_id":"cjzccpcy50002z4v5wy19coqb","layout":"page","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>Email: React.dong.yu@gmail.com<br>Weibo: <a href=\"http://weibo.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://weibo.com/nigelyao</a></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><p>学历：本科<br>目前所在城市：深圳</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><p>前端工程师<br>喜欢 javascript 语言和相关组件以及 backbone、vue.js、node.js、mongoDB、PHP、JAVA、GO、Redis、Docker、Linux等后端、数据库技术</p>\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>第五届蓝桥杯JAVA软件开发省赛一等奖</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>Email: React.dong.yu@gmail.com<br>Weibo: <a href=\"http://weibo.com/nigelyao\" target=\"_blank\" rel=\"noopener\">http://weibo.com/nigelyao</a></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><p>学历：本科<br>目前所在城市：深圳</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><p>前端工程师<br>喜欢 javascript 语言和相关组件以及 backbone、vue.js、node.js、mongoDB、PHP、JAVA、GO、Redis、Docker、Linux等后端、数据库技术</p>\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>第五届蓝桥杯JAVA软件开发省赛一等奖</p>\n"},{"title":"categories","date":"2017-09-05T15:41:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-09-05 23:41:55\ntype: \"categories\"\ncomments: false\n---","updated":"2019-08-15T07:18:40.364Z","path":"categories/index.html","_id":"cjzccpd5d0039z4v5f0xtatx6","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"guestbook","date":"2017-09-03T09:21:10.000Z","comments":1,"_content":"<blockquote class=\"blockquote-center\">\n    认真的人才有资格开玩笑\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" title=\"绅士(Cover 薛之谦)-宇西\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" title=\"你还要我怎样-薛之谦\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <embed src=\"//music.163.com/style/swf/widget.swf?sid=34183386&type=2&auto=0&width=320&height=66\" title=\"Tell me - Noicybino\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n<br/>","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2017-09-03 17:21:10\ncomments: true\n---\n<blockquote class=\"blockquote-center\">\n    认真的人才有资格开玩笑\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" title=\"绅士(Cover 薛之谦)-宇西\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" title=\"你还要我怎样-薛之谦\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <embed src=\"//music.163.com/style/swf/widget.swf?sid=34183386&type=2&auto=0&width=320&height=66\" title=\"Tell me - Noicybino\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n<br/>","updated":"2019-08-15T07:18:38.400Z","path":"guestbook/index.html","_id":"cjzccpd5g003bz4v5vt9tymxp","layout":"page","content":"<p><blockquote class=\"blockquote-center\"><br>    认真的人才有资格开玩笑<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" title=\"绅士(Cover 薛之谦)-宇西\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" title=\"你还要我怎样-薛之谦\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <embed src=\"//music.163.com/style/swf/widget.swf?sid=34183386&type=2&auto=0&width=320&height=66\" title=\"Tell me - Noicybino\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote><br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<p><blockquote class=\"blockquote-center\"><br>    认真的人才有资格开玩笑<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" title=\"绅士(Cover 薛之谦)-宇西\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" title=\"你还要我怎样-薛之谦\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=26672926&type=2&auto=0&width=320&height=66\" title=\"Nothing To Fear - Dexter Britain\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <embed src=\"//music.163.com/style/swf/widget.swf?sid=34183386&type=2&auto=0&width=320&height=66\" title=\"Tell me - Noicybino\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote><br><br></p>\n"},{"title":"weblog","date":"2017-09-03T15:31:12.000Z","comments":0,"_content":"### 建站日志\n**2018-10-24：**增加鼠标移动效果、自定义的部分单独拿出来作为一个文件然后引入、移除service-worker、静态文件增加版本号.\n**2018-08-15：**日常修改(增加网页进度条、字数统计、RSS ...)\n**2018-06-25：**添加 Service-worker.\n**2018-05-05：**实现 summary_img 字段，用于首页显示摘要图片，文章页不显示.\n**2018-02-05：**将背景动画调整为按需加载(移动端不加载).\n**2018-01-11：**将多说自定义样式移到本地 & 为多说评论添加显示浏览器及操作系统UA信息.\n**2017-11-11：**布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.\n**2017-11-01：**解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.\n**2017-09-26：**增加博客背景，鼠标点击样式.\n**2017-09-10：**增加网易云音乐外链、High一下、站内搜索.\n**2017-09-08：**增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.\n**2017-09-06：**选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.\n**2017-09-03：**这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.","source":"weblog/index.md","raw":"---\ntitle: weblog\ndate: 2017-09-03 23:31:12\ncomments: false\n---\n### 建站日志\n**2018-10-24：**增加鼠标移动效果、自定义的部分单独拿出来作为一个文件然后引入、移除service-worker、静态文件增加版本号.\n**2018-08-15：**日常修改(增加网页进度条、字数统计、RSS ...)\n**2018-06-25：**添加 Service-worker.\n**2018-05-05：**实现 summary_img 字段，用于首页显示摘要图片，文章页不显示.\n**2018-02-05：**将背景动画调整为按需加载(移动端不加载).\n**2018-01-11：**将多说自定义样式移到本地 & 为多说评论添加显示浏览器及操作系统UA信息.\n**2017-11-11：**布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.\n**2017-11-01：**解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.\n**2017-09-26：**增加博客背景，鼠标点击样式.\n**2017-09-10：**增加网易云音乐外链、High一下、站内搜索.\n**2017-09-08：**增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.\n**2017-09-06：**选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.\n**2017-09-03：**这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.","updated":"2019-08-15T07:18:30.257Z","path":"weblog/index.html","_id":"cjzccpd5j003dz4v5yapkiiae","layout":"page","content":"<h3 id=\"建站日志\"><a href=\"#建站日志\" class=\"headerlink\" title=\"建站日志\"></a>建站日志</h3><p><strong>2018-10-24：</strong>增加鼠标移动效果、自定义的部分单独拿出来作为一个文件然后引入、移除service-worker、静态文件增加版本号.<br><strong>2018-08-15：</strong>日常修改(增加网页进度条、字数统计、RSS …)<br><strong>2018-06-25：</strong>添加 Service-worker.<br><strong>2018-05-05：</strong>实现 summary_img 字段，用于首页显示摘要图片，文章页不显示.<br><strong>2018-02-05：</strong>将背景动画调整为按需加载(移动端不加载).<br><strong>2018-01-11：</strong>将多说自定义样式移到本地 &amp; 为多说评论添加显示浏览器及操作系统UA信息.<br><strong>2017-11-11：</strong>布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.<br><strong>2017-11-01：</strong>解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.<br><strong>2017-09-26：</strong>增加博客背景，鼠标点击样式.<br><strong>2017-09-10：</strong>增加网易云音乐外链、High一下、站内搜索.<br><strong>2017-09-08：</strong>增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.<br><strong>2017-09-06：</strong>选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.<br><strong>2017-09-03：</strong>这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"建站日志\"><a href=\"#建站日志\" class=\"headerlink\" title=\"建站日志\"></a>建站日志</h3><p><strong>2018-10-24：</strong>增加鼠标移动效果、自定义的部分单独拿出来作为一个文件然后引入、移除service-worker、静态文件增加版本号.<br><strong>2018-08-15：</strong>日常修改(增加网页进度条、字数统计、RSS …)<br><strong>2018-06-25：</strong>添加 Service-worker.<br><strong>2018-05-05：</strong>实现 summary_img 字段，用于首页显示摘要图片，文章页不显示.<br><strong>2018-02-05：</strong>将背景动画调整为按需加载(移动端不加载).<br><strong>2018-01-11：</strong>将多说自定义样式移到本地 &amp; 为多说评论添加显示浏览器及操作系统UA信息.<br><strong>2017-11-11：</strong>布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.<br><strong>2017-11-01：</strong>解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.<br><strong>2017-09-26：</strong>增加博客背景，鼠标点击样式.<br><strong>2017-09-10：</strong>增加网易云音乐外链、High一下、站内搜索.<br><strong>2017-09-08：</strong>增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.<br><strong>2017-09-06：</strong>选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.<br><strong>2017-09-03：</strong>这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.</p>\n"},{"title":"tags","date":"2017-09-05T15:41:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-09-05 23:41:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-08-15T07:18:36.436Z","path":"tags/index.html","_id":"cjzccpd5j003ez4v5inskxq33","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\">\n\t<title>css-hack 示例</title>\n\t<style>\n\tdiv.css-hack{margin:10px 0;font-size:20px;}\n\tspan.css-hack-item {display:none; color: #f69; font-size: 26px;}\n\tspan.not-ie{display:inline;}\n\t</style>\n\t<!--[if IE]>\n\t<style>\n\tspan.ie{display:inline;}\n\tspan.not-ie{display:none;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 5]>\n\t<style>\n\tspan.ie5{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 6]>\n\t<style>\n\tspan.ie6{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 7]>\n\t<style>\n\tspan.ie7{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 8]>\n\t<style>\n\tspan.ie8{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 9]>\n\t<style>\n\tspan.ie9{display:inline;}\n\t</style>\n\t<![endif]-->\n\t</head>\n\t<body>\n\t<div class=\"css-hack\">\n\t\t您正在使用\n\t\t<span class=\"css-hack-item not-ie\">非IE或IE10及其以上版本的</span>\n\t\t<span class=\"css-hack-item ie\">IE</span>\n\t\t<span class=\"css-hack-item ie5\">5</span>\n\t\t<span class=\"css-hack-item ie6\">6</span>\n\t\t<span class=\"css-hack-item ie7\">7</span>\n\t\t<span class=\"css-hack-item ie8\">8</span>\n\t\t<span class=\"css-hack-item ie9\">9</span>\n\t\t浏览器\n\t</div>\n\t</body>\n\t</html>","source":"yu/css-hack.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\">\n\t<title>css-hack 示例</title>\n\t<style>\n\tdiv.css-hack{margin:10px 0;font-size:20px;}\n\tspan.css-hack-item {display:none; color: #f69; font-size: 26px;}\n\tspan.not-ie{display:inline;}\n\t</style>\n\t<!--[if IE]>\n\t<style>\n\tspan.ie{display:inline;}\n\tspan.not-ie{display:none;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 5]>\n\t<style>\n\tspan.ie5{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 6]>\n\t<style>\n\tspan.ie6{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 7]>\n\t<style>\n\tspan.ie7{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 8]>\n\t<style>\n\tspan.ie8{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 9]>\n\t<style>\n\tspan.ie9{display:inline;}\n\t</style>\n\t<![endif]-->\n\t</head>\n\t<body>\n\t<div class=\"css-hack\">\n\t\t您正在使用\n\t\t<span class=\"css-hack-item not-ie\">非IE或IE10及其以上版本的</span>\n\t\t<span class=\"css-hack-item ie\">IE</span>\n\t\t<span class=\"css-hack-item ie5\">5</span>\n\t\t<span class=\"css-hack-item ie6\">6</span>\n\t\t<span class=\"css-hack-item ie7\">7</span>\n\t\t<span class=\"css-hack-item ie8\">8</span>\n\t\t<span class=\"css-hack-item ie9\">9</span>\n\t\t浏览器\n\t</div>\n\t</body>\n\t</html>","date":"2018-01-15T08:57:30.956Z","updated":"2018-01-15T08:57:30.956Z","path":"yu/css-hack.html","title":"","comments":1,"layout":"page","_id":"cjzccpd5o003gz4v5o61jrjvc","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\">\n\t<title>css-hack 示例</title>\n\t<style>\n\tdiv.css-hack{margin:10px 0;font-size:20px;}\n\tspan.css-hack-item {display:none; color: #f69; font-size: 26px;}\n\tspan.not-ie{display:inline;}\n\t</style>\n\t<!--[if IE]>\n\t<style>\n\tspan.ie{display:inline;}\n\tspan.not-ie{display:none;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 5]>\n\t<style>\n\tspan.ie5{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 6]>\n\t<style>\n\tspan.ie6{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 7]>\n\t<style>\n\tspan.ie7{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 8]>\n\t<style>\n\tspan.ie8{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 9]>\n\t<style>\n\tspan.ie9{display:inline;}\n\t</style>\n\t<![endif]-->\n\t</head>\n\t<body>\n\t<div class=\"css-hack\">\n\t\t您正在使用\n\t\t<span class=\"css-hack-item not-ie\">非IE或IE10及其以上版本的</span>\n\t\t<span class=\"css-hack-item ie\">IE</span>\n\t\t<span class=\"css-hack-item ie5\">5</span>\n\t\t<span class=\"css-hack-item ie6\">6</span>\n\t\t<span class=\"css-hack-item ie7\">7</span>\n\t\t<span class=\"css-hack-item ie8\">8</span>\n\t\t<span class=\"css-hack-item ie9\">9</span>\n\t\t浏览器\n\t</div>\n\t</body>\n\t</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\">\n\t<title>css-hack 示例</title>\n\t<style>\n\tdiv.css-hack{margin:10px 0;font-size:20px;}\n\tspan.css-hack-item {display:none; color: #f69; font-size: 26px;}\n\tspan.not-ie{display:inline;}\n\t</style>\n\t<!--[if IE]>\n\t<style>\n\tspan.ie{display:inline;}\n\tspan.not-ie{display:none;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 5]>\n\t<style>\n\tspan.ie5{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 6]>\n\t<style>\n\tspan.ie6{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 7]>\n\t<style>\n\tspan.ie7{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 8]>\n\t<style>\n\tspan.ie8{display:inline;}\n\t</style>\n\t<![endif]-->\n\n\t<!--[if IE 9]>\n\t<style>\n\tspan.ie9{display:inline;}\n\t</style>\n\t<![endif]-->\n\t</head>\n\t<body>\n\t<div class=\"css-hack\">\n\t\t您正在使用\n\t\t<span class=\"css-hack-item not-ie\">非IE或IE10及其以上版本的</span>\n\t\t<span class=\"css-hack-item ie\">IE</span>\n\t\t<span class=\"css-hack-item ie5\">5</span>\n\t\t<span class=\"css-hack-item ie6\">6</span>\n\t\t<span class=\"css-hack-item ie7\">7</span>\n\t\t<span class=\"css-hack-item ie8\">8</span>\n\t\t<span class=\"css-hack-item ie9\">9</span>\n\t\t浏览器\n\t</div>\n\t</body>\n\t</html>"}],"Post":[{"title":"AMD，CMD 规范详解","date":"2018-03-19T19:25:24.000Z","comments":0,"_content":"\n当我们了解了 [CommonJS](https://nigelyao.github.io/2018/03/07/commonjs/) 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。\n由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。\n但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？\n\n<!-- more -->\n\n``` javascript\nvar math = require('math');\nmath.add(2, 3);\n```\n第二行 math.add(2, 3)，在第一行 require('math') 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。\n\n因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。\n\n\n# AMD\n\n[AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 [AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)。\nAMD(Asynchronous module definition) ： 异步模块定义。\n\n\n\n类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。\nCMD(Common module definition)：通用模块定义。\n目前这些规范的实现都能达成**浏览器端模块化开发的目的**。\n\n\n\n\n|服务端JS|浏览器端JS|\n|:---:|:---:|\n|相同的代码需要多次执行|代码需要从一个服务器端分发到多个客户端执行|\n|CPU 和内存资源是瓶颈|宽带是瓶颈|\n|加载时从磁盘中加载|加载时需要通过网络加载|\n\nAMD 的诞生，就是为了解决这两个问题：\n1.实现 js 文件的异步加载，避免网页失去响应\n2.管理模块之间的依赖性，便于代码的编写和维护\n\nAMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\nAMD 也采用 [require()](https://github.com/amdjs/amdjs-api/wiki/require) 语句加载模块，但是不同于 CommonJS，它要求两个参数：\n```\nrequire([module], callback);\n```\n第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：\n```\nrequire(['math'], function (math) {\n  math.add(2, 3);\n});\n```\n\n实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：[require.js](https://github.com/requirejs/requirejs) 和 [curl.js](https://github.com/cujojs/curl)。不过多数人还是用 require.js 。\n另外如果对 ES6 的模块感兴趣，可以考虑 [my.js](http://github.com/hax/my.js) ，是按照 ES6 草案的 module/loader 规范实现的。\n\n[AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) 是 [require.js](https://github.com/requirejs/requirejs) 在推广过程中对模块定义的规范化产出。\n\n推荐学习 [require.js](http://requirejs.org/)。\n\n## AMD 模块的写法\n[require.js](https://github.com/requirejs/requirejs) 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n```\n// math.js\ndefine(function (){\n　var add = function (x,y){\n　　return x+y;\n　};\n　return {\n　　add: add\n　};\n});\n```\n加载方法如下：\n```\n// main.js\nrequire(['math'], function (math){\n　alert(math.add(1,1));\n});\n```\n如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。\n```\ndefine(['myLib'], function(myLib){\n　function foo(){\n　　myLib.doSomething();\n　}\n　return {\n　　foo : foo\n　};\n});\n```\n当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。\n\n## 加载非规范的模块\n理论上，[require.js](https://github.com/requirejs/requirejs) 加载的模块，必须是按照 [AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？\n回答是可以的。\n这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。\n举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。\n```\nrequire.config({\n　shim: {\n　　'underscore': {\n　　　exports: '_'\n　　},\n　　'backbone': {\n　　　deps: ['underscore', 'jquery'],\n　　　exports: 'Backbone'\n　　}\n　}\n});\n```\nrequire.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：\n（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；\n（2）deps 数组，表明该模块的依赖性。\n比如，jQuery 的插件可以这样定义：\n```\nshim: {\n　'jquery.scroll': {\n　　deps: ['jquery'],\n　　exports: 'jQuery.fn.scroll'\n　}\n}\n```\n\n# CMD\n\n[CMD](https://github.com/seajs/seajs/issues/277) 是 [sea.js](https://github.com/seajs/seajs) 在推广过程中对模块定义的规范化产出。\n\n### CMD 模块定义\n在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。\ndefine 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。\nfactory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：\n``` javascript\ndefine({\"foo\": \"bar\"});\n```\n也可以通过字符串定义模板模块：\n``` javascript\ndefine('I am a template.My name is {{name}}.');\n```\nfactory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。\nfactory 是一个函数，有三个参数，function(require, exports, module)\n1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)\n2、exports 是一个对象，用来向外提供模块接口\n3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法\n``` javascript\ndefine(function(require, exports, module) {\n  var a = require('./a');\n  a.doSomething();\n  // 依赖就近书写，什么时候用到什么时候引入\n  var b = require('./b');\n  b.doSomething();\n});\n```\n\n\n建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。\n\n\n# AMD 与 CMD 的区别\n区别：\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**延迟执行**。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇**依赖就近**，AMD 推崇**依赖前置**\n","source":"_posts/amd-cmd.md","raw":"---\ntitle: AMD，CMD 规范详解\ndate: 2018-03-20 03:25:24\ncategories: 前端\ntags: [JavaScript]\ncomments: false\n---\n\n当我们了解了 [CommonJS](https://nigelyao.github.io/2018/03/07/commonjs/) 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。\n由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。\n但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？\n\n<!-- more -->\n\n``` javascript\nvar math = require('math');\nmath.add(2, 3);\n```\n第二行 math.add(2, 3)，在第一行 require('math') 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。\n\n因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。\n\n\n# AMD\n\n[AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 [AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)。\nAMD(Asynchronous module definition) ： 异步模块定义。\n\n\n\n类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。\nCMD(Common module definition)：通用模块定义。\n目前这些规范的实现都能达成**浏览器端模块化开发的目的**。\n\n\n\n\n|服务端JS|浏览器端JS|\n|:---:|:---:|\n|相同的代码需要多次执行|代码需要从一个服务器端分发到多个客户端执行|\n|CPU 和内存资源是瓶颈|宽带是瓶颈|\n|加载时从磁盘中加载|加载时需要通过网络加载|\n\nAMD 的诞生，就是为了解决这两个问题：\n1.实现 js 文件的异步加载，避免网页失去响应\n2.管理模块之间的依赖性，便于代码的编写和维护\n\nAMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\nAMD 也采用 [require()](https://github.com/amdjs/amdjs-api/wiki/require) 语句加载模块，但是不同于 CommonJS，它要求两个参数：\n```\nrequire([module], callback);\n```\n第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：\n```\nrequire(['math'], function (math) {\n  math.add(2, 3);\n});\n```\n\n实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：[require.js](https://github.com/requirejs/requirejs) 和 [curl.js](https://github.com/cujojs/curl)。不过多数人还是用 require.js 。\n另外如果对 ES6 的模块感兴趣，可以考虑 [my.js](http://github.com/hax/my.js) ，是按照 ES6 草案的 module/loader 规范实现的。\n\n[AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) 是 [require.js](https://github.com/requirejs/requirejs) 在推广过程中对模块定义的规范化产出。\n\n推荐学习 [require.js](http://requirejs.org/)。\n\n## AMD 模块的写法\n[require.js](https://github.com/requirejs/requirejs) 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n```\n// math.js\ndefine(function (){\n　var add = function (x,y){\n　　return x+y;\n　};\n　return {\n　　add: add\n　};\n});\n```\n加载方法如下：\n```\n// main.js\nrequire(['math'], function (math){\n　alert(math.add(1,1));\n});\n```\n如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。\n```\ndefine(['myLib'], function(myLib){\n　function foo(){\n　　myLib.doSomething();\n　}\n　return {\n　　foo : foo\n　};\n});\n```\n当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。\n\n## 加载非规范的模块\n理论上，[require.js](https://github.com/requirejs/requirejs) 加载的模块，必须是按照 [AMD 规范](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？\n回答是可以的。\n这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。\n举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。\n```\nrequire.config({\n　shim: {\n　　'underscore': {\n　　　exports: '_'\n　　},\n　　'backbone': {\n　　　deps: ['underscore', 'jquery'],\n　　　exports: 'Backbone'\n　　}\n　}\n});\n```\nrequire.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：\n（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；\n（2）deps 数组，表明该模块的依赖性。\n比如，jQuery 的插件可以这样定义：\n```\nshim: {\n　'jquery.scroll': {\n　　deps: ['jquery'],\n　　exports: 'jQuery.fn.scroll'\n　}\n}\n```\n\n# CMD\n\n[CMD](https://github.com/seajs/seajs/issues/277) 是 [sea.js](https://github.com/seajs/seajs) 在推广过程中对模块定义的规范化产出。\n\n### CMD 模块定义\n在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。\ndefine 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。\nfactory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：\n``` javascript\ndefine({\"foo\": \"bar\"});\n```\n也可以通过字符串定义模板模块：\n``` javascript\ndefine('I am a template.My name is {{name}}.');\n```\nfactory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。\nfactory 是一个函数，有三个参数，function(require, exports, module)\n1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)\n2、exports 是一个对象，用来向外提供模块接口\n3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法\n``` javascript\ndefine(function(require, exports, module) {\n  var a = require('./a');\n  a.doSomething();\n  // 依赖就近书写，什么时候用到什么时候引入\n  var b = require('./b');\n  b.doSomething();\n});\n```\n\n\n建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。\n\n\n# AMD 与 CMD 的区别\n区别：\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**延迟执行**。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇**依赖就近**，AMD 推崇**依赖前置**\n","slug":"amd-cmd","published":1,"updated":"2019-08-15T07:19:20.102Z","_id":"cjzccpcy70003z4v5yghat0z1","layout":"post","photos":[],"link":"","content":"<p>当我们了解了 <a href=\"https://nigelyao.github.io/2018/03/07/commonjs/\">CommonJS</a> 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<br>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。<br>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’) 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。</p>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p><a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 <a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>。<br>AMD(Asynchronous module definition) ： 异步模块定义。</p>\n<p>类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。<br>CMD(Common module definition)：通用模块定义。<br>目前这些规范的实现都能达成<strong>浏览器端模块化开发的目的</strong>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务端JS</th>\n<th style=\"text-align:center\">浏览器端JS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">相同的代码需要多次执行</td>\n<td style=\"text-align:center\">代码需要从一个服务器端分发到多个客户端执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU 和内存资源是瓶颈</td>\n<td style=\"text-align:center\">宽带是瓶颈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">加载时从磁盘中加载</td>\n<td style=\"text-align:center\">加载时需要通过网络加载</td>\n</tr>\n</tbody>\n</table>\n<p>AMD 的诞生，就是为了解决这两个问题：<br>1.实现 js 文件的异步加载，避免网页失去响应<br>2.管理模块之间的依赖性，便于代码的编写和维护</p>\n<p>AMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n<p>AMD 也采用 <a href=\"https://github.com/amdjs/amdjs-api/wiki/require\" target=\"_blank\" rel=\"noopener\">require()</a> 语句加载模块，但是不同于 CommonJS，它要求两个参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([module], callback);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;math&apos;], function (math) &#123;</span><br><span class=\"line\">  math.add(2, 3);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：<a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 和 <a href=\"https://github.com/cujojs/curl\" target=\"_blank\" rel=\"noopener\">curl.js</a>。不过多数人还是用 require.js 。<br>另外如果对 ES6 的模块感兴趣，可以考虑 <a href=\"http://github.com/hax/my.js\" target=\"_blank\" rel=\"noopener\">my.js</a> ，是按照 ES6 草案的 module/loader 规范实现的。</p>\n<p><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">AMD</a> 是 <a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 在推广过程中对模块定义的规范化产出。</p>\n<p>推荐学习 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">require.js</a>。</p>\n<h2 id=\"AMD-模块的写法\"><a href=\"#AMD-模块的写法\" class=\"headerlink\" title=\"AMD 模块的写法\"></a>AMD 模块的写法</h2><p><a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。<br>具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。<br>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// math.js</span><br><span class=\"line\">define(function ()&#123;</span><br><span class=\"line\">　var add = function (x,y)&#123;</span><br><span class=\"line\">　　return x+y;</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　add: add</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>加载方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">require([&apos;math&apos;], function (math)&#123;</span><br><span class=\"line\">　alert(math.add(1,1));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;myLib&apos;], function(myLib)&#123;</span><br><span class=\"line\">　function foo()&#123;</span><br><span class=\"line\">　　myLib.doSomething();</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　foo : foo</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>\n<h2 id=\"加载非规范的模块\"><a href=\"#加载非规范的模块\" class=\"headerlink\" title=\"加载非规范的模块\"></a>加载非规范的模块</h2><p>理论上，<a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 加载的模块，必须是按照 <a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。<br>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">　shim: &#123;</span><br><span class=\"line\">　　&apos;underscore&apos;: &#123;</span><br><span class=\"line\">　　　exports: &apos;_&apos;</span><br><span class=\"line\">　　&#125;,</span><br><span class=\"line\">　　&apos;backbone&apos;: &#123;</span><br><span class=\"line\">　　　deps: [&apos;underscore&apos;, &apos;jquery&apos;],</span><br><span class=\"line\">　　　exports: &apos;Backbone&apos;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：<br>（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；<br>（2）deps 数组，表明该模块的依赖性。<br>比如，jQuery 的插件可以这样定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shim: &#123;</span><br><span class=\"line\">　&apos;jquery.scroll&apos;: &#123;</span><br><span class=\"line\">　　deps: [&apos;jquery&apos;],</span><br><span class=\"line\">　　exports: &apos;jQuery.fn.scroll&apos;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h1><p><a href=\"https://github.com/seajs/seajs/issues/277\" target=\"_blank\" rel=\"noopener\">CMD</a> 是 <a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">sea.js</a> 在推广过程中对模块定义的规范化产出。</p>\n<h3 id=\"CMD-模块定义\"><a href=\"#CMD-模块定义\" class=\"headerlink\" title=\"CMD 模块定义\"></a>CMD 模块定义</h3><p>在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。<br>define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。<br>factory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&#123;<span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>也可以通过字符串定义模板模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'I am a template.My name is &#123;&#123;name&#125;&#125;.'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。<br>factory 是一个函数，有三个参数，function(require, exports, module)<br>1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)<br>2、exports 是一个对象，用来向外提供模块接口<br>3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  <span class=\"comment\">// 依赖就近书写，什么时候用到什么时候引入</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</span><br><span class=\"line\">  b.doSomething();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。</p>\n<h1 id=\"AMD-与-CMD-的区别\"><a href=\"#AMD-与-CMD-的区别\" class=\"headerlink\" title=\"AMD 与 CMD 的区别\"></a>AMD 与 CMD 的区别</h1><p>区别：</p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</li>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>当我们了解了 <a href=\"https://nigelyao.github.io/2018/03/07/commonjs/\">CommonJS</a> 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<br>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。<br>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’) 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。</p>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p><a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 <a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>。<br>AMD(Asynchronous module definition) ： 异步模块定义。</p>\n<p>类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。<br>CMD(Common module definition)：通用模块定义。<br>目前这些规范的实现都能达成<strong>浏览器端模块化开发的目的</strong>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务端JS</th>\n<th style=\"text-align:center\">浏览器端JS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">相同的代码需要多次执行</td>\n<td style=\"text-align:center\">代码需要从一个服务器端分发到多个客户端执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU 和内存资源是瓶颈</td>\n<td style=\"text-align:center\">宽带是瓶颈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">加载时从磁盘中加载</td>\n<td style=\"text-align:center\">加载时需要通过网络加载</td>\n</tr>\n</tbody>\n</table>\n<p>AMD 的诞生，就是为了解决这两个问题：<br>1.实现 js 文件的异步加载，避免网页失去响应<br>2.管理模块之间的依赖性，便于代码的编写和维护</p>\n<p>AMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n<p>AMD 也采用 <a href=\"https://github.com/amdjs/amdjs-api/wiki/require\" target=\"_blank\" rel=\"noopener\">require()</a> 语句加载模块，但是不同于 CommonJS，它要求两个参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([module], callback);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;math&apos;], function (math) &#123;</span><br><span class=\"line\">  math.add(2, 3);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：<a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 和 <a href=\"https://github.com/cujojs/curl\" target=\"_blank\" rel=\"noopener\">curl.js</a>。不过多数人还是用 require.js 。<br>另外如果对 ES6 的模块感兴趣，可以考虑 <a href=\"http://github.com/hax/my.js\" target=\"_blank\" rel=\"noopener\">my.js</a> ，是按照 ES6 草案的 module/loader 规范实现的。</p>\n<p><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">AMD</a> 是 <a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 在推广过程中对模块定义的规范化产出。</p>\n<p>推荐学习 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">require.js</a>。</p>\n<h2 id=\"AMD-模块的写法\"><a href=\"#AMD-模块的写法\" class=\"headerlink\" title=\"AMD 模块的写法\"></a>AMD 模块的写法</h2><p><a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。<br>具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。<br>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// math.js</span><br><span class=\"line\">define(function ()&#123;</span><br><span class=\"line\">　var add = function (x,y)&#123;</span><br><span class=\"line\">　　return x+y;</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　add: add</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>加载方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">require([&apos;math&apos;], function (math)&#123;</span><br><span class=\"line\">　alert(math.add(1,1));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;myLib&apos;], function(myLib)&#123;</span><br><span class=\"line\">　function foo()&#123;</span><br><span class=\"line\">　　myLib.doSomething();</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　foo : foo</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>\n<h2 id=\"加载非规范的模块\"><a href=\"#加载非规范的模块\" class=\"headerlink\" title=\"加载非规范的模块\"></a>加载非规范的模块</h2><p>理论上，<a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"noopener\">require.js</a> 加载的模块，必须是按照 <a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\" target=\"_blank\" rel=\"noopener\">AMD 规范</a>、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。<br>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">　shim: &#123;</span><br><span class=\"line\">　　&apos;underscore&apos;: &#123;</span><br><span class=\"line\">　　　exports: &apos;_&apos;</span><br><span class=\"line\">　　&#125;,</span><br><span class=\"line\">　　&apos;backbone&apos;: &#123;</span><br><span class=\"line\">　　　deps: [&apos;underscore&apos;, &apos;jquery&apos;],</span><br><span class=\"line\">　　　exports: &apos;Backbone&apos;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：<br>（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；<br>（2）deps 数组，表明该模块的依赖性。<br>比如，jQuery 的插件可以这样定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shim: &#123;</span><br><span class=\"line\">　&apos;jquery.scroll&apos;: &#123;</span><br><span class=\"line\">　　deps: [&apos;jquery&apos;],</span><br><span class=\"line\">　　exports: &apos;jQuery.fn.scroll&apos;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h1><p><a href=\"https://github.com/seajs/seajs/issues/277\" target=\"_blank\" rel=\"noopener\">CMD</a> 是 <a href=\"https://github.com/seajs/seajs\" target=\"_blank\" rel=\"noopener\">sea.js</a> 在推广过程中对模块定义的规范化产出。</p>\n<h3 id=\"CMD-模块定义\"><a href=\"#CMD-模块定义\" class=\"headerlink\" title=\"CMD 模块定义\"></a>CMD 模块定义</h3><p>在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。<br>define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。<br>factory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&#123;<span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>也可以通过字符串定义模板模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'I am a template.My name is &#123;&#123;name&#125;&#125;.'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。<br>factory 是一个函数，有三个参数，function(require, exports, module)<br>1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)<br>2、exports 是一个对象，用来向外提供模块接口<br>3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  <span class=\"comment\">// 依赖就近书写，什么时候用到什么时候引入</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</span><br><span class=\"line\">  b.doSomething();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。</p>\n<h1 id=\"AMD-与-CMD-的区别\"><a href=\"#AMD-与-CMD-的区别\" class=\"headerlink\" title=\"AMD 与 CMD 的区别\"></a>AMD 与 CMD 的区别</h1><p>区别：</p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</li>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li>\n</ol>"},{"title":"中国国内 JavaScript 圈的现状如何","date":"2017-11-18T05:25:24.000Z","comments":0,"_content":"\n<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n![](http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg)\n\n-------------\n\n<!-- more -->\n\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么\n二五八万忙着造轮子步道\n小白忙着加群拜山头\n还有几个默默钻研又不为人知的\n浮躁，自我，没劲\n有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了\n国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的\n玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n-------------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。\n　　放大些来看，不只前端，其他行业的观念也是如此。\n　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。\n　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n-------------\n\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?\n为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致...\n　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了....\n　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题...有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n-----------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】\n\n水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。\n　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n--------\n\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？\n实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。\n　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。\n　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。\n\n所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？\n　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。\n　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。\n　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。\n　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”\n　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）\n　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。\n　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？\n　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。\n　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？\n　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。\n　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！\n　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></p>\n\n\n\n\n\n[原文](https://www.zhihu.com/question/24317445)","source":"_posts/china-javascript-environment.md","raw":"---\ntitle: 中国国内 JavaScript 圈的现状如何\ndate: 2017-11-18 13:25:24\ncategories: 综合\ntags: [essay, JavaScript]\ncomments: false\n---\n\n<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n![](http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg)\n\n-------------\n\n<!-- more -->\n\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么\n二五八万忙着造轮子步道\n小白忙着加群拜山头\n还有几个默默钻研又不为人知的\n浮躁，自我，没劲\n有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了\n国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的\n玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n-------------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。\n　　放大些来看，不只前端，其他行业的观念也是如此。\n　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。\n　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n-------------\n\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?\n为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致...\n　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了....\n　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题...有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n-----------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】\n\n水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。\n　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n--------\n\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？\n实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。\n　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。\n　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。\n\n所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？\n　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。\n　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。\n　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。\n　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”\n　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）\n　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。\n　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？\n　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。\n　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？\n　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。\n　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！\n　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></p>\n\n\n\n\n\n[原文](https://www.zhihu.com/question/24317445)","slug":"china-javascript-environment","published":1,"updated":"2019-08-15T07:18:52.999Z","_id":"cjzccpcyc0004z4v5al2hy56x","layout":"post","photos":[],"link":"","content":"<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n<p><img src=\"http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么<br>二五八万忙着造轮子步道<br>小白忙着加群拜山头<br>还有几个默默钻研又不为人知的<br>浮躁，自我，没劲<br>有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了<br>国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的<br>玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。<br>　　放大些来看，不只前端，其他行业的观念也是如此。<br>　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。<br>　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?<br>为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…<br>　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….<br>　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】<br><br>水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。<br>　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？<br>实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。<br>　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。<br>　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。<br><br>所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？<br>　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。<br>　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。<br>　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。<br>　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”<br>　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）<br>　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。<br>　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？<br>　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。<br>　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？<br>　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。<br>　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！<br>　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n\n\n\n\n<p><a href=\"https://www.zhihu.com/question/24317445\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n","site":{"data":{}},"excerpt":"<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n<p><img src=\"http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg\" alt=\"\"></p>\n<hr>","more":"<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么<br>二五八万忙着造轮子步道<br>小白忙着加群拜山头<br>还有几个默默钻研又不为人知的<br>浮躁，自我，没劲<br>有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了<br>国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的<br>玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。<br>　　放大些来看，不只前端，其他行业的观念也是如此。<br>　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。<br>　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?<br>为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…<br>　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….<br>　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】<br><br>水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。<br>　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？<br>实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。<br>　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。<br>　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。<br><br>所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？<br>　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。<br>　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。<br>　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。<br>　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”<br>　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）<br>　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。<br>　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？<br>　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。<br>　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？<br>　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。<br>　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！<br>　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n\n\n\n\n<p><a href=\"https://www.zhihu.com/question/24317445\" target=\"_blank\" rel=\"noopener\">原文</a></p>"},{"title":"CommonJS 详细介绍","date":"2018-03-07T05:25:24.000Z","comments":0,"_content":"\n## CommonJS 规范与实现\n正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。\n\n<!-- more -->\n\n![ConmonJS 的实现](http://i2.muimg.com/567571/abd3d52d96d4db7c.png)\n\nCommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。\n\nNode.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。\n\n模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。\n\n## CommonJS 规范的实现\nNode.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。\n\n我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以**把包理解成是实现了某个功能模块的集合**，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。\n\nCommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。\n\n为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：\n``` javascript\nvar exports = module.exports;\n```\n注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。\n\n**如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。**\n\n\n## 什么是模块\n模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。\n\n## 创建及加载模块\n### 创建模块\n在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。\n让我以一个例子来了解模块。创建一个 module.js 文件，内容是：\n``` javascript\n// module.js\nvar name;\nexports.setName = function(thyName) {\n    name = thyName;\n};\nexports.sayHello = function() {\n    console.log('Hello ' + name);\n};\n```\n\n在同一目录下创建 getmodule.js，内容是：\n\n``` javascript\n// getmodule.js\nvar myModule = require('./module');\nmyModule.setName('Yu');\nmyModule.sayHello();\n```\n\n运行 `node getmodule.js` ，结果是：\n\n> Hello Yu\n\nmodule.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 `require('./module')` 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。\n\n### 加载模块\n> 在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 `require('fs')` 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。\n\n如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？\n\n#### 1、按路径加载模块\n\n如果 require 参数以 \"/\" 开头，那么就以绝对路径的方式查找模块名称，例如 `require('/home/nigelyao/module')` 将会按照 优先级依次尝试加载 `/home/nigelyao/module.js`、`/home/nigelyao/module.json` 和 `/home/nigelyao/module.node`。\n\n如果 require 参数 \"./\" 或 \"../\" 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 `require('./hello')`来加载同一文件夹下的 hello.js。\n\n#### 2、通过查找 node_modules 目录加载模块\n\n如果 require 参数不以 \"/\" ， \"./\" 或 \"../\" 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。\n在 node_modules 目录的外面一层，外面可以直接使用 `require('express')` 来代替 `require('./node_modules/express')`。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。\n我们不仅要在 project 目录下的 app.js 中使用 `require('express')`，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 `require('express')`，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。\n\n#### 3、加载缓存\nNode.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 `require('express')` 和 `require('./node_modules/express')`加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。\n\n\n\n### 单次加载\n上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：\n``` javascript\n// loadmodule.js\nvar hello1 = require('./module');\nhello1.setName('Yu');\n\nvar hello2 = require('./module');\nhello2.setName('Yu 2');\n\nhello1.sayHello();\n```\n\n运行后发现输出结果是 Hello Yu 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。\n\n### 覆盖 exports\n有时候我们只是想把一个对象封装到模块中，例如：\n``` javascript\n// singleobjct.js\nfunction Hello() {\n    var name;\n    this.setName = function (thyName) {\n        name = thyName;\n    };\n    this.sayHello = function () {\n        console.log('Hello ' + name);\n    };\n}\n\nexports.Hello = Hello;\n```\n此时我们在其他文件中需要通过 `require('./singleobject').Hello` 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。\n``` javascript\n// hello.js\nfunction Hello() {\n  var name;\n  this.setName = function(thyName) {\n    name = thyName;\n  };\n  this.sayHello = function() {\n    console.log('Hello ' + name);\n  };\n}\nmodule.exports = Hello;\n```\n这样就可以直接获得这个对象了：\n``` javascript\n// gethello.js\nvar Hello = require('./hello');\nhello = new Hello();\nhello.setName('Yu');\nhello.sayHello();\n```\n\n\n## Tip\n### CommonJS 模块的特点如下：\n1. 所有代码都运行在模块作用域，不会污染全局作用域。\n2. 独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。\n3. 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。\n4. 模块加载的顺序，按照其在代码中出现的顺序。\n\n### CommonJS 中的 Require\n\n建议阅览：[CommonJS require 规范](http://wiki.commonjs.org/wiki/Modules/1.1.1#Require)\n\n\n\n","source":"_posts/commonjs.md","raw":"---\ntitle: CommonJS 详细介绍\ndate: 2018-03-07 13:25:24\ncategories: 前端\ntags: [JavaScript]\ncomments: false\n---\n\n## CommonJS 规范与实现\n正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。\n\n<!-- more -->\n\n![ConmonJS 的实现](http://i2.muimg.com/567571/abd3d52d96d4db7c.png)\n\nCommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。\n\nNode.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。\n\n模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。\n\n## CommonJS 规范的实现\nNode.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。\n\n我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以**把包理解成是实现了某个功能模块的集合**，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。\n\nCommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。\n\n为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：\n``` javascript\nvar exports = module.exports;\n```\n注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。\n\n**如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。**\n\n\n## 什么是模块\n模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。\n\n## 创建及加载模块\n### 创建模块\n在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。\n让我以一个例子来了解模块。创建一个 module.js 文件，内容是：\n``` javascript\n// module.js\nvar name;\nexports.setName = function(thyName) {\n    name = thyName;\n};\nexports.sayHello = function() {\n    console.log('Hello ' + name);\n};\n```\n\n在同一目录下创建 getmodule.js，内容是：\n\n``` javascript\n// getmodule.js\nvar myModule = require('./module');\nmyModule.setName('Yu');\nmyModule.sayHello();\n```\n\n运行 `node getmodule.js` ，结果是：\n\n> Hello Yu\n\nmodule.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 `require('./module')` 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。\n\n### 加载模块\n> 在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 `require('fs')` 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。\n\n如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？\n\n#### 1、按路径加载模块\n\n如果 require 参数以 \"/\" 开头，那么就以绝对路径的方式查找模块名称，例如 `require('/home/nigelyao/module')` 将会按照 优先级依次尝试加载 `/home/nigelyao/module.js`、`/home/nigelyao/module.json` 和 `/home/nigelyao/module.node`。\n\n如果 require 参数 \"./\" 或 \"../\" 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 `require('./hello')`来加载同一文件夹下的 hello.js。\n\n#### 2、通过查找 node_modules 目录加载模块\n\n如果 require 参数不以 \"/\" ， \"./\" 或 \"../\" 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。\n在 node_modules 目录的外面一层，外面可以直接使用 `require('express')` 来代替 `require('./node_modules/express')`。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。\n我们不仅要在 project 目录下的 app.js 中使用 `require('express')`，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 `require('express')`，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。\n\n#### 3、加载缓存\nNode.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 `require('express')` 和 `require('./node_modules/express')`加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。\n\n\n\n### 单次加载\n上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：\n``` javascript\n// loadmodule.js\nvar hello1 = require('./module');\nhello1.setName('Yu');\n\nvar hello2 = require('./module');\nhello2.setName('Yu 2');\n\nhello1.sayHello();\n```\n\n运行后发现输出结果是 Hello Yu 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。\n\n### 覆盖 exports\n有时候我们只是想把一个对象封装到模块中，例如：\n``` javascript\n// singleobjct.js\nfunction Hello() {\n    var name;\n    this.setName = function (thyName) {\n        name = thyName;\n    };\n    this.sayHello = function () {\n        console.log('Hello ' + name);\n    };\n}\n\nexports.Hello = Hello;\n```\n此时我们在其他文件中需要通过 `require('./singleobject').Hello` 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。\n``` javascript\n// hello.js\nfunction Hello() {\n  var name;\n  this.setName = function(thyName) {\n    name = thyName;\n  };\n  this.sayHello = function() {\n    console.log('Hello ' + name);\n  };\n}\nmodule.exports = Hello;\n```\n这样就可以直接获得这个对象了：\n``` javascript\n// gethello.js\nvar Hello = require('./hello');\nhello = new Hello();\nhello.setName('Yu');\nhello.sayHello();\n```\n\n\n## Tip\n### CommonJS 模块的特点如下：\n1. 所有代码都运行在模块作用域，不会污染全局作用域。\n2. 独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。\n3. 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。\n4. 模块加载的顺序，按照其在代码中出现的顺序。\n\n### CommonJS 中的 Require\n\n建议阅览：[CommonJS require 规范](http://wiki.commonjs.org/wiki/Modules/1.1.1#Require)\n\n\n\n","slug":"commonjs","published":1,"updated":"2019-08-15T07:19:19.335Z","_id":"cjzccpcyj0007z4v5rjwqp2v3","layout":"post","photos":[],"link":"","content":"<h2 id=\"CommonJS-规范与实现\"><a href=\"#CommonJS-规范与实现\" class=\"headerlink\" title=\"CommonJS 规范与实现\"></a>CommonJS 规范与实现</h2><p>正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://i2.muimg.com/567571/abd3d52d96d4db7c.png\" alt=\"ConmonJS 的实现\"></p>\n<p>CommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。</p>\n<p>Node.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。</p>\n<p>模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。</p>\n<h2 id=\"CommonJS-规范的实现\"><a href=\"#CommonJS-规范的实现\" class=\"headerlink\" title=\"CommonJS 规范的实现\"></a>CommonJS 规范的实现</h2><p>Node.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。</p>\n<p>我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以<strong>把包理解成是实现了某个功能模块的集合</strong>，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。</p>\n<p>CommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。</p>\n<p>为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> exports = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure></p>\n<p>注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。</p>\n<p><strong>如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。</strong></p>\n<h2 id=\"什么是模块\"><a href=\"#什么是模块\" class=\"headerlink\" title=\"什么是模块\"></a>什么是模块</h2><p>模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。</p>\n<h2 id=\"创建及加载模块\"><a href=\"#创建及加载模块\" class=\"headerlink\" title=\"创建及加载模块\"></a>创建及加载模块</h2><h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。<br>让我以一个例子来了解模块。创建一个 module.js 文件，内容是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\">exports.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在同一目录下创建 getmodule.js，内容是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getmodule.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">myModule.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\">myModule.sayHello();</span><br></pre></td></tr></table></figure>\n<p>运行 <code>node getmodule.js</code> ，结果是：</p>\n<blockquote>\n<p>Hello Yu</p>\n</blockquote>\n<p>module.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 <code>require(&#39;./module&#39;)</code> 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。</p>\n<h3 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h3><blockquote>\n<p>在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 <code>require(&#39;fs&#39;)</code> 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。</p>\n</blockquote>\n<p>如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？</p>\n<h4 id=\"1、按路径加载模块\"><a href=\"#1、按路径加载模块\" class=\"headerlink\" title=\"1、按路径加载模块\"></a>1、按路径加载模块</h4><p>如果 require 参数以 “/“ 开头，那么就以绝对路径的方式查找模块名称，例如 <code>require(&#39;/home/nigelyao/module&#39;)</code> 将会按照 优先级依次尝试加载 <code>/home/nigelyao/module.js</code>、<code>/home/nigelyao/module.json</code> 和 <code>/home/nigelyao/module.node</code>。</p>\n<p>如果 require 参数 “./“ 或 “../“ 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 <code>require(&#39;./hello&#39;)</code>来加载同一文件夹下的 hello.js。</p>\n<h4 id=\"2、通过查找-node-modules-目录加载模块\"><a href=\"#2、通过查找-node-modules-目录加载模块\" class=\"headerlink\" title=\"2、通过查找 node_modules 目录加载模块\"></a>2、通过查找 node_modules 目录加载模块</h4><p>如果 require 参数不以 “/“ ， “./“ 或 “../“ 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。<br>在 node_modules 目录的外面一层，外面可以直接使用 <code>require(&#39;express&#39;)</code> 来代替 <code>require(&#39;./node_modules/express&#39;)</code>。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。<br>我们不仅要在 project 目录下的 app.js 中使用 <code>require(&#39;express&#39;)</code>，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 <code>require(&#39;express&#39;)</code>，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。</p>\n<h4 id=\"3、加载缓存\"><a href=\"#3、加载缓存\" class=\"headerlink\" title=\"3、加载缓存\"></a>3、加载缓存</h4><p>Node.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 <code>require(&#39;express&#39;)</code> 和 <code>require(&#39;./node_modules/express&#39;)</code>加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。</p>\n<h3 id=\"单次加载\"><a href=\"#单次加载\" class=\"headerlink\" title=\"单次加载\"></a>单次加载</h3><p>上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loadmodule.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">hello1.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">hello2.setName(<span class=\"string\">'Yu 2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hello1.sayHello();</span><br></pre></td></tr></table></figure></p>\n<p>运行后发现输出结果是 Hello Yu 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。</p>\n<h3 id=\"覆盖-exports\"><a href=\"#覆盖-exports\" class=\"headerlink\" title=\"覆盖 exports\"></a>覆盖 exports</h3><p>有时候我们只是想把一个对象封装到模块中，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// singleobjct.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">        name = thyName;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.Hello = Hello;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在其他文件中需要通过 <code>require(&#39;./singleobject&#39;).Hello</code> 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以直接获得这个对象了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gethello.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>);</span><br><span class=\"line\">hello = <span class=\"keyword\">new</span> Hello();</span><br><span class=\"line\">hello.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\">hello.sayHello();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><h3 id=\"CommonJS-模块的特点如下：\"><a href=\"#CommonJS-模块的特点如下：\" class=\"headerlink\" title=\"CommonJS 模块的特点如下：\"></a>CommonJS 模块的特点如下：</h3><ol>\n<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>\n<li>独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。</li>\n<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>\n<li>模块加载的顺序，按照其在代码中出现的顺序。</li>\n</ol>\n<h3 id=\"CommonJS-中的-Require\"><a href=\"#CommonJS-中的-Require\" class=\"headerlink\" title=\"CommonJS 中的 Require\"></a>CommonJS 中的 Require</h3><p>建议阅览：<a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1#Require\" target=\"_blank\" rel=\"noopener\">CommonJS require 规范</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CommonJS-规范与实现\"><a href=\"#CommonJS-规范与实现\" class=\"headerlink\" title=\"CommonJS 规范与实现\"></a>CommonJS 规范与实现</h2><p>正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。</p>","more":"<p><img src=\"http://i2.muimg.com/567571/abd3d52d96d4db7c.png\" alt=\"ConmonJS 的实现\"></p>\n<p>CommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。</p>\n<p>Node.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。</p>\n<p>模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。</p>\n<h2 id=\"CommonJS-规范的实现\"><a href=\"#CommonJS-规范的实现\" class=\"headerlink\" title=\"CommonJS 规范的实现\"></a>CommonJS 规范的实现</h2><p>Node.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。</p>\n<p>我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以<strong>把包理解成是实现了某个功能模块的集合</strong>，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。</p>\n<p>CommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。</p>\n<p>为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> exports = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure></p>\n<p>注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。</p>\n<p><strong>如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。</strong></p>\n<h2 id=\"什么是模块\"><a href=\"#什么是模块\" class=\"headerlink\" title=\"什么是模块\"></a>什么是模块</h2><p>模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。</p>\n<h2 id=\"创建及加载模块\"><a href=\"#创建及加载模块\" class=\"headerlink\" title=\"创建及加载模块\"></a>创建及加载模块</h2><h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。<br>让我以一个例子来了解模块。创建一个 module.js 文件，内容是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\">exports.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在同一目录下创建 getmodule.js，内容是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getmodule.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">myModule.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\">myModule.sayHello();</span><br></pre></td></tr></table></figure>\n<p>运行 <code>node getmodule.js</code> ，结果是：</p>\n<blockquote>\n<p>Hello Yu</p>\n</blockquote>\n<p>module.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 <code>require(&#39;./module&#39;)</code> 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。</p>\n<h3 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h3><blockquote>\n<p>在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 <code>require(&#39;fs&#39;)</code> 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。</p>\n</blockquote>\n<p>如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？</p>\n<h4 id=\"1、按路径加载模块\"><a href=\"#1、按路径加载模块\" class=\"headerlink\" title=\"1、按路径加载模块\"></a>1、按路径加载模块</h4><p>如果 require 参数以 “/“ 开头，那么就以绝对路径的方式查找模块名称，例如 <code>require(&#39;/home/nigelyao/module&#39;)</code> 将会按照 优先级依次尝试加载 <code>/home/nigelyao/module.js</code>、<code>/home/nigelyao/module.json</code> 和 <code>/home/nigelyao/module.node</code>。</p>\n<p>如果 require 参数 “./“ 或 “../“ 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 <code>require(&#39;./hello&#39;)</code>来加载同一文件夹下的 hello.js。</p>\n<h4 id=\"2、通过查找-node-modules-目录加载模块\"><a href=\"#2、通过查找-node-modules-目录加载模块\" class=\"headerlink\" title=\"2、通过查找 node_modules 目录加载模块\"></a>2、通过查找 node_modules 目录加载模块</h4><p>如果 require 参数不以 “/“ ， “./“ 或 “../“ 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。<br>在 node_modules 目录的外面一层，外面可以直接使用 <code>require(&#39;express&#39;)</code> 来代替 <code>require(&#39;./node_modules/express&#39;)</code>。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。<br>我们不仅要在 project 目录下的 app.js 中使用 <code>require(&#39;express&#39;)</code>，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 <code>require(&#39;express&#39;)</code>，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。</p>\n<h4 id=\"3、加载缓存\"><a href=\"#3、加载缓存\" class=\"headerlink\" title=\"3、加载缓存\"></a>3、加载缓存</h4><p>Node.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 <code>require(&#39;express&#39;)</code> 和 <code>require(&#39;./node_modules/express&#39;)</code>加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。</p>\n<h3 id=\"单次加载\"><a href=\"#单次加载\" class=\"headerlink\" title=\"单次加载\"></a>单次加载</h3><p>上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loadmodule.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">hello1.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>);</span><br><span class=\"line\">hello2.setName(<span class=\"string\">'Yu 2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hello1.sayHello();</span><br></pre></td></tr></table></figure></p>\n<p>运行后发现输出结果是 Hello Yu 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。</p>\n<h3 id=\"覆盖-exports\"><a href=\"#覆盖-exports\" class=\"headerlink\" title=\"覆盖 exports\"></a>覆盖 exports</h3><p>有时候我们只是想把一个对象封装到模块中，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// singleobjct.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">        name = thyName;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.Hello = Hello;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在其他文件中需要通过 <code>require(&#39;./singleobject&#39;).Hello</code> 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以直接获得这个对象了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gethello.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>);</span><br><span class=\"line\">hello = <span class=\"keyword\">new</span> Hello();</span><br><span class=\"line\">hello.setName(<span class=\"string\">'Yu'</span>);</span><br><span class=\"line\">hello.sayHello();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><h3 id=\"CommonJS-模块的特点如下：\"><a href=\"#CommonJS-模块的特点如下：\" class=\"headerlink\" title=\"CommonJS 模块的特点如下：\"></a>CommonJS 模块的特点如下：</h3><ol>\n<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>\n<li>独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。</li>\n<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>\n<li>模块加载的顺序，按照其在代码中出现的顺序。</li>\n</ol>\n<h3 id=\"CommonJS-中的-Require\"><a href=\"#CommonJS-中的-Require\" class=\"headerlink\" title=\"CommonJS 中的 Require\"></a>CommonJS 中的 Require</h3><p>建议阅览：<a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1#Require\" target=\"_blank\" rel=\"noopener\">CommonJS require 规范</a></p>"},{"title":"CSS 各种Hack手段","date":"2018-06-24T19:25:24.000Z","comments":0,"summary_img":"/images/css-hack-1.png","_content":"<!-- <img src=\"/images/css-hack-1.png\" alt=\"css-hack\"> -->\n\n<!-- more -->\n\n随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。\n\n# css hack 分类\ncss hack 分类大致有 3 种表现形式：**IE条件注释法**、**CSS属性前缀法**以及**选择器前缀法**。\n\nIE 条件注释法（即 HTML 条件注释 Hack）：\n针对所有IE(注：IE10+ 已经不再支持条件注释)： \n`<!--[if IE]>IE浏览器显示的内容 <![endif]-->`；\n\n针对 IE6 及以下版本： \n`<!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->`。\n这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。\n\n属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 `_` 和星号 `*`，IE7 能识别星号 `*`，但不能识别下划线 `_`，IE6~IE10 都认识 `\\9`，但 firefox 前述三个都不能认识。\n\n选择器前缀法（即选择器 Hack）：例如 IE6 能识别 `*html .class{}`，IE7 能识别 `*+html .class{}` 或者 `*:first-child+html .class{}`。\n\ncss hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。\n\n# 条件注释法\n**语法：**\n``` html\n<!-- [if <keywords>? IE <version> ?]>\nHTML 代码块\n<![endif]-->\n```\n**取值：**\n`<keywords>`\nif 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本\n**是否**：指定是否 IE 或 IE 某个版本。关键字：空\n**大于**：选择大鱼指定版本的 IE 版本。关键字：gt\n**大于或等于**：选择大于或等于指定版本的 IE 版本。关键字：gte\n**小于**：选择小于指定版本的IE版本。关键字：lt\n**小于或等于**：选择小于或等于指定版本的IE版本。关键字：lte\n**非指定版本**：选择除指定版本外的所有IE版本。关键字：!\n\n**说明：**\n用于选择 IE 浏览器及IE的不同版本\n\n**示例：**\n\n```\n只在IE下生效\n<!--[if IE]>\n这段文字只在IE浏览器显示\n<![endif]-->\n\n只在IE6下生效\n<!--[if IE 6]>\n这段文字只在IE6浏览器显示\n<![endif]-->\n\n只在IE6以上版本生效\n<!--[if gte IE 6]>\n这段文字只在IE6以上(包括)版本IE浏览器显示\n<![endif]-->\n\n只在IE8上不生效\n<!--[if ! IE 8]>\n这段文字在非IE8浏览器显示\n<![endif]-->\n\n非IE浏览器生效\n<!--[if !IE]>\n这段文字只在非IE浏览器显示\n<![endif]-->\n```\n\n\n需要说明的是，IE10和11已经不支持这种条件注释法了。<a href=\"/yu/css-hack.html\" target=\"_blank\">运行上面示例</a>\n\n# CSS 属性前缀法\n**语法：**\nselector {<hack>?property:value<hack>?;}\n\n**取值：**\n`_`：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。\n`*`：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。\n`\\9`：选择 IE6+。\n`\\0`：选择 IE8+ 和 Opera。\n`[;property:value;];`：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。\n`[;color:#f00;];` 与 `[color:#f00;color:#f00;];` 与 `[margin:0;padding:0;color:#f00;];` 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。\n\n**说明：**\n**选择不同的浏览器及版本**尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。\n一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：\n``` css\n.test{\n  color:#090\\9; /* For IE8+ */\n  *color:#f00;  /* For IE7 and earlier */\n  _color:#ff0;  /* For IE6 and earlier */\n}\n```\n\n<p id=\"div-border-left-yellow\">上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。</p>\n\n\n# 选择器前缀法\n**语法：**\n`<hack>selector{sRules}`\n\n**说明：**\n``` css\n* html .test{color:#090;}       /* For IE6 and earlier */\n* + html .test{color:#ff0;}     /* For IE7 */\n.test:lang(zh-cn){color:#f00;}  /* For IE8+ and not IE */\n.test:nth-child(1){color:#0ff;} /* For IE9+ and not IE */\n```\n<p id=\"div-border-left-yellow\">上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。</p>\n","source":"_posts/css-hack.md","raw":"---\ntitle: CSS 各种Hack手段\ndate: 2018-06-25 03:25:24\ncategories: 前端\ntags: [CSS]\ncomments: false\nsummary_img: /images/css-hack-1.png\n---\n<!-- <img src=\"/images/css-hack-1.png\" alt=\"css-hack\"> -->\n\n<!-- more -->\n\n随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。\n\n# css hack 分类\ncss hack 分类大致有 3 种表现形式：**IE条件注释法**、**CSS属性前缀法**以及**选择器前缀法**。\n\nIE 条件注释法（即 HTML 条件注释 Hack）：\n针对所有IE(注：IE10+ 已经不再支持条件注释)： \n`<!--[if IE]>IE浏览器显示的内容 <![endif]-->`；\n\n针对 IE6 及以下版本： \n`<!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->`。\n这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。\n\n属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 `_` 和星号 `*`，IE7 能识别星号 `*`，但不能识别下划线 `_`，IE6~IE10 都认识 `\\9`，但 firefox 前述三个都不能认识。\n\n选择器前缀法（即选择器 Hack）：例如 IE6 能识别 `*html .class{}`，IE7 能识别 `*+html .class{}` 或者 `*:first-child+html .class{}`。\n\ncss hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。\n\n# 条件注释法\n**语法：**\n``` html\n<!-- [if <keywords>? IE <version> ?]>\nHTML 代码块\n<![endif]-->\n```\n**取值：**\n`<keywords>`\nif 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本\n**是否**：指定是否 IE 或 IE 某个版本。关键字：空\n**大于**：选择大鱼指定版本的 IE 版本。关键字：gt\n**大于或等于**：选择大于或等于指定版本的 IE 版本。关键字：gte\n**小于**：选择小于指定版本的IE版本。关键字：lt\n**小于或等于**：选择小于或等于指定版本的IE版本。关键字：lte\n**非指定版本**：选择除指定版本外的所有IE版本。关键字：!\n\n**说明：**\n用于选择 IE 浏览器及IE的不同版本\n\n**示例：**\n\n```\n只在IE下生效\n<!--[if IE]>\n这段文字只在IE浏览器显示\n<![endif]-->\n\n只在IE6下生效\n<!--[if IE 6]>\n这段文字只在IE6浏览器显示\n<![endif]-->\n\n只在IE6以上版本生效\n<!--[if gte IE 6]>\n这段文字只在IE6以上(包括)版本IE浏览器显示\n<![endif]-->\n\n只在IE8上不生效\n<!--[if ! IE 8]>\n这段文字在非IE8浏览器显示\n<![endif]-->\n\n非IE浏览器生效\n<!--[if !IE]>\n这段文字只在非IE浏览器显示\n<![endif]-->\n```\n\n\n需要说明的是，IE10和11已经不支持这种条件注释法了。<a href=\"/yu/css-hack.html\" target=\"_blank\">运行上面示例</a>\n\n# CSS 属性前缀法\n**语法：**\nselector {<hack>?property:value<hack>?;}\n\n**取值：**\n`_`：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。\n`*`：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。\n`\\9`：选择 IE6+。\n`\\0`：选择 IE8+ 和 Opera。\n`[;property:value;];`：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。\n`[;color:#f00;];` 与 `[color:#f00;color:#f00;];` 与 `[margin:0;padding:0;color:#f00;];` 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。\n\n**说明：**\n**选择不同的浏览器及版本**尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。\n一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：\n``` css\n.test{\n  color:#090\\9; /* For IE8+ */\n  *color:#f00;  /* For IE7 and earlier */\n  _color:#ff0;  /* For IE6 and earlier */\n}\n```\n\n<p id=\"div-border-left-yellow\">上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。</p>\n\n\n# 选择器前缀法\n**语法：**\n`<hack>selector{sRules}`\n\n**说明：**\n``` css\n* html .test{color:#090;}       /* For IE6 and earlier */\n* + html .test{color:#ff0;}     /* For IE7 */\n.test:lang(zh-cn){color:#f00;}  /* For IE8+ and not IE */\n.test:nth-child(1){color:#0ff;} /* For IE9+ and not IE */\n```\n<p id=\"div-border-left-yellow\">上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。</p>\n","slug":"css-hack","published":1,"updated":"2019-08-15T07:19:18.598Z","_id":"cjzccpcyl0008z4v5dcxge5a4","layout":"post","photos":[],"link":"","content":"<!-- <img src=\"/images/css-hack-1.png\" alt=\"css-hack\"> -->\n<a id=\"more\"></a>\n<p>随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。</p>\n<h1 id=\"css-hack-分类\"><a href=\"#css-hack-分类\" class=\"headerlink\" title=\"css hack 分类\"></a>css hack 分类</h1><p>css hack 分类大致有 3 种表现形式：<strong>IE条件注释法</strong>、<strong>CSS属性前缀法</strong>以及<strong>选择器前缀法</strong>。</p>\n<p>IE 条件注释法（即 HTML 条件注释 Hack）：<br>针对所有IE(注：IE10+ 已经不再支持条件注释)：<br><code>&lt;!--[if IE]&gt;IE浏览器显示的内容 &lt;![endif]--&gt;</code>；</p>\n<p>针对 IE6 及以下版本：<br><code>&lt;!--[if lt IE 6]&gt;只在IE6-显示的内容 &lt;![endif]--&gt;</code>。<br>这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。</p>\n<p>属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 <code>_</code> 和星号 <code>*</code>，IE7 能识别星号 <code>*</code>，但不能识别下划线 <code>_</code>，IE6~IE10 都认识 <code>\\9</code>，但 firefox 前述三个都不能认识。</p>\n<p>选择器前缀法（即选择器 Hack）：例如 IE6 能识别 <code>*html .class{}</code>，IE7 能识别 <code>*+html .class{}</code> 或者 <code>*:first-child+html .class{}</code>。</p>\n<p>css hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。</p>\n<h1 id=\"条件注释法\"><a href=\"#条件注释法\" class=\"headerlink\" title=\"条件注释法\"></a>条件注释法</h1><p><strong>语法：</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- [if &lt;keywords&gt;? IE &lt;version&gt; ?]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">HTML 代码块</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>取值：</strong><br><code>&lt;keywords&gt;</code><br>if 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本<br><strong>是否</strong>：指定是否 IE 或 IE 某个版本。关键字：空<br><strong>大于</strong>：选择大鱼指定版本的 IE 版本。关键字：gt<br><strong>大于或等于</strong>：选择大于或等于指定版本的 IE 版本。关键字：gte<br><strong>小于</strong>：选择小于指定版本的IE版本。关键字：lt<br><strong>小于或等于</strong>：选择小于或等于指定版本的IE版本。关键字：lte<br><strong>非指定版本</strong>：选择除指定版本外的所有IE版本。关键字：!</p>\n<p><strong>说明：</strong><br>用于选择 IE 浏览器及IE的不同版本</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只在IE下生效</span><br><span class=\"line\">&lt;!--[if IE]&gt;</span><br><span class=\"line\">这段文字只在IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE6下生效</span><br><span class=\"line\">&lt;!--[if IE 6]&gt;</span><br><span class=\"line\">这段文字只在IE6浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE6以上版本生效</span><br><span class=\"line\">&lt;!--[if gte IE 6]&gt;</span><br><span class=\"line\">这段文字只在IE6以上(包括)版本IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE8上不生效</span><br><span class=\"line\">&lt;!--[if ! IE 8]&gt;</span><br><span class=\"line\">这段文字在非IE8浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">非IE浏览器生效</span><br><span class=\"line\">&lt;!--[if !IE]&gt;</span><br><span class=\"line\">这段文字只在非IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<p>需要说明的是，IE10和11已经不支持这种条件注释法了。<a href=\"/yu/css-hack.html\" target=\"_blank\">运行上面示例</a></p>\n<h1 id=\"CSS-属性前缀法\"><a href=\"#CSS-属性前缀法\" class=\"headerlink\" title=\"CSS 属性前缀法\"></a>CSS 属性前缀法</h1><p><strong>语法：</strong><br>selector {<hack>?property:value<hack>?;}</hack></hack></p>\n<p><strong>取值：</strong><br><code>_</code>：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。<br><code>*</code>：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。<br><code>\\9</code>：选择 IE6+。<br><code>\\0</code>：选择 IE8+ 和 Opera。<br><code>[;property:value;];</code>：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。<br><code>[;color:#f00;];</code> 与 <code>[color:#f00;color:#f00;];</code> 与 <code>[margin:0;padding:0;color:#f00;];</code> 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。</p>\n<p><strong>说明：</strong><br><strong>选择不同的浏览器及版本</strong>尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。<br>一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>\\<span class=\"number\">9</span>; <span class=\"comment\">/* For IE8+ */</span></span><br><span class=\"line\">  *color:#f00;  /* For IE7 and earlier */</span><br><span class=\"line\">  _<span class=\"selector-tag\">color</span>:<span class=\"selector-id\">#ff0</span>;  <span class=\"comment\">/* For IE6 and earlier */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-yellow\">上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。</p>\n\n\n<h1 id=\"选择器前缀法\"><a href=\"#选择器前缀法\" class=\"headerlink\" title=\"选择器前缀法\"></a>选择器前缀法</h1><p><strong>语法：</strong><br><code>&lt;hack&gt;selector{sRules}</code></p>\n<p><strong>说明：</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#090</span>;&#125;       <span class=\"comment\">/* For IE6 and earlier */</span></span><br><span class=\"line\">* + <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#ff0</span>;&#125;     <span class=\"comment\">/* For IE7 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:lang(zh-cn)</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;&#125;  <span class=\"comment\">/* For IE8+ and not IE */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#0ff</span>;&#125; <span class=\"comment\">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-yellow\">上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。</p>\n","site":{"data":{}},"excerpt":"<!-- <img src=\"/images/css-hack-1.png\" alt=\"css-hack\"> -->","more":"<p>随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。</p>\n<h1 id=\"css-hack-分类\"><a href=\"#css-hack-分类\" class=\"headerlink\" title=\"css hack 分类\"></a>css hack 分类</h1><p>css hack 分类大致有 3 种表现形式：<strong>IE条件注释法</strong>、<strong>CSS属性前缀法</strong>以及<strong>选择器前缀法</strong>。</p>\n<p>IE 条件注释法（即 HTML 条件注释 Hack）：<br>针对所有IE(注：IE10+ 已经不再支持条件注释)：<br><code>&lt;!--[if IE]&gt;IE浏览器显示的内容 &lt;![endif]--&gt;</code>；</p>\n<p>针对 IE6 及以下版本：<br><code>&lt;!--[if lt IE 6]&gt;只在IE6-显示的内容 &lt;![endif]--&gt;</code>。<br>这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。</p>\n<p>属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 <code>_</code> 和星号 <code>*</code>，IE7 能识别星号 <code>*</code>，但不能识别下划线 <code>_</code>，IE6~IE10 都认识 <code>\\9</code>，但 firefox 前述三个都不能认识。</p>\n<p>选择器前缀法（即选择器 Hack）：例如 IE6 能识别 <code>*html .class{}</code>，IE7 能识别 <code>*+html .class{}</code> 或者 <code>*:first-child+html .class{}</code>。</p>\n<p>css hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。</p>\n<h1 id=\"条件注释法\"><a href=\"#条件注释法\" class=\"headerlink\" title=\"条件注释法\"></a>条件注释法</h1><p><strong>语法：</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- [if &lt;keywords&gt;? IE &lt;version&gt; ?]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">HTML 代码块</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>取值：</strong><br><code>&lt;keywords&gt;</code><br>if 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本<br><strong>是否</strong>：指定是否 IE 或 IE 某个版本。关键字：空<br><strong>大于</strong>：选择大鱼指定版本的 IE 版本。关键字：gt<br><strong>大于或等于</strong>：选择大于或等于指定版本的 IE 版本。关键字：gte<br><strong>小于</strong>：选择小于指定版本的IE版本。关键字：lt<br><strong>小于或等于</strong>：选择小于或等于指定版本的IE版本。关键字：lte<br><strong>非指定版本</strong>：选择除指定版本外的所有IE版本。关键字：!</p>\n<p><strong>说明：</strong><br>用于选择 IE 浏览器及IE的不同版本</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只在IE下生效</span><br><span class=\"line\">&lt;!--[if IE]&gt;</span><br><span class=\"line\">这段文字只在IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE6下生效</span><br><span class=\"line\">&lt;!--[if IE 6]&gt;</span><br><span class=\"line\">这段文字只在IE6浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE6以上版本生效</span><br><span class=\"line\">&lt;!--[if gte IE 6]&gt;</span><br><span class=\"line\">这段文字只在IE6以上(包括)版本IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">只在IE8上不生效</span><br><span class=\"line\">&lt;!--[if ! IE 8]&gt;</span><br><span class=\"line\">这段文字在非IE8浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">非IE浏览器生效</span><br><span class=\"line\">&lt;!--[if !IE]&gt;</span><br><span class=\"line\">这段文字只在非IE浏览器显示</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<p>需要说明的是，IE10和11已经不支持这种条件注释法了。<a href=\"/yu/css-hack.html\" target=\"_blank\">运行上面示例</a></p>\n<h1 id=\"CSS-属性前缀法\"><a href=\"#CSS-属性前缀法\" class=\"headerlink\" title=\"CSS 属性前缀法\"></a>CSS 属性前缀法</h1><p><strong>语法：</strong><br>selector {<hack>?property:value<hack>?;}</hack></hack></p>\n<p><strong>取值：</strong><br><code>_</code>：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。<br><code>*</code>：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。<br><code>\\9</code>：选择 IE6+。<br><code>\\0</code>：选择 IE8+ 和 Opera。<br><code>[;property:value;];</code>：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。<br><code>[;color:#f00;];</code> 与 <code>[color:#f00;color:#f00;];</code> 与 <code>[margin:0;padding:0;color:#f00;];</code> 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。</p>\n<p><strong>说明：</strong><br><strong>选择不同的浏览器及版本</strong>尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。<br>一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#090</span>\\<span class=\"number\">9</span>; <span class=\"comment\">/* For IE8+ */</span></span><br><span class=\"line\">  *color:#f00;  /* For IE7 and earlier */</span><br><span class=\"line\">  _<span class=\"selector-tag\">color</span>:<span class=\"selector-id\">#ff0</span>;  <span class=\"comment\">/* For IE6 and earlier */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-yellow\">上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。</p>\n\n\n<h1 id=\"选择器前缀法\"><a href=\"#选择器前缀法\" class=\"headerlink\" title=\"选择器前缀法\"></a>选择器前缀法</h1><p><strong>语法：</strong><br><code>&lt;hack&gt;selector{sRules}</code></p>\n<p><strong>说明：</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#090</span>;&#125;       <span class=\"comment\">/* For IE6 and earlier */</span></span><br><span class=\"line\">* + <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.test</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#ff0</span>;&#125;     <span class=\"comment\">/* For IE7 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:lang(zh-cn)</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;&#125;  <span class=\"comment\">/* For IE8+ and not IE */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#0ff</span>;&#125; <span class=\"comment\">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-yellow\">上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。</p>"},{"title":"如果深圳的夜晚没有风","date":"2017-09-25T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。\n</p>\n\n<br/>\n\n<!-- more -->\n\n其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 [http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong) 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 [NexT](https://github.com/iissnan/hexo-theme-next) 主题的广告是不是很硬。\n\n在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——[我的建站日志](https://nigelyao.github.io/weblog/)有记录网站的建设过程。\n\n究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。\n\n后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 [Hexo](https://hexo.io/) 和 [Next](http://theme-next.iissnan.com/) 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。\n\n\n\n","source":"_posts/essay-20160925.md","raw":"---\ntitle: 如果深圳的夜晚没有风\ndate: 2017-09-25 23:25:24\ncategories: 随笔\ntags: [essay]\ncomments: false\n---\n<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。\n</p>\n\n<br/>\n\n<!-- more -->\n\n其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 [http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong) 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 [NexT](https://github.com/iissnan/hexo-theme-next) 主题的广告是不是很硬。\n\n在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——[我的建站日志](https://nigelyao.github.io/weblog/)有记录网站的建设过程。\n\n究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。\n\n后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 [Hexo](https://hexo.io/) 和 [Next](http://theme-next.iissnan.com/) 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。\n\n\n\n","slug":"essay-20160925","published":1,"updated":"2019-08-15T07:18:52.281Z","_id":"cjzccpcym0009z4v5ll1jq3qf","layout":"post","photos":[],"link":"","content":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>\n\n<p><br></p>\n<a id=\"more\"></a>\n<p>其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 <a href=\"http://blog.csdn.net/csdn_yudong\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/csdn_yudong</a> 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a> 主题的广告是不是很硬。</p>\n<p>在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——<a href=\"https://nigelyao.github.io/weblog/\">我的建站日志</a>有记录网站的建设过程。</p>\n<p>究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。</p>\n<p>后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 和 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next</a> 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。</p>\n","site":{"data":{}},"excerpt":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>\n\n<p><br></p>","more":"<p>其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 <a href=\"http://blog.csdn.net/csdn_yudong\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/csdn_yudong</a> 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a> 主题的广告是不是很硬。</p>\n<p>在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——<a href=\"https://nigelyao.github.io/weblog/\">我的建站日志</a>有记录网站的建设过程。</p>\n<p>究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。</p>\n<p>后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 和 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next</a> 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。</p>"},{"title":"Git学习总结","date":"2017-10-07T05:25:24.000Z","comments":0,"_content":"## git 简介\n\ngit 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。\n在 git 中，工作目录下面的所有文件都不外乎这两种状态：**已跟踪**或**未跟踪**。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n<!-- more -->\n\n## 实用指令详解\n### merge\n通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。\n`git merge --no-ff -m 'merge  with no-ff' dev`\n因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。\n\n合并分支时，加上 `--no-ff` 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。\n\n### fetch\n一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。\n`git fetch <远程主机名>`\n上面命令将某个远程主机的更新，全部取回本地。\n默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。\n`git fetch <远程主机名> <分支名>`\n比如，取回 origin 主机的 master 分支\n`git fetch origin master`\n所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。\n\n`git fetch -p` ：取回远程更新，删除不存在的分支。\n\n\n### pull\ngit pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：\n`git pull <远程主机名> <远程分支名>:<本地分支名>`\n比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。\n`git pull origin next:master`\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n`git pull origin master`\n上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。\n``` bash\ngit fetch origin\ngit merge origin/master\n```\n在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。\ngit 也允许手动建立追踪关系。\n`git branch --set-upstream master origin/next`\n上面的命令指定 master 分支追踪 origin/next 分支。\n如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。\n`git pull origin`\n上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。\n如果当前分支只有一个追踪分支，连远程主机名都可以忽略。\n`git pull`\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n如果合并需要采用 rebase 模式，可以使用 -rebase 选项。\n`git pull --rebase <远程主机名> <远程分支名>:<本地分支名>`\n\n### push\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。\n`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。\n`git push origin master`\n上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。\n**如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。**\n`git push origin :master`\n等同于\n`git push origin --delete master`\n上面命令表示删除 origin 主机的 master 分支。\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n`git push origin`\n上面命令表示，将当前分支推送到 origin 主机的对应分支。\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n`git push`\n如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。\n`git push -u origin master`\n上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。\n不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。\ngit 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。\n`git config --global push.default matching`\n或者\n`git config --global push.default simple`\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。\n`git push --all origin`\n上面命令表示，将所有本地分支都推送到 origin 主机。\n如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。\n`git push --force origin`\n上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。\n最后，git push 不会推送标签(tag)，除非使用 -tags 选项。\n`git push origin --tags`\n\n### log\n`git log` 命令可以查看历史记录，`git log` 命令显示从最近到最远的提交日志；\n如果嫌输出信息太多，看得眼花缭乱的，可以试试 `git log --pretty=oneline` 。我们可以看到当前版本以及之前的版本日志以及版本号。\n用 `git log --graph` 命令可以看到分支合并图。\n或者两个参数一起用：\n`git log --graph --pretty=oneline`\n`git log --graph --pretty=oneline --abbrev-commit`\n首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 `HEAD^` ，上上一个版本就是 `HEAD^^` ， 当然往上100个版本写100个 `^` 比较容易数不过来，所以写成 `HEAD~100` 。\n现在，我们要把当前版本回退到上一个版本，就可以使用 `git reset` 命令：\n`git reset --hard HEAD^`\n当你回退到了某个版本后，`git log` 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？\nGit 提供了一个命令 `git reflog` 用来记录你的每一次命令\n\n### tag\n查看标签（用来标记标志性的稳定版本信息）\n发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\n相比于 commit 的版本号(40位16进制)，标签号则要好使的多。\n所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。\n\n`git tag [tag name]`\n如果没有标签名，则为查看所有标签，带标签名则为新建标签\n\n`git tag <tag name>` 就可以打一个新标签\n\n还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。\n`git tag -a <tag name> -m <comment>` ：添加带注释的标签\neg: `git tag -a v1.2 -m 'version 1.2 released'`\n\n`git tag -a <tag name> <md5>` ：对某个版本打标签\n默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？\n方法是找到历史提交的 commit id，然后打上就可以了。\n`git log --pretty=oneline --abbrev-commit`\n比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：\n`git tag v1.2 6224937`\n再用命令 `git log` 查看标签\n\n可以用 `git show <tagname>` 查看标签信息\n\n如果标签打错了，也可以删除：\n`git tag -d v1.2`\n\n如果要推送某个标签到远程，使用命令 `git push origin <tagname>`\neg: `git push origin v1.2`\n\n如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：\n`git tag -d v1.2`\n然后，从远程删除；删除命令也是 push ，但是格式如下：\n`git push origin :ref/tags/v1.2`\n\n`git tag -l '[expression]'`\n查看那符合正则表达式的\n\n### stash\n`git stash`\n备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。\n`git stash pop` \n从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。\n`git stash list`\n显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。\n`git stash clear` : 清空 Git 栈。\n\n\n使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 `git stash apply stash@{1}` 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。\n在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 'git format-patch -1' 这时便会根据log生成一个对应的补丁，如果 'git format-patch -2' 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。\n\n看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。\n\n注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。\n\n### remote\n查看远程仓库名\n\n`git remote -v`\n查看远程仓库url\n\n`git remote add <basename> <url>`\n新增远程仓库\n\n`git remote show <basename>`\n查看远程仓库详细信息\n\n`git remote rename <old basename> <new basename>`\n重命名远程仓库\n\n### commit\n`git commit -a -m 'xx'`\n暂存并提交\n\n### branch\n`git branch`\n查看本地仓库分支\n\n`git branch -r`\n查看远程分支情况\n\n`git branch -a`\n查看本地和远程的所有分支情况\n\n`git branch -v`\n查看本地仓库分支最后一次提交情况\n\n`git branch -vv`\n查看分支跟踪情况\n\n`git branch <branch name>`\n新建分支\n\n`git branch -d <branch name>`\n删除分支\n\n`git branch -D <branch name>`\n强制删除分支\n\n`git branch [--merged | --no-merged]`\n查看已合并|未合并的本地仓库分支\n\n`git branch -u <remote base>/<remote branch>`\n修改当前跟踪分支\n\n### checkout\n`git checkout -- [file]` ：恢复文件\n`git checkout -- demo.html` 意思就是，把 `demo.html` 文件在工作区的修改全部撤销，这里有两种情况：\n一种是 `demo.html` 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是 `demo.html` 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。\n总之，就是让这个文件回到最后一次 `git commit` 或 `git add` 时的状态。\n\n但是如果 `git add` 到暂存区了，在 commit 之前，想撤销：\nGit 同样告诉我们，用命令 `git reset HEAD file` 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。\n`git reset` 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 `HEAD` 时，表示最新的版本。\n再用 `git status` 查看一下，现在暂存区是干净的，工作区有修改：\n还记得如果丢弃工作区的修改吗？\n对的，使用：`git checkout -- demo.html` \n\n`git checkout` 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以\"一键还原\"。\n\n`git checkout -b [branchname] [tagname]`\n在特定的版本上创建一个新的分支并切换到此分支\n\n`git checkout -b [local branch] [remote base]/[remote branch]`\n将远程分支检出到本地分支，并追踪\n\n`git checkout --track <remote base>/<remote branch>`\n让当前分支跟踪远程分支\n\n### rebase\n`git rebase [basebranch]`\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n## 常见问题\n\n### git clone\ngit clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。\n使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。\n\n`git clone <版本库的网址> <本地目录名>`\n如果不写本地目录名，默认就是版本库的名字\n\n\n### 如何新建分支\n本地建立 branch 並立即切换到新分支\n`git checkout -b <branch_name>` \n\n下面的命令表示，在 `origin/master` 的基础上，创建一个分支。\n`git checkout -b newBranch origin/master`\n\n修改分支名称  \n`git branch -m <new_name>`\n\n### 从远程仓库拉取代码到本地仓库，并建立跟踪关系\n`git checkout -b <本地新分支名> <对应的远程分支名>`\n\n### 如何在远程仓库新建一个分支\n新建一个本地分支，按照正常流程提交完代码后，推送到远程\n`git push <remote base> <local branch>:<remote branch>`\n\n### 比较文件\n`git diff HEAD -- demo.html` \n命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。\n\n### 忽略某些文件\n默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除\n`git rm --cached [file]`\n不删除文件，只移除追踪。\n```\ncat .gitignore\n*.[oa]\n*~\n```\n\n文件 .gitignore 的格式规范如下：\n- 所有空行或者以注释符号 # 开头的目录都会被 git 忽略\n- 可以使用标准的 glob 模式匹配\n- 匹配模式最后跟反斜杠（`/`）说明要忽略的目录\n- 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反\n\n### bug 分支\ngit 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。\n`git stash`\n修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？\n`git stash list` ：查看 stash 列表(stash 是一个栈的结构)\ngit 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：\n一是用 `git stash apply` 恢复，但是恢复后，stash 内容并不删除，你需要用 `git stash drop` 来删除；\n另一种方式是用 `git stash pop` ，恢复的同时把 stash 内容也删了；\n你可以多次 stash ，恢复的时候，先用 `git stash list` 查看，然后恢复指定的 stash，用命令：\n`git stash apply stash@{0}`\n\n### 配置文件\n配置 Git 的时候，加上 --global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了？\n每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。\n\n### 查看配置\n`git config -1`\n\n### 设置git push 默认\n`git config --global push.default current`\n\n### 设置别名\n`git config --global alias.<name> <commend>`\n我的设置：\n`git config --global alias.st status`\n`git config --global alias.cm \"commit -m\"`\n`git config --global alias.ph \"push origin <local_repository>:<remote_repository>\"`\n\n### 保存用户名和密码\n\n#### 对于http(s)协议，可以用下面命令临时缓存\n`git config --global credential.helper cache`\n开启linux缓存\n`git config --global credential.helper wincred`\n开启windows缓存\n#### 对于 ssh 协议，可以用 ssh key，具体教程网上很多\n\n\n\n\n## 解决问题\n### 问题一\ngit 中执行命令 `add .`  \n报错：Unlink of file 'templates/opms.exe' failed.Should I try again?(y/n)\n\n因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 `.exe` 文件，我们是不需要添加到版本管理工具的。所以我们选择 `n` 。\n\n### 问题二\ngit 中生成 sshkey: `ssh-keygen -t rsa -C \"youremail\"`\n这个`email`并没有什么用\n所以我们使用`ssh-keygen -t rsa`来生成sshkey就可以了。\n然后git中的配置文件：\n`git config --list`\n`git config --global user.name \"yu\"`\n`git config --global user.email \"react.dong.yu@gmail.com\"`\n这种配置将会对本地所有的git仓库有效。\n那么在 push 的时候，远程就知道这个push来自于哪个email.\n但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。\n这个时候就可以不设置global的配置了，而是在自己的仓库中设置\n`git config --local user.email \"react.dong.yu@gmail.com\"`\n\n### 问题三\n使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。\n有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：\n`git add App.class`\n如果你确实想添加该文件，可以用 -f 制添加到 git：\n`git add -f App.class`\n或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。\n可以用 `git check-ignore` 命令检查：\n`git check-ignore -v App.class`\n\n### 问题四\n为什么我把我生成的 ssh key 添加到了 github 中\n然后 也 remote 了 `https://github.com/nigelyao/Xxx.git`\n为什么提交的时候报错，或者提示 输入密码账号是为什么\n\nssh key 是 ssh 协议的密钥，http 协议没权限\n\n### 问题五\ngit怎样删除未监视的文件 untracked files?\n用 git clean\n```\n# 删除 untracked files\ngit clean -f\n \n# 连 untracked 的目录也一起删掉\ngit clean -fd\n \n# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）\ngit clean -xfd\n \n# 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删\ngit clean -nxfd\ngit clean -nf\ngit clean -nfd\n```\n\n## 我的常用命令\n```\ngit branch -avv\ngit remote -v\n```\n\n\n\n\n[权威教程](http://git-scm.com/book/zh/v2)\n[Pro Git 简体中文版](http://iissnan.com/progit/)\n","source":"_posts/git.md","raw":"---\ntitle: Git学习总结\ndate: 2017-10-07 13:25:24\ncategories: 综合\ntags: [Git]\ncomments: false\n---\n## git 简介\n\ngit 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。\n在 git 中，工作目录下面的所有文件都不外乎这两种状态：**已跟踪**或**未跟踪**。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n<!-- more -->\n\n## 实用指令详解\n### merge\n通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。\n`git merge --no-ff -m 'merge  with no-ff' dev`\n因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。\n\n合并分支时，加上 `--no-ff` 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。\n\n### fetch\n一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。\n`git fetch <远程主机名>`\n上面命令将某个远程主机的更新，全部取回本地。\n默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。\n`git fetch <远程主机名> <分支名>`\n比如，取回 origin 主机的 master 分支\n`git fetch origin master`\n所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。\n\n`git fetch -p` ：取回远程更新，删除不存在的分支。\n\n\n### pull\ngit pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：\n`git pull <远程主机名> <远程分支名>:<本地分支名>`\n比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。\n`git pull origin next:master`\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n`git pull origin master`\n上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。\n``` bash\ngit fetch origin\ngit merge origin/master\n```\n在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。\ngit 也允许手动建立追踪关系。\n`git branch --set-upstream master origin/next`\n上面的命令指定 master 分支追踪 origin/next 分支。\n如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。\n`git pull origin`\n上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。\n如果当前分支只有一个追踪分支，连远程主机名都可以忽略。\n`git pull`\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n如果合并需要采用 rebase 模式，可以使用 -rebase 选项。\n`git pull --rebase <远程主机名> <远程分支名>:<本地分支名>`\n\n### push\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。\n`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。\n`git push origin master`\n上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。\n**如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。**\n`git push origin :master`\n等同于\n`git push origin --delete master`\n上面命令表示删除 origin 主机的 master 分支。\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n`git push origin`\n上面命令表示，将当前分支推送到 origin 主机的对应分支。\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n`git push`\n如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。\n`git push -u origin master`\n上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。\n不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。\ngit 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。\n`git config --global push.default matching`\n或者\n`git config --global push.default simple`\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。\n`git push --all origin`\n上面命令表示，将所有本地分支都推送到 origin 主机。\n如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。\n`git push --force origin`\n上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。\n最后，git push 不会推送标签(tag)，除非使用 -tags 选项。\n`git push origin --tags`\n\n### log\n`git log` 命令可以查看历史记录，`git log` 命令显示从最近到最远的提交日志；\n如果嫌输出信息太多，看得眼花缭乱的，可以试试 `git log --pretty=oneline` 。我们可以看到当前版本以及之前的版本日志以及版本号。\n用 `git log --graph` 命令可以看到分支合并图。\n或者两个参数一起用：\n`git log --graph --pretty=oneline`\n`git log --graph --pretty=oneline --abbrev-commit`\n首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 `HEAD^` ，上上一个版本就是 `HEAD^^` ， 当然往上100个版本写100个 `^` 比较容易数不过来，所以写成 `HEAD~100` 。\n现在，我们要把当前版本回退到上一个版本，就可以使用 `git reset` 命令：\n`git reset --hard HEAD^`\n当你回退到了某个版本后，`git log` 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？\nGit 提供了一个命令 `git reflog` 用来记录你的每一次命令\n\n### tag\n查看标签（用来标记标志性的稳定版本信息）\n发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\n相比于 commit 的版本号(40位16进制)，标签号则要好使的多。\n所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。\n\n`git tag [tag name]`\n如果没有标签名，则为查看所有标签，带标签名则为新建标签\n\n`git tag <tag name>` 就可以打一个新标签\n\n还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。\n`git tag -a <tag name> -m <comment>` ：添加带注释的标签\neg: `git tag -a v1.2 -m 'version 1.2 released'`\n\n`git tag -a <tag name> <md5>` ：对某个版本打标签\n默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？\n方法是找到历史提交的 commit id，然后打上就可以了。\n`git log --pretty=oneline --abbrev-commit`\n比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：\n`git tag v1.2 6224937`\n再用命令 `git log` 查看标签\n\n可以用 `git show <tagname>` 查看标签信息\n\n如果标签打错了，也可以删除：\n`git tag -d v1.2`\n\n如果要推送某个标签到远程，使用命令 `git push origin <tagname>`\neg: `git push origin v1.2`\n\n如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：\n`git tag -d v1.2`\n然后，从远程删除；删除命令也是 push ，但是格式如下：\n`git push origin :ref/tags/v1.2`\n\n`git tag -l '[expression]'`\n查看那符合正则表达式的\n\n### stash\n`git stash`\n备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。\n`git stash pop` \n从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。\n`git stash list`\n显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。\n`git stash clear` : 清空 Git 栈。\n\n\n使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 `git stash apply stash@{1}` 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。\n在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 'git format-patch -1' 这时便会根据log生成一个对应的补丁，如果 'git format-patch -2' 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。\n\n看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。\n\n注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。\n\n### remote\n查看远程仓库名\n\n`git remote -v`\n查看远程仓库url\n\n`git remote add <basename> <url>`\n新增远程仓库\n\n`git remote show <basename>`\n查看远程仓库详细信息\n\n`git remote rename <old basename> <new basename>`\n重命名远程仓库\n\n### commit\n`git commit -a -m 'xx'`\n暂存并提交\n\n### branch\n`git branch`\n查看本地仓库分支\n\n`git branch -r`\n查看远程分支情况\n\n`git branch -a`\n查看本地和远程的所有分支情况\n\n`git branch -v`\n查看本地仓库分支最后一次提交情况\n\n`git branch -vv`\n查看分支跟踪情况\n\n`git branch <branch name>`\n新建分支\n\n`git branch -d <branch name>`\n删除分支\n\n`git branch -D <branch name>`\n强制删除分支\n\n`git branch [--merged | --no-merged]`\n查看已合并|未合并的本地仓库分支\n\n`git branch -u <remote base>/<remote branch>`\n修改当前跟踪分支\n\n### checkout\n`git checkout -- [file]` ：恢复文件\n`git checkout -- demo.html` 意思就是，把 `demo.html` 文件在工作区的修改全部撤销，这里有两种情况：\n一种是 `demo.html` 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是 `demo.html` 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。\n总之，就是让这个文件回到最后一次 `git commit` 或 `git add` 时的状态。\n\n但是如果 `git add` 到暂存区了，在 commit 之前，想撤销：\nGit 同样告诉我们，用命令 `git reset HEAD file` 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。\n`git reset` 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 `HEAD` 时，表示最新的版本。\n再用 `git status` 查看一下，现在暂存区是干净的，工作区有修改：\n还记得如果丢弃工作区的修改吗？\n对的，使用：`git checkout -- demo.html` \n\n`git checkout` 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以\"一键还原\"。\n\n`git checkout -b [branchname] [tagname]`\n在特定的版本上创建一个新的分支并切换到此分支\n\n`git checkout -b [local branch] [remote base]/[remote branch]`\n将远程分支检出到本地分支，并追踪\n\n`git checkout --track <remote base>/<remote branch>`\n让当前分支跟踪远程分支\n\n### rebase\n`git rebase [basebranch]`\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n## 常见问题\n\n### git clone\ngit clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。\n使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。\n\n`git clone <版本库的网址> <本地目录名>`\n如果不写本地目录名，默认就是版本库的名字\n\n\n### 如何新建分支\n本地建立 branch 並立即切换到新分支\n`git checkout -b <branch_name>` \n\n下面的命令表示，在 `origin/master` 的基础上，创建一个分支。\n`git checkout -b newBranch origin/master`\n\n修改分支名称  \n`git branch -m <new_name>`\n\n### 从远程仓库拉取代码到本地仓库，并建立跟踪关系\n`git checkout -b <本地新分支名> <对应的远程分支名>`\n\n### 如何在远程仓库新建一个分支\n新建一个本地分支，按照正常流程提交完代码后，推送到远程\n`git push <remote base> <local branch>:<remote branch>`\n\n### 比较文件\n`git diff HEAD -- demo.html` \n命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。\n\n### 忽略某些文件\n默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除\n`git rm --cached [file]`\n不删除文件，只移除追踪。\n```\ncat .gitignore\n*.[oa]\n*~\n```\n\n文件 .gitignore 的格式规范如下：\n- 所有空行或者以注释符号 # 开头的目录都会被 git 忽略\n- 可以使用标准的 glob 模式匹配\n- 匹配模式最后跟反斜杠（`/`）说明要忽略的目录\n- 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反\n\n### bug 分支\ngit 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。\n`git stash`\n修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？\n`git stash list` ：查看 stash 列表(stash 是一个栈的结构)\ngit 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：\n一是用 `git stash apply` 恢复，但是恢复后，stash 内容并不删除，你需要用 `git stash drop` 来删除；\n另一种方式是用 `git stash pop` ，恢复的同时把 stash 内容也删了；\n你可以多次 stash ，恢复的时候，先用 `git stash list` 查看，然后恢复指定的 stash，用命令：\n`git stash apply stash@{0}`\n\n### 配置文件\n配置 Git 的时候，加上 --global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了？\n每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。\n\n### 查看配置\n`git config -1`\n\n### 设置git push 默认\n`git config --global push.default current`\n\n### 设置别名\n`git config --global alias.<name> <commend>`\n我的设置：\n`git config --global alias.st status`\n`git config --global alias.cm \"commit -m\"`\n`git config --global alias.ph \"push origin <local_repository>:<remote_repository>\"`\n\n### 保存用户名和密码\n\n#### 对于http(s)协议，可以用下面命令临时缓存\n`git config --global credential.helper cache`\n开启linux缓存\n`git config --global credential.helper wincred`\n开启windows缓存\n#### 对于 ssh 协议，可以用 ssh key，具体教程网上很多\n\n\n\n\n## 解决问题\n### 问题一\ngit 中执行命令 `add .`  \n报错：Unlink of file 'templates/opms.exe' failed.Should I try again?(y/n)\n\n因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 `.exe` 文件，我们是不需要添加到版本管理工具的。所以我们选择 `n` 。\n\n### 问题二\ngit 中生成 sshkey: `ssh-keygen -t rsa -C \"youremail\"`\n这个`email`并没有什么用\n所以我们使用`ssh-keygen -t rsa`来生成sshkey就可以了。\n然后git中的配置文件：\n`git config --list`\n`git config --global user.name \"yu\"`\n`git config --global user.email \"react.dong.yu@gmail.com\"`\n这种配置将会对本地所有的git仓库有效。\n那么在 push 的时候，远程就知道这个push来自于哪个email.\n但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。\n这个时候就可以不设置global的配置了，而是在自己的仓库中设置\n`git config --local user.email \"react.dong.yu@gmail.com\"`\n\n### 问题三\n使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。\n有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：\n`git add App.class`\n如果你确实想添加该文件，可以用 -f 制添加到 git：\n`git add -f App.class`\n或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。\n可以用 `git check-ignore` 命令检查：\n`git check-ignore -v App.class`\n\n### 问题四\n为什么我把我生成的 ssh key 添加到了 github 中\n然后 也 remote 了 `https://github.com/nigelyao/Xxx.git`\n为什么提交的时候报错，或者提示 输入密码账号是为什么\n\nssh key 是 ssh 协议的密钥，http 协议没权限\n\n### 问题五\ngit怎样删除未监视的文件 untracked files?\n用 git clean\n```\n# 删除 untracked files\ngit clean -f\n \n# 连 untracked 的目录也一起删掉\ngit clean -fd\n \n# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）\ngit clean -xfd\n \n# 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删\ngit clean -nxfd\ngit clean -nf\ngit clean -nfd\n```\n\n## 我的常用命令\n```\ngit branch -avv\ngit remote -v\n```\n\n\n\n\n[权威教程](http://git-scm.com/book/zh/v2)\n[Pro Git 简体中文版](http://iissnan.com/progit/)\n","slug":"git","published":1,"updated":"2019-08-15T07:18:51.524Z","_id":"cjzccpcyp000dz4v52bcespe0","layout":"post","photos":[],"link":"","content":"<h2 id=\"git-简介\"><a href=\"#git-简介\" class=\"headerlink\" title=\"git 简介\"></a>git 简介</h2><p>git 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。<br>在 git 中，工作目录下面的所有文件都不外乎这两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>\n<a id=\"more\"></a>\n<h2 id=\"实用指令详解\"><a href=\"#实用指令详解\" class=\"headerlink\" title=\"实用指令详解\"></a>实用指令详解</h2><h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p>通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。<br><code>git merge --no-ff -m &#39;merge  with no-ff&#39; dev</code><br>因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。</p>\n<p>合并分支时，加上 <code>--no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。</p>\n<h3 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h3><p>一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。<br><code>git fetch &lt;远程主机名&gt;</code><br>上面命令将某个远程主机的更新，全部取回本地。<br>默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。<br><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code><br>比如，取回 origin 主机的 master 分支<br><code>git fetch origin master</code><br>所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。</p>\n<p><code>git fetch -p</code> ：取回远程更新，删除不存在的分支。</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><p>git pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：<br><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code><br>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。<br><code>git pull origin next:master</code><br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br><code>git pull origin master</code><br>上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git merge origin/master</span><br></pre></td></tr></table></figure></p>\n<p>在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。<br>git 也允许手动建立追踪关系。<br><code>git branch --set-upstream master origin/next</code><br>上面的命令指定 master 分支追踪 origin/next 分支。<br>如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。<br><code>git pull origin</code><br>上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以忽略。<br><code>git pull</code><br>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用 rebase 模式，可以使用 -rebase 选项。<br><code>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p>git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。<br><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。<br><code>git push origin master</code><br>上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。<br><strong>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</strong><br><code>git push origin :master</code><br>等同于<br><code>git push origin --delete master</code><br>上面命令表示删除 origin 主机的 master 分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。<br><code>git push origin</code><br>上面命令表示，将当前分支推送到 origin 主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。<br><code>git push</code><br>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。<br><code>git push -u origin master</code><br>上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。<br>不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。<br>git 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。<br><code>git config --global push.default matching</code><br>或者<br><code>git config --global push.default simple</code><br>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。<br><code>git push --all origin</code><br>上面命令表示，将所有本地分支都推送到 origin 主机。<br>如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。<br><code>git push --force origin</code><br>上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。<br>最后，git push 不会推送标签(tag)，除非使用 -tags 选项。<br><code>git push origin --tags</code></p>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p><code>git log</code> 命令可以查看历史记录，<code>git log</code> 命令显示从最近到最远的提交日志；<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试 <code>git log --pretty=oneline</code> 。我们可以看到当前版本以及之前的版本日志以及版本号。<br>用 <code>git log --graph</code> 命令可以看到分支合并图。<br>或者两个参数一起用：<br><code>git log --graph --pretty=oneline</code><br><code>git log --graph --pretty=oneline --abbrev-commit</code><br>首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 <code>HEAD^</code> ，上上一个版本就是 <code>HEAD^^</code> ， 当然往上100个版本写100个 <code>^</code> 比较容易数不过来，所以写成 <code>HEAD~100</code> 。<br>现在，我们要把当前版本回退到上一个版本，就可以使用 <code>git reset</code> 命令：<br><code>git reset --hard HEAD^</code><br>当你回退到了某个版本后，<code>git log</code> 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？<br>Git 提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>查看标签（用来标记标志性的稳定版本信息）<br>发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>相比于 commit 的版本号(40位16进制)，标签号则要好使的多。<br>所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。</p>\n<p><code>git tag [tag name]</code><br>如果没有标签名，则为查看所有标签，带标签名则为新建标签</p>\n<p><code>git tag &lt;tag name&gt;</code> 就可以打一个新标签</p>\n<p>还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。<br><code>git tag -a &lt;tag name&gt; -m &lt;comment&gt;</code> ：添加带注释的标签<br>eg: <code>git tag -a v1.2 -m &#39;version 1.2 released&#39;</code></p>\n<p><code>git tag -a &lt;tag name&gt; &lt;md5&gt;</code> ：对某个版本打标签<br>默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？<br>方法是找到历史提交的 commit id，然后打上就可以了。<br><code>git log --pretty=oneline --abbrev-commit</code><br>比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：<br><code>git tag v1.2 6224937</code><br>再用命令 <code>git log</code> 查看标签</p>\n<p>可以用 <code>git show &lt;tagname&gt;</code> 查看标签信息</p>\n<p>如果标签打错了，也可以删除：<br><code>git tag -d v1.2</code></p>\n<p>如果要推送某个标签到远程，使用命令 <code>git push origin &lt;tagname&gt;</code><br>eg: <code>git push origin v1.2</code></p>\n<p>如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：<br><code>git tag -d v1.2</code><br>然后，从远程删除；删除命令也是 push ，但是格式如下：<br><code>git push origin :ref/tags/v1.2</code></p>\n<p><code>git tag -l &#39;[expression]&#39;</code><br>查看那符合正则表达式的</p>\n<h3 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h3><p><code>git stash</code><br>备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。<br><code>git stash pop</code><br>从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。<br><code>git stash list</code><br>显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。<br><code>git stash clear</code> : 清空 Git 栈。</p>\n<p>使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 <code>git stash apply stash@{1}</code> 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。<br>在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 ‘git format-patch -1’ 这时便会根据log生成一个对应的补丁，如果 ‘git format-patch -2’ 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。</p>\n<p>看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。</p>\n<p>注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。</p>\n<h3 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h3><p>查看远程仓库名</p>\n<p><code>git remote -v</code><br>查看远程仓库url</p>\n<p><code>git remote add &lt;basename&gt; &lt;url&gt;</code><br>新增远程仓库</p>\n<p><code>git remote show &lt;basename&gt;</code><br>查看远程仓库详细信息</p>\n<p><code>git remote rename &lt;old basename&gt; &lt;new basename&gt;</code><br>重命名远程仓库</p>\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>暂存并提交</p>\n<h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p><code>git branch</code><br>查看本地仓库分支</p>\n<p><code>git branch -r</code><br>查看远程分支情况</p>\n<p><code>git branch -a</code><br>查看本地和远程的所有分支情况</p>\n<p><code>git branch -v</code><br>查看本地仓库分支最后一次提交情况</p>\n<p><code>git branch -vv</code><br>查看分支跟踪情况</p>\n<p><code>git branch &lt;branch name&gt;</code><br>新建分支</p>\n<p><code>git branch -d &lt;branch name&gt;</code><br>删除分支</p>\n<p><code>git branch -D &lt;branch name&gt;</code><br>强制删除分支</p>\n<p><code>git branch [--merged | --no-merged]</code><br>查看已合并|未合并的本地仓库分支</p>\n<p><code>git branch -u &lt;remote base&gt;/&lt;remote branch&gt;</code><br>修改当前跟踪分支</p>\n<h3 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h3><p><code>git checkout -- [file]</code> ：恢复文件<br><code>git checkout -- demo.html</code> 意思就是，把 <code>demo.html</code> 文件在工作区的修改全部撤销，这里有两种情况：<br>一种是 <code>demo.html</code> 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是 <code>demo.html</code> 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。<br>总之，就是让这个文件回到最后一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>\n<p>但是如果 <code>git add</code> 到暂存区了，在 commit 之前，想撤销：<br>Git 同样告诉我们，用命令 <code>git reset HEAD file</code> 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。<br><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 <code>HEAD</code> 时，表示最新的版本。<br>再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改：<br>还记得如果丢弃工作区的修改吗？<br>对的，使用：<code>git checkout -- demo.html</code> </p>\n<p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”一键还原”。</p>\n<p><code>git checkout -b [branchname] [tagname]</code><br>在特定的版本上创建一个新的分支并切换到此分支</p>\n<p><code>git checkout -b [local branch] [remote base]/[remote branch]</code><br>将远程分支检出到本地分支，并追踪</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪远程分支</p>\n<h3 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h3><p><code>git rebase [basebranch]</code><br>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>git clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。<br>使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>\n<p><code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code><br>如果不写本地目录名，默认就是版本库的名字</p>\n<h3 id=\"如何新建分支\"><a href=\"#如何新建分支\" class=\"headerlink\" title=\"如何新建分支\"></a>如何新建分支</h3><p>本地建立 branch 並立即切换到新分支<br><code>git checkout -b &lt;branch_name&gt;</code> </p>\n<p>下面的命令表示，在 <code>origin/master</code> 的基础上，创建一个分支。<br><code>git checkout -b newBranch origin/master</code></p>\n<p>修改分支名称<br><code>git branch -m &lt;new_name&gt;</code></p>\n<h3 id=\"从远程仓库拉取代码到本地仓库，并建立跟踪关系\"><a href=\"#从远程仓库拉取代码到本地仓库，并建立跟踪关系\" class=\"headerlink\" title=\"从远程仓库拉取代码到本地仓库，并建立跟踪关系\"></a>从远程仓库拉取代码到本地仓库，并建立跟踪关系</h3><p><code>git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;</code></p>\n<h3 id=\"如何在远程仓库新建一个分支\"><a href=\"#如何在远程仓库新建一个分支\" class=\"headerlink\" title=\"如何在远程仓库新建一个分支\"></a>如何在远程仓库新建一个分支</h3><p>新建一个本地分支，按照正常流程提交完代码后，推送到远程<br><code>git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code></p>\n<h3 id=\"比较文件\"><a href=\"#比较文件\" class=\"headerlink\" title=\"比较文件\"></a>比较文件</h3><p><code>git diff HEAD -- demo.html</code><br>命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。</p>\n<h3 id=\"忽略某些文件\"><a href=\"#忽略某些文件\" class=\"headerlink\" title=\"忽略某些文件\"></a>忽略某些文件</h3><p>默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除<br><code>git rm --cached [file]</code><br>不删除文件，只移除追踪。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat .gitignore</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure></p>\n<p>文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以注释符号 # 开头的目录都会被 git 忽略</li>\n<li>可以使用标准的 glob 模式匹配</li>\n<li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的目录</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反</li>\n</ul>\n<h3 id=\"bug-分支\"><a href=\"#bug-分支\" class=\"headerlink\" title=\"bug 分支\"></a>bug 分支</h3><p>git 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。<br><code>git stash</code><br>修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？<br><code>git stash list</code> ：查看 stash 列表(stash 是一个栈的结构)<br>git 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：<br>一是用 <code>git stash apply</code> 恢复，但是恢复后，stash 内容并不删除，你需要用 <code>git stash drop</code> 来删除；<br>另一种方式是用 <code>git stash pop</code> ，恢复的同时把 stash 内容也删了；<br>你可以多次 stash ，恢复的时候，先用 <code>git stash list</code> 查看，然后恢复指定的 stash，用命令：<br><code>git stash apply stash@{0}</code></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置 Git 的时候，加上 –global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了？<br>每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。</p>\n<h3 id=\"查看配置\"><a href=\"#查看配置\" class=\"headerlink\" title=\"查看配置\"></a>查看配置</h3><p><code>git config -1</code></p>\n<h3 id=\"设置git-push-默认\"><a href=\"#设置git-push-默认\" class=\"headerlink\" title=\"设置git push 默认\"></a>设置git push 默认</h3><p><code>git config --global push.default current</code></p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p><code>git config --global alias.&lt;name&gt; &lt;commend&gt;</code><br>我的设置：<br><code>git config --global alias.st status</code><br><code>git config --global alias.cm &quot;commit -m&quot;</code><br><code>git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;</code></p>\n<h3 id=\"保存用户名和密码\"><a href=\"#保存用户名和密码\" class=\"headerlink\" title=\"保存用户名和密码\"></a>保存用户名和密码</h3><h4 id=\"对于http-s-协议，可以用下面命令临时缓存\"><a href=\"#对于http-s-协议，可以用下面命令临时缓存\" class=\"headerlink\" title=\"对于http(s)协议，可以用下面命令临时缓存\"></a>对于http(s)协议，可以用下面命令临时缓存</h4><p><code>git config --global credential.helper cache</code><br>开启linux缓存<br><code>git config --global credential.helper wincred</code><br>开启windows缓存</p>\n<h4 id=\"对于-ssh-协议，可以用-ssh-key，具体教程网上很多\"><a href=\"#对于-ssh-协议，可以用-ssh-key，具体教程网上很多\" class=\"headerlink\" title=\"对于 ssh 协议，可以用 ssh key，具体教程网上很多\"></a>对于 ssh 协议，可以用 ssh key，具体教程网上很多</h4><h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>git 中执行命令 <code>add .</code><br>报错：Unlink of file ‘templates/opms.exe’ failed.Should I try again?(y/n)</p>\n<p>因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 <code>.exe</code> 文件，我们是不需要添加到版本管理工具的。所以我们选择 <code>n</code> 。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>git 中生成 sshkey: <code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>这个<code>email</code>并没有什么用<br>所以我们使用<code>ssh-keygen -t rsa</code>来生成sshkey就可以了。<br>然后git中的配置文件：<br><code>git config --list</code><br><code>git config --global user.name &quot;yu&quot;</code><br><code>git config --global user.email &quot;react.dong.yu@gmail.com&quot;</code><br>这种配置将会对本地所有的git仓库有效。<br>那么在 push 的时候，远程就知道这个push来自于哪个email.<br>但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。<br>这个时候就可以不设置global的配置了，而是在自己的仓库中设置<br><code>git config --local user.email &quot;react.dong.yu@gmail.com&quot;</code></p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。<br>有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：<br><code>git add App.class</code><br>如果你确实想添加该文件，可以用 -f 制添加到 git：<br><code>git add -f App.class</code><br>或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。<br>可以用 <code>git check-ignore</code> 命令检查：<br><code>git check-ignore -v App.class</code></p>\n<h3 id=\"问题四\"><a href=\"#问题四\" class=\"headerlink\" title=\"问题四\"></a>问题四</h3><p>为什么我把我生成的 ssh key 添加到了 github 中<br>然后 也 remote 了 <code>https://github.com/nigelyao/Xxx.git</code><br>为什么提交的时候报错，或者提示 输入密码账号是为什么</p>\n<p>ssh key 是 ssh 协议的密钥，http 协议没权限</p>\n<h3 id=\"问题五\"><a href=\"#问题五\" class=\"headerlink\" title=\"问题五\"></a>问题五</h3><p>git怎样删除未监视的文件 untracked files?<br>用 git clean<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除 untracked files</span><br><span class=\"line\">git clean -f</span><br><span class=\"line\"> </span><br><span class=\"line\"># 连 untracked 的目录也一起删掉</span><br><span class=\"line\">git clean -fd</span><br><span class=\"line\"> </span><br><span class=\"line\"># 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）</span><br><span class=\"line\">git clean -xfd</span><br><span class=\"line\"> </span><br><span class=\"line\"># 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</span><br><span class=\"line\">git clean -nxfd</span><br><span class=\"line\">git clean -nf</span><br><span class=\"line\">git clean -nfd</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"我的常用命令\"><a href=\"#我的常用命令\" class=\"headerlink\" title=\"我的常用命令\"></a>我的常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -avv</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">权威教程</a><br><a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"noopener\">Pro Git 简体中文版</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"git-简介\"><a href=\"#git-简介\" class=\"headerlink\" title=\"git 简介\"></a>git 简介</h2><p>git 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。<br>在 git 中，工作目录下面的所有文件都不外乎这两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>","more":"<h2 id=\"实用指令详解\"><a href=\"#实用指令详解\" class=\"headerlink\" title=\"实用指令详解\"></a>实用指令详解</h2><h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p>通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。<br><code>git merge --no-ff -m &#39;merge  with no-ff&#39; dev</code><br>因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。</p>\n<p>合并分支时，加上 <code>--no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。</p>\n<h3 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h3><p>一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。<br><code>git fetch &lt;远程主机名&gt;</code><br>上面命令将某个远程主机的更新，全部取回本地。<br>默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。<br><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code><br>比如，取回 origin 主机的 master 分支<br><code>git fetch origin master</code><br>所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。</p>\n<p><code>git fetch -p</code> ：取回远程更新，删除不存在的分支。</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><p>git pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：<br><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code><br>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。<br><code>git pull origin next:master</code><br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br><code>git pull origin master</code><br>上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git merge origin/master</span><br></pre></td></tr></table></figure></p>\n<p>在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。<br>git 也允许手动建立追踪关系。<br><code>git branch --set-upstream master origin/next</code><br>上面的命令指定 master 分支追踪 origin/next 分支。<br>如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。<br><code>git pull origin</code><br>上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以忽略。<br><code>git pull</code><br>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用 rebase 模式，可以使用 -rebase 选项。<br><code>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p>git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。<br><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。<br><code>git push origin master</code><br>上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。<br><strong>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</strong><br><code>git push origin :master</code><br>等同于<br><code>git push origin --delete master</code><br>上面命令表示删除 origin 主机的 master 分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。<br><code>git push origin</code><br>上面命令表示，将当前分支推送到 origin 主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。<br><code>git push</code><br>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。<br><code>git push -u origin master</code><br>上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。<br>不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。<br>git 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。<br><code>git config --global push.default matching</code><br>或者<br><code>git config --global push.default simple</code><br>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。<br><code>git push --all origin</code><br>上面命令表示，将所有本地分支都推送到 origin 主机。<br>如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。<br><code>git push --force origin</code><br>上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。<br>最后，git push 不会推送标签(tag)，除非使用 -tags 选项。<br><code>git push origin --tags</code></p>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p><code>git log</code> 命令可以查看历史记录，<code>git log</code> 命令显示从最近到最远的提交日志；<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试 <code>git log --pretty=oneline</code> 。我们可以看到当前版本以及之前的版本日志以及版本号。<br>用 <code>git log --graph</code> 命令可以看到分支合并图。<br>或者两个参数一起用：<br><code>git log --graph --pretty=oneline</code><br><code>git log --graph --pretty=oneline --abbrev-commit</code><br>首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 <code>HEAD^</code> ，上上一个版本就是 <code>HEAD^^</code> ， 当然往上100个版本写100个 <code>^</code> 比较容易数不过来，所以写成 <code>HEAD~100</code> 。<br>现在，我们要把当前版本回退到上一个版本，就可以使用 <code>git reset</code> 命令：<br><code>git reset --hard HEAD^</code><br>当你回退到了某个版本后，<code>git log</code> 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？<br>Git 提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>查看标签（用来标记标志性的稳定版本信息）<br>发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>相比于 commit 的版本号(40位16进制)，标签号则要好使的多。<br>所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。</p>\n<p><code>git tag [tag name]</code><br>如果没有标签名，则为查看所有标签，带标签名则为新建标签</p>\n<p><code>git tag &lt;tag name&gt;</code> 就可以打一个新标签</p>\n<p>还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。<br><code>git tag -a &lt;tag name&gt; -m &lt;comment&gt;</code> ：添加带注释的标签<br>eg: <code>git tag -a v1.2 -m &#39;version 1.2 released&#39;</code></p>\n<p><code>git tag -a &lt;tag name&gt; &lt;md5&gt;</code> ：对某个版本打标签<br>默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？<br>方法是找到历史提交的 commit id，然后打上就可以了。<br><code>git log --pretty=oneline --abbrev-commit</code><br>比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：<br><code>git tag v1.2 6224937</code><br>再用命令 <code>git log</code> 查看标签</p>\n<p>可以用 <code>git show &lt;tagname&gt;</code> 查看标签信息</p>\n<p>如果标签打错了，也可以删除：<br><code>git tag -d v1.2</code></p>\n<p>如果要推送某个标签到远程，使用命令 <code>git push origin &lt;tagname&gt;</code><br>eg: <code>git push origin v1.2</code></p>\n<p>如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：<br><code>git tag -d v1.2</code><br>然后，从远程删除；删除命令也是 push ，但是格式如下：<br><code>git push origin :ref/tags/v1.2</code></p>\n<p><code>git tag -l &#39;[expression]&#39;</code><br>查看那符合正则表达式的</p>\n<h3 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h3><p><code>git stash</code><br>备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。<br><code>git stash pop</code><br>从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。<br><code>git stash list</code><br>显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。<br><code>git stash clear</code> : 清空 Git 栈。</p>\n<p>使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 <code>git stash apply stash@{1}</code> 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。<br>在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 ‘git format-patch -1’ 这时便会根据log生成一个对应的补丁，如果 ‘git format-patch -2’ 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。</p>\n<p>看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。</p>\n<p>注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。</p>\n<h3 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h3><p>查看远程仓库名</p>\n<p><code>git remote -v</code><br>查看远程仓库url</p>\n<p><code>git remote add &lt;basename&gt; &lt;url&gt;</code><br>新增远程仓库</p>\n<p><code>git remote show &lt;basename&gt;</code><br>查看远程仓库详细信息</p>\n<p><code>git remote rename &lt;old basename&gt; &lt;new basename&gt;</code><br>重命名远程仓库</p>\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>暂存并提交</p>\n<h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p><code>git branch</code><br>查看本地仓库分支</p>\n<p><code>git branch -r</code><br>查看远程分支情况</p>\n<p><code>git branch -a</code><br>查看本地和远程的所有分支情况</p>\n<p><code>git branch -v</code><br>查看本地仓库分支最后一次提交情况</p>\n<p><code>git branch -vv</code><br>查看分支跟踪情况</p>\n<p><code>git branch &lt;branch name&gt;</code><br>新建分支</p>\n<p><code>git branch -d &lt;branch name&gt;</code><br>删除分支</p>\n<p><code>git branch -D &lt;branch name&gt;</code><br>强制删除分支</p>\n<p><code>git branch [--merged | --no-merged]</code><br>查看已合并|未合并的本地仓库分支</p>\n<p><code>git branch -u &lt;remote base&gt;/&lt;remote branch&gt;</code><br>修改当前跟踪分支</p>\n<h3 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h3><p><code>git checkout -- [file]</code> ：恢复文件<br><code>git checkout -- demo.html</code> 意思就是，把 <code>demo.html</code> 文件在工作区的修改全部撤销，这里有两种情况：<br>一种是 <code>demo.html</code> 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是 <code>demo.html</code> 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。<br>总之，就是让这个文件回到最后一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>\n<p>但是如果 <code>git add</code> 到暂存区了，在 commit 之前，想撤销：<br>Git 同样告诉我们，用命令 <code>git reset HEAD file</code> 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。<br><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 <code>HEAD</code> 时，表示最新的版本。<br>再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改：<br>还记得如果丢弃工作区的修改吗？<br>对的，使用：<code>git checkout -- demo.html</code> </p>\n<p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”一键还原”。</p>\n<p><code>git checkout -b [branchname] [tagname]</code><br>在特定的版本上创建一个新的分支并切换到此分支</p>\n<p><code>git checkout -b [local branch] [remote base]/[remote branch]</code><br>将远程分支检出到本地分支，并追踪</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪远程分支</p>\n<h3 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h3><p><code>git rebase [basebranch]</code><br>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>git clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。<br>使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>\n<p><code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code><br>如果不写本地目录名，默认就是版本库的名字</p>\n<h3 id=\"如何新建分支\"><a href=\"#如何新建分支\" class=\"headerlink\" title=\"如何新建分支\"></a>如何新建分支</h3><p>本地建立 branch 並立即切换到新分支<br><code>git checkout -b &lt;branch_name&gt;</code> </p>\n<p>下面的命令表示，在 <code>origin/master</code> 的基础上，创建一个分支。<br><code>git checkout -b newBranch origin/master</code></p>\n<p>修改分支名称<br><code>git branch -m &lt;new_name&gt;</code></p>\n<h3 id=\"从远程仓库拉取代码到本地仓库，并建立跟踪关系\"><a href=\"#从远程仓库拉取代码到本地仓库，并建立跟踪关系\" class=\"headerlink\" title=\"从远程仓库拉取代码到本地仓库，并建立跟踪关系\"></a>从远程仓库拉取代码到本地仓库，并建立跟踪关系</h3><p><code>git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;</code></p>\n<h3 id=\"如何在远程仓库新建一个分支\"><a href=\"#如何在远程仓库新建一个分支\" class=\"headerlink\" title=\"如何在远程仓库新建一个分支\"></a>如何在远程仓库新建一个分支</h3><p>新建一个本地分支，按照正常流程提交完代码后，推送到远程<br><code>git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code></p>\n<h3 id=\"比较文件\"><a href=\"#比较文件\" class=\"headerlink\" title=\"比较文件\"></a>比较文件</h3><p><code>git diff HEAD -- demo.html</code><br>命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。</p>\n<h3 id=\"忽略某些文件\"><a href=\"#忽略某些文件\" class=\"headerlink\" title=\"忽略某些文件\"></a>忽略某些文件</h3><p>默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除<br><code>git rm --cached [file]</code><br>不删除文件，只移除追踪。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat .gitignore</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure></p>\n<p>文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以注释符号 # 开头的目录都会被 git 忽略</li>\n<li>可以使用标准的 glob 模式匹配</li>\n<li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的目录</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反</li>\n</ul>\n<h3 id=\"bug-分支\"><a href=\"#bug-分支\" class=\"headerlink\" title=\"bug 分支\"></a>bug 分支</h3><p>git 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。<br><code>git stash</code><br>修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？<br><code>git stash list</code> ：查看 stash 列表(stash 是一个栈的结构)<br>git 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：<br>一是用 <code>git stash apply</code> 恢复，但是恢复后，stash 内容并不删除，你需要用 <code>git stash drop</code> 来删除；<br>另一种方式是用 <code>git stash pop</code> ，恢复的同时把 stash 内容也删了；<br>你可以多次 stash ，恢复的时候，先用 <code>git stash list</code> 查看，然后恢复指定的 stash，用命令：<br><code>git stash apply stash@{0}</code></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置 Git 的时候，加上 –global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了？<br>每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。</p>\n<h3 id=\"查看配置\"><a href=\"#查看配置\" class=\"headerlink\" title=\"查看配置\"></a>查看配置</h3><p><code>git config -1</code></p>\n<h3 id=\"设置git-push-默认\"><a href=\"#设置git-push-默认\" class=\"headerlink\" title=\"设置git push 默认\"></a>设置git push 默认</h3><p><code>git config --global push.default current</code></p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p><code>git config --global alias.&lt;name&gt; &lt;commend&gt;</code><br>我的设置：<br><code>git config --global alias.st status</code><br><code>git config --global alias.cm &quot;commit -m&quot;</code><br><code>git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;</code></p>\n<h3 id=\"保存用户名和密码\"><a href=\"#保存用户名和密码\" class=\"headerlink\" title=\"保存用户名和密码\"></a>保存用户名和密码</h3><h4 id=\"对于http-s-协议，可以用下面命令临时缓存\"><a href=\"#对于http-s-协议，可以用下面命令临时缓存\" class=\"headerlink\" title=\"对于http(s)协议，可以用下面命令临时缓存\"></a>对于http(s)协议，可以用下面命令临时缓存</h4><p><code>git config --global credential.helper cache</code><br>开启linux缓存<br><code>git config --global credential.helper wincred</code><br>开启windows缓存</p>\n<h4 id=\"对于-ssh-协议，可以用-ssh-key，具体教程网上很多\"><a href=\"#对于-ssh-协议，可以用-ssh-key，具体教程网上很多\" class=\"headerlink\" title=\"对于 ssh 协议，可以用 ssh key，具体教程网上很多\"></a>对于 ssh 协议，可以用 ssh key，具体教程网上很多</h4><h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>git 中执行命令 <code>add .</code><br>报错：Unlink of file ‘templates/opms.exe’ failed.Should I try again?(y/n)</p>\n<p>因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 <code>.exe</code> 文件，我们是不需要添加到版本管理工具的。所以我们选择 <code>n</code> 。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>git 中生成 sshkey: <code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>这个<code>email</code>并没有什么用<br>所以我们使用<code>ssh-keygen -t rsa</code>来生成sshkey就可以了。<br>然后git中的配置文件：<br><code>git config --list</code><br><code>git config --global user.name &quot;yu&quot;</code><br><code>git config --global user.email &quot;react.dong.yu@gmail.com&quot;</code><br>这种配置将会对本地所有的git仓库有效。<br>那么在 push 的时候，远程就知道这个push来自于哪个email.<br>但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。<br>这个时候就可以不设置global的配置了，而是在自己的仓库中设置<br><code>git config --local user.email &quot;react.dong.yu@gmail.com&quot;</code></p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。<br>有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：<br><code>git add App.class</code><br>如果你确实想添加该文件，可以用 -f 制添加到 git：<br><code>git add -f App.class</code><br>或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。<br>可以用 <code>git check-ignore</code> 命令检查：<br><code>git check-ignore -v App.class</code></p>\n<h3 id=\"问题四\"><a href=\"#问题四\" class=\"headerlink\" title=\"问题四\"></a>问题四</h3><p>为什么我把我生成的 ssh key 添加到了 github 中<br>然后 也 remote 了 <code>https://github.com/nigelyao/Xxx.git</code><br>为什么提交的时候报错，或者提示 输入密码账号是为什么</p>\n<p>ssh key 是 ssh 协议的密钥，http 协议没权限</p>\n<h3 id=\"问题五\"><a href=\"#问题五\" class=\"headerlink\" title=\"问题五\"></a>问题五</h3><p>git怎样删除未监视的文件 untracked files?<br>用 git clean<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除 untracked files</span><br><span class=\"line\">git clean -f</span><br><span class=\"line\"> </span><br><span class=\"line\"># 连 untracked 的目录也一起删掉</span><br><span class=\"line\">git clean -fd</span><br><span class=\"line\"> </span><br><span class=\"line\"># 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）</span><br><span class=\"line\">git clean -xfd</span><br><span class=\"line\"> </span><br><span class=\"line\"># 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</span><br><span class=\"line\">git clean -nxfd</span><br><span class=\"line\">git clean -nf</span><br><span class=\"line\">git clean -nfd</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"我的常用命令\"><a href=\"#我的常用命令\" class=\"headerlink\" title=\"我的常用命令\"></a>我的常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -avv</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">权威教程</a><br><a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"noopener\">Pro Git 简体中文版</a></p>"},{"title":"Hexo-NexT搭建个人博客（五）","date":"2018-07-15T15:25:24.000Z","comments":0,"_content":"\n在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【[传送门](/categories/Hexo/)】\n\n本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。\n\n# 文章封面\n\n文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。\n\n如果想添加文章封面的话，需要添加一个字段属性：`summary_img`，`summary_img` 的值是图片的路径。\n\n<!-- more -->\n\n例如：\n```\n---\ntitle: CSS 各种Hack手段\ndate: 2018-06-25 03:25:24\ncategories: 前端\ntags: [CSS]\ncomments: false\nsummary_img: /images/css-hack-1.png\n---\n```\n\n具体实现细节如下：\n修改 `\\themes\\next\\layout\\_macro\\post.swing` 文件。\n将代码：\n```\n{% if post.summary_img  %}\n  <div class=\"out-img-topic\">\n    <img src={{ post.summary_img }} class=\"img-topic\">\n  </div>\n{% endif %}\n```\n添加到下图所示的位置\n\n![](/images/hexo-next-five-1.png)\n\n这样的话，就可以使用 `summary_img: imageurl` 来设置文章封面了。\n\n开启了文章封面的文章，我建议将 `<!-- more -->` 放在文章内容的开头，像这样：\n\n![](/images/hexo-next-five-2.png)\n\n\n\n# 网页加载进度条\n\n打开 `/themes/next/layout/_partials/head.swing` 文件，在文件末尾添加如下代码：\n```\n<!-- 网页加载条 -->\n<script src=\"https://nigelyao.github.io/js/src/pace.min.js\"></script>\n```\n\n然后，打开 `/themes/source/css/_custom/custom.styl` 文件，在文件末尾添加如下代码：\n```\n/*网页加载条*/\n/* This is a compiled file, you should be editing the file in the templates directory */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n.pace-inactive {\n  display: none;\n}\n\n.pace .pace-progress {\n  background: #1e92fb;\n  position: fixed;\n  z-index: 2000;\n  top: 0;\n  right: 100%;\n  width: 100%;\n  height: 3px;\n}\n\n.pace .pace-progress-inner {\n  display: block;\n  position: absolute;\n  right: 0px;\n  width: 100px;\n  height: 100%;\n  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;\n  opacity: 1.0;\n  -webkit-transform: rotate(3deg) translate(0px, -4px);\n  -moz-transform: rotate(3deg) translate(0px, -4px);\n  -ms-transform: rotate(3deg) translate(0px, -4px);\n  -o-transform: rotate(3deg) translate(0px, -4px);\n  transform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n  display: block;\n  position: fixed;\n  z-index: 2000;\n  top: 15px;\n  right: 15px;\n  width: 14px;\n  height: 14px;\n  border: solid 2px transparent;\n  border-top-color: #e90f92;\n  border-left-color: #e90f92;\n  border-radius: 10px;\n  -webkit-animation: pace-spinner 400ms linear infinite;\n  -moz-animation: pace-spinner 400ms linear infinite;\n  -ms-animation: pace-spinner 400ms linear infinite;\n  -o-animation: pace-spinner 400ms linear infinite;\n  animation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n  0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n  0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n  0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n  0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n  0% { transform: rotate(0deg); transform: rotate(0deg); }\n  100% { transform: rotate(360deg); transform: rotate(360deg); }\n}\n/*网页加载条 END*/\n```\n\n# 开发环境自动刷新\n在 [Hexo-NexT搭建个人博客（一）](/2016/09/03/hexo-next-one/) 已经提到了本地调试三部曲：\n```\nhexo clean\nhexo generate\nhexo server --debug\n```\n然后我在项目的 `package.json` 中配成了这样：\n```\n\"dev\": \"hexo clean && hexo generate && hexo server --debug\",\n```\n这样的话，我执行 `npm run dev` 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。\n为什么可以这样写，详情看这里：\n[npm 全面介绍](/2018/04/10/npm/)\n[npm 的一个小细节](/2018/05/20/npm-two/)\n\n这样还不爽，我希望在写博客的时候，按下 `Ctrl + S` 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。\n具体的做法是:\n在项目的根目录下添加一个 `gulpfile.js` 文件，文件内容参看 [源码](https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js)，这里我就不贴了。\n然后安装 `gulpfile.js` 里面的依赖包。\n\n`gulpfile.js` 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。\n\n最后，我们的开发步骤就变成这样了：\n先打开一个 Terminal ，使用 `npm run dev` 开启本地的博客服务。\n然后再开一个 Terminal，使用 `gulp` 命令来开启监听和代理服务。\n\n\n# 代码压缩\n在项目的根目录下，执行以下命令：\n```\ncnpm install gulp -g\ncnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev\n```\n\n然后在 `gulpfile.js` 里面写上相关代码，详情查看 [源码](https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js) 。\n\n然后执行 `gulp min` 就会根据 `gulpfile.js` 中的配置，对 public 目录中的静态资源文件进行压缩。\n\n鼠标右键 -> 查看网页源代码，可以看到已经是压缩过的。\n\n# 自定义页面与目录\n下面介绍两种方法：\n\n第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。\n\n![](/images/hexo-next-five-3.png)\n\n具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：\n```\nskip_render: projects/**\n```\n\n匹配规则是一种类似正则的规则，官方给出的参考是[这个](https://github.com/isaacs/node-glob)。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。\n\n第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：\n\n```\n---\nlayout: false\n---\n```\n　　\n这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。\n\n\n# 关于 categories 和 tags 页面 Cannot GET  的解决方案\n有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。\n![](/images/hexo-next-five-4.png)\n\n其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。\n![](/images/hexo-next-five-5.png)","source":"_posts/hexo-next-five.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（五）\ndate: 2018-07-15 23:25:24\ncategories: Hexo\ntags: [Hexo, Next]\ncomments: false\n---\n\n在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【[传送门](/categories/Hexo/)】\n\n本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。\n\n# 文章封面\n\n文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。\n\n如果想添加文章封面的话，需要添加一个字段属性：`summary_img`，`summary_img` 的值是图片的路径。\n\n<!-- more -->\n\n例如：\n```\n---\ntitle: CSS 各种Hack手段\ndate: 2018-06-25 03:25:24\ncategories: 前端\ntags: [CSS]\ncomments: false\nsummary_img: /images/css-hack-1.png\n---\n```\n\n具体实现细节如下：\n修改 `\\themes\\next\\layout\\_macro\\post.swing` 文件。\n将代码：\n```\n{% if post.summary_img  %}\n  <div class=\"out-img-topic\">\n    <img src={{ post.summary_img }} class=\"img-topic\">\n  </div>\n{% endif %}\n```\n添加到下图所示的位置\n\n![](/images/hexo-next-five-1.png)\n\n这样的话，就可以使用 `summary_img: imageurl` 来设置文章封面了。\n\n开启了文章封面的文章，我建议将 `<!-- more -->` 放在文章内容的开头，像这样：\n\n![](/images/hexo-next-five-2.png)\n\n\n\n# 网页加载进度条\n\n打开 `/themes/next/layout/_partials/head.swing` 文件，在文件末尾添加如下代码：\n```\n<!-- 网页加载条 -->\n<script src=\"https://nigelyao.github.io/js/src/pace.min.js\"></script>\n```\n\n然后，打开 `/themes/source/css/_custom/custom.styl` 文件，在文件末尾添加如下代码：\n```\n/*网页加载条*/\n/* This is a compiled file, you should be editing the file in the templates directory */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n.pace-inactive {\n  display: none;\n}\n\n.pace .pace-progress {\n  background: #1e92fb;\n  position: fixed;\n  z-index: 2000;\n  top: 0;\n  right: 100%;\n  width: 100%;\n  height: 3px;\n}\n\n.pace .pace-progress-inner {\n  display: block;\n  position: absolute;\n  right: 0px;\n  width: 100px;\n  height: 100%;\n  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;\n  opacity: 1.0;\n  -webkit-transform: rotate(3deg) translate(0px, -4px);\n  -moz-transform: rotate(3deg) translate(0px, -4px);\n  -ms-transform: rotate(3deg) translate(0px, -4px);\n  -o-transform: rotate(3deg) translate(0px, -4px);\n  transform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n  display: block;\n  position: fixed;\n  z-index: 2000;\n  top: 15px;\n  right: 15px;\n  width: 14px;\n  height: 14px;\n  border: solid 2px transparent;\n  border-top-color: #e90f92;\n  border-left-color: #e90f92;\n  border-radius: 10px;\n  -webkit-animation: pace-spinner 400ms linear infinite;\n  -moz-animation: pace-spinner 400ms linear infinite;\n  -ms-animation: pace-spinner 400ms linear infinite;\n  -o-animation: pace-spinner 400ms linear infinite;\n  animation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n  0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n  0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n  0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n  0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n  100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n  0% { transform: rotate(0deg); transform: rotate(0deg); }\n  100% { transform: rotate(360deg); transform: rotate(360deg); }\n}\n/*网页加载条 END*/\n```\n\n# 开发环境自动刷新\n在 [Hexo-NexT搭建个人博客（一）](/2016/09/03/hexo-next-one/) 已经提到了本地调试三部曲：\n```\nhexo clean\nhexo generate\nhexo server --debug\n```\n然后我在项目的 `package.json` 中配成了这样：\n```\n\"dev\": \"hexo clean && hexo generate && hexo server --debug\",\n```\n这样的话，我执行 `npm run dev` 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。\n为什么可以这样写，详情看这里：\n[npm 全面介绍](/2018/04/10/npm/)\n[npm 的一个小细节](/2018/05/20/npm-two/)\n\n这样还不爽，我希望在写博客的时候，按下 `Ctrl + S` 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。\n具体的做法是:\n在项目的根目录下添加一个 `gulpfile.js` 文件，文件内容参看 [源码](https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js)，这里我就不贴了。\n然后安装 `gulpfile.js` 里面的依赖包。\n\n`gulpfile.js` 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。\n\n最后，我们的开发步骤就变成这样了：\n先打开一个 Terminal ，使用 `npm run dev` 开启本地的博客服务。\n然后再开一个 Terminal，使用 `gulp` 命令来开启监听和代理服务。\n\n\n# 代码压缩\n在项目的根目录下，执行以下命令：\n```\ncnpm install gulp -g\ncnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev\n```\n\n然后在 `gulpfile.js` 里面写上相关代码，详情查看 [源码](https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js) 。\n\n然后执行 `gulp min` 就会根据 `gulpfile.js` 中的配置，对 public 目录中的静态资源文件进行压缩。\n\n鼠标右键 -> 查看网页源代码，可以看到已经是压缩过的。\n\n# 自定义页面与目录\n下面介绍两种方法：\n\n第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。\n\n![](/images/hexo-next-five-3.png)\n\n具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：\n```\nskip_render: projects/**\n```\n\n匹配规则是一种类似正则的规则，官方给出的参考是[这个](https://github.com/isaacs/node-glob)。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。\n\n第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：\n\n```\n---\nlayout: false\n---\n```\n　　\n这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。\n\n\n# 关于 categories 和 tags 页面 Cannot GET  的解决方案\n有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。\n![](/images/hexo-next-five-4.png)\n\n其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。\n![](/images/hexo-next-five-5.png)","slug":"hexo-next-five","published":1,"updated":"2019-08-15T07:19:16.884Z","_id":"cjzccpcys000ez4v5f0ph1mx6","layout":"post","photos":[],"link":"","content":"<p>在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【<a href=\"/categories/Hexo/\">传送门</a>】</p>\n<p>本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。</p>\n<h1 id=\"文章封面\"><a href=\"#文章封面\" class=\"headerlink\" title=\"文章封面\"></a>文章封面</h1><p>文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。</p>\n<p>如果想添加文章封面的话，需要添加一个字段属性：<code>summary_img</code>，<code>summary_img</code> 的值是图片的路径。</p>\n<a id=\"more\"></a>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CSS 各种Hack手段</span><br><span class=\"line\">date: 2018-06-25 03:25:24</span><br><span class=\"line\">categories: 前端</span><br><span class=\"line\">tags: [CSS]</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">summary_img: /images/css-hack-1.png</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>具体实现细节如下：<br>修改 <code>\\themes\\next\\layout\\_macro\\post.swing</code> 文件。<br>将代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.summary_img  %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加到下图所示的位置</p>\n<p><img src=\"/images/hexo-next-five-1.png\" alt=\"\"></p>\n<p>这样的话，就可以使用 <code>summary_img: imageurl</code> 来设置文章封面了。</p>\n<p>开启了文章封面的文章，我建议将 <code>&lt;!-- more --&gt;</code> 放在文章内容的开头，像这样：</p>\n<p><img src=\"/images/hexo-next-five-2.png\" alt=\"\"></p>\n<h1 id=\"网页加载进度条\"><a href=\"#网页加载进度条\" class=\"headerlink\" title=\"网页加载进度条\"></a>网页加载进度条</h1><p>打开 <code>/themes/next/layout/_partials/head.swing</code> 文件，在文件末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 网页加载条 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://nigelyao.github.io/js/src/pace.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，打开 <code>/themes/source/css/_custom/custom.styl</code> 文件，在文件末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*网页加载条*/</span><br><span class=\"line\">/* This is a compiled file, you should be editing the file in the templates directory */</span><br><span class=\"line\">.pace &#123;</span><br><span class=\"line\">  -webkit-pointer-events: none;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  -webkit-user-select: none;</span><br><span class=\"line\">  -moz-user-select: none;</span><br><span class=\"line\">  user-select: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace-inactive &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-progress &#123;</span><br><span class=\"line\">  background: #1e92fb;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  z-index: 2000;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  right: 100%;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 3px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-progress-inner &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  right: 0px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;</span><br><span class=\"line\">  opacity: 1.0;</span><br><span class=\"line\">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-activity &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  z-index: 2000;</span><br><span class=\"line\">  top: 15px;</span><br><span class=\"line\">  right: 15px;</span><br><span class=\"line\">  width: 14px;</span><br><span class=\"line\">  height: 14px;</span><br><span class=\"line\">  border: solid 2px transparent;</span><br><span class=\"line\">  border-top-color: #e90f92;</span><br><span class=\"line\">  border-left-color: #e90f92;</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-webkit-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-moz-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-o-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-ms-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*网页加载条 END*/</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"开发环境自动刷新\"><a href=\"#开发环境自动刷新\" class=\"headerlink\" title=\"开发环境自动刷新\"></a>开发环境自动刷新</h1><p>在 <a href=\"/2016/09/03/hexo-next-one/\">Hexo-NexT搭建个人博客（一）</a> 已经提到了本地调试三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server --debug</span><br></pre></td></tr></table></figure></p>\n<p>然后我在项目的 <code>package.json</code> 中配成了这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，我执行 <code>npm run dev</code> 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。<br>为什么可以这样写，详情看这里：<br><a href=\"/2018/04/10/npm/\">npm 全面介绍</a><br><a href=\"/2018/05/20/npm-two/\">npm 的一个小细节</a></p>\n<p>这样还不爽，我希望在写博客的时候，按下 <code>Ctrl + S</code> 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。<br>具体的做法是:<br>在项目的根目录下添加一个 <code>gulpfile.js</code> 文件，文件内容参看 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js\" target=\"_blank\" rel=\"noopener\">源码</a>，这里我就不贴了。<br>然后安装 <code>gulpfile.js</code> 里面的依赖包。</p>\n<p><code>gulpfile.js</code> 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。</p>\n<p>最后，我们的开发步骤就变成这样了：<br>先打开一个 Terminal ，使用 <code>npm run dev</code> 开启本地的博客服务。<br>然后再开一个 Terminal，使用 <code>gulp</code> 命令来开启监听和代理服务。</p>\n<h1 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h1><p>在项目的根目录下，执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp -g</span><br><span class=\"line\">cnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>然后在 <code>gulpfile.js</code> 里面写上相关代码，详情查看 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js\" target=\"_blank\" rel=\"noopener\">源码</a> 。</p>\n<p>然后执行 <code>gulp min</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>\n<p>鼠标右键 -&gt; 查看网页源代码，可以看到已经是压缩过的。</p>\n<h1 id=\"自定义页面与目录\"><a href=\"#自定义页面与目录\" class=\"headerlink\" title=\"自定义页面与目录\"></a>自定义页面与目录</h1><p>下面介绍两种方法：</p>\n<p>第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。</p>\n<p><img src=\"/images/hexo-next-five-3.png\" alt=\"\"></p>\n<p>具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: projects/**</span><br></pre></td></tr></table></figure></p>\n<p>匹配规则是一种类似正则的规则，官方给出的参考是<a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"noopener\">这个</a>。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。</p>\n<p>第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>　　<br>这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。</p>\n<h1 id=\"关于-categories-和-tags-页面-Cannot-GET-的解决方案\"><a href=\"#关于-categories-和-tags-页面-Cannot-GET-的解决方案\" class=\"headerlink\" title=\"关于 categories 和 tags 页面 Cannot GET  的解决方案\"></a>关于 categories 和 tags 页面 Cannot GET  的解决方案</h1><p>有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。<br><img src=\"/images/hexo-next-five-4.png\" alt=\"\"></p>\n<p>其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。<br><img src=\"/images/hexo-next-five-5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【<a href=\"/categories/Hexo/\">传送门</a>】</p>\n<p>本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。</p>\n<h1 id=\"文章封面\"><a href=\"#文章封面\" class=\"headerlink\" title=\"文章封面\"></a>文章封面</h1><p>文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。</p>\n<p>如果想添加文章封面的话，需要添加一个字段属性：<code>summary_img</code>，<code>summary_img</code> 的值是图片的路径。</p>","more":"<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: CSS 各种Hack手段</span><br><span class=\"line\">date: 2018-06-25 03:25:24</span><br><span class=\"line\">categories: 前端</span><br><span class=\"line\">tags: [CSS]</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">summary_img: /images/css-hack-1.png</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>具体实现细节如下：<br>修改 <code>\\themes\\next\\layout\\_macro\\post.swing</code> 文件。<br>将代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.summary_img  %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加到下图所示的位置</p>\n<p><img src=\"/images/hexo-next-five-1.png\" alt=\"\"></p>\n<p>这样的话，就可以使用 <code>summary_img: imageurl</code> 来设置文章封面了。</p>\n<p>开启了文章封面的文章，我建议将 <code>&lt;!-- more --&gt;</code> 放在文章内容的开头，像这样：</p>\n<p><img src=\"/images/hexo-next-five-2.png\" alt=\"\"></p>\n<h1 id=\"网页加载进度条\"><a href=\"#网页加载进度条\" class=\"headerlink\" title=\"网页加载进度条\"></a>网页加载进度条</h1><p>打开 <code>/themes/next/layout/_partials/head.swing</code> 文件，在文件末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 网页加载条 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://nigelyao.github.io/js/src/pace.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，打开 <code>/themes/source/css/_custom/custom.styl</code> 文件，在文件末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*网页加载条*/</span><br><span class=\"line\">/* This is a compiled file, you should be editing the file in the templates directory */</span><br><span class=\"line\">.pace &#123;</span><br><span class=\"line\">  -webkit-pointer-events: none;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">  -webkit-user-select: none;</span><br><span class=\"line\">  -moz-user-select: none;</span><br><span class=\"line\">  user-select: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace-inactive &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-progress &#123;</span><br><span class=\"line\">  background: #1e92fb;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  z-index: 2000;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  right: 100%;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 3px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-progress-inner &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  right: 0px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;</span><br><span class=\"line\">  opacity: 1.0;</span><br><span class=\"line\">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.pace .pace-activity &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  z-index: 2000;</span><br><span class=\"line\">  top: 15px;</span><br><span class=\"line\">  right: 15px;</span><br><span class=\"line\">  width: 14px;</span><br><span class=\"line\">  height: 14px;</span><br><span class=\"line\">  border: solid 2px transparent;</span><br><span class=\"line\">  border-top-color: #e90f92;</span><br><span class=\"line\">  border-left-color: #e90f92;</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">  animation: pace-spinner 400ms linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-webkit-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-moz-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-o-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-ms-keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes pace-spinner &#123;</span><br><span class=\"line\">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class=\"line\">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*网页加载条 END*/</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"开发环境自动刷新\"><a href=\"#开发环境自动刷新\" class=\"headerlink\" title=\"开发环境自动刷新\"></a>开发环境自动刷新</h1><p>在 <a href=\"/2016/09/03/hexo-next-one/\">Hexo-NexT搭建个人博客（一）</a> 已经提到了本地调试三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server --debug</span><br></pre></td></tr></table></figure></p>\n<p>然后我在项目的 <code>package.json</code> 中配成了这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，我执行 <code>npm run dev</code> 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。<br>为什么可以这样写，详情看这里：<br><a href=\"/2018/04/10/npm/\">npm 全面介绍</a><br><a href=\"/2018/05/20/npm-two/\">npm 的一个小细节</a></p>\n<p>这样还不爽，我希望在写博客的时候，按下 <code>Ctrl + S</code> 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。<br>具体的做法是:<br>在项目的根目录下添加一个 <code>gulpfile.js</code> 文件，文件内容参看 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js\" target=\"_blank\" rel=\"noopener\">源码</a>，这里我就不贴了。<br>然后安装 <code>gulpfile.js</code> 里面的依赖包。</p>\n<p><code>gulpfile.js</code> 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。</p>\n<p>最后，我们的开发步骤就变成这样了：<br>先打开一个 Terminal ，使用 <code>npm run dev</code> 开启本地的博客服务。<br>然后再开一个 Terminal，使用 <code>gulp</code> 命令来开启监听和代理服务。</p>\n<h1 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h1><p>在项目的根目录下，执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp -g</span><br><span class=\"line\">cnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>然后在 <code>gulpfile.js</code> 里面写上相关代码，详情查看 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/resource/gulpfile.js\" target=\"_blank\" rel=\"noopener\">源码</a> 。</p>\n<p>然后执行 <code>gulp min</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>\n<p>鼠标右键 -&gt; 查看网页源代码，可以看到已经是压缩过的。</p>\n<h1 id=\"自定义页面与目录\"><a href=\"#自定义页面与目录\" class=\"headerlink\" title=\"自定义页面与目录\"></a>自定义页面与目录</h1><p>下面介绍两种方法：</p>\n<p>第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。</p>\n<p><img src=\"/images/hexo-next-five-3.png\" alt=\"\"></p>\n<p>具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: projects/**</span><br></pre></td></tr></table></figure></p>\n<p>匹配规则是一种类似正则的规则，官方给出的参考是<a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"noopener\">这个</a>。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。</p>\n<p>第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>　　<br>这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。</p>\n<h1 id=\"关于-categories-和-tags-页面-Cannot-GET-的解决方案\"><a href=\"#关于-categories-和-tags-页面-Cannot-GET-的解决方案\" class=\"headerlink\" title=\"关于 categories 和 tags 页面 Cannot GET  的解决方案\"></a>关于 categories 和 tags 页面 Cannot GET  的解决方案</h1><p>有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。<br><img src=\"/images/hexo-next-five-4.png\" alt=\"\"></p>\n<p>其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。<br><img src=\"/images/hexo-next-five-5.png\" alt=\"\"></p>"},{"title":"gulp 详解与使用","date":"2018-04-30T17:25:24.000Z","comments":0,"summary_img":null,"_content":"\n# 什么是 gulp\n[gulp](http://gulpjs.com/) 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。\n\n# 为什么要用 gulp\n与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，[API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)（[中文 API](http://www.gulpjs.com.cn/docs/api/)） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 [stream](https://nodejs.org/api/stream.html) 来读取和操作数据，其速度更快。\ngulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。\n\n# 如何使用 gulp\n## Installing Gulp\n新版的 gulp 命令行工具已经改名为 gulp-cli 。\n如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令\n `npm rm --global gulp` ，将之前的全局 gulp 卸掉。\n\n<!-- more -->\n\n### Install the gulp command \n``` bash\nnpm install --global gulp-cli\n```\n\n### Install gulp in your devDependencies\nRun this command in your project directory\n``` bash\nnpm install --save-dev gulp\n```\n\n## Create a gulpfile\nCreate a file called gulpfile.js in your project root with these contents:\n``` javascript\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // place code for your default tash here\n});\n```\n\n## Test it out\nRun the gulp command in your projct directory:\n``` bash\ngulp\n```\n\n# gulp API\ngulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。\n[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n[gulp API 中文](http://www.gulpjs.com.cn/docs/api/)\n\n下面详细介绍一下：\n\n## gulp.src()\ngulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 [stream](https://nodejs.org/api/stream.html) 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：\n``` javascript\ngulp.src(globs [, options])\n```\ngulp 用到的 glob 的匹配规则以及一些文件匹配技巧。\ngulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：\n\n- `*` 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾\n- ** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。\n- ? 匹配文件路径中的一个字符（不会匹配路径分隔符）\n- [...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。\n- !(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的\n- ?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?\n- +(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+\n- `*(pattern|pattern|pattern)` 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 `(pattern|pattern|pattern)*`\n- @(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)\n\n下面以一系列例子来加深理解\n- `*` 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js\n- `*.*` 能匹配 a.js 、 style.css 、 a.b 、 x.y\n- `*/*/*.js` 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js\n- ** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件\n- **/*.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js\n- a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z\n- `a/**b/z` 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录\n- ?.js 能匹配 a.js 、 b.js 、 c.js\n- a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符\n- [xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符\n- [^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js\n\n当有多种匹配模式时可以使用数组\n``` javascript\n// 使用数组的方式来匹配多种文件\ngulp.src(['js/*.js','css/*.css','*.html'])\n```\n使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式\n``` javascript\ngulp.src([*.js,'!b*.js'])  //匹配所有 js 文件，但排除掉以 b 开头的 js 文件\ngulp.src(['!b*.js',*.js])  //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中\n```\n此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：\n\n- a{b,c}d 会展开为 abd 、 acd\n- a{b,}c 会展开为 abc 、 ac\n- a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d \n- a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg\n- a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg\n\n## gulp.dest()\ngulp.dest() 方法是用来写文件的，其语法为：\n``` javascript\ngulp.dest(path[, options])\n```\n**path** 为写入文件的路径\n我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：\n``` javascript\nvar gulp = require(\"gulp\");\ngulp.src(\"script/jquery.js\").pipe(gulp.dest(\"dist/foo.js\"));\n// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js\n```\n要想改变文件名，可以使用插件 gulp-rename\n下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。\ngulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：\n``` javascript\nvar gulp = require(\"gulp\");\n//有通配符开始出现的那部分路径为 **/*.js\ngulp.src(\"script/**/*.js\").pipe(gulp.dest(\"dist\"));\n//最后生成的文件路径为 dist/**/*.js\n//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js\n```\n再举更多一点的例子\n``` javascript\ngulp.src(\"script/avalon/avalon.js\").pipe(gulp.dest(\"dist\"));\n//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js\n\ngulp.src(\"script/**/underscore.js\").pipe(gulp.dest(\"dist\"));\n//有通配符开始出现的那部分路径为 **/underscore.js\n//假设匹配到的文件为script/util/underscore.js\n//则最后生成的文件路径为dist/util/underscore.js\n\ngulp.src(\"script/*\").pipe(gulp.dest(\"dist\"));\n//有通配符出现的那部分路径为*\n//假设匹配到的文件为script/zepto.js\n//则最后生成的文件路径为dist/zepto.js\n```\n通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。\n当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：\n``` javascript\ngulp.src(\"app/src/**/*.css\") //此时base的值为 app/src\n```\n上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。\n``` javascript\ngulp.src(\"app/src/**/*.css\").pipe(gulp.dest(\"dist\"));\n//此时base的值为app/src，也就是说它的base路径为app/src\n//设该模式匹配到了文件app/src/css/normal.css\n//用dist替换掉base路径，最终得到dist/css/normal.css\n```\n所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变\n``` javascript\ngulp.src(\"script/lib/*.js\").pipe(gulp.dest(\"build\"));\n//没有配置base参数，此时默认的base路径为script/lib\n//假设匹配到的文件为script/lib/jquery.js\n//生成的文件路径为build/jquery.js\n\ngulp.src(\"script/lib/*.js\", {base: \"script\"}).pipe(gulp.dest(\"build\"));\n//配置了base参数，此时base路径为script\n//假设匹配到的文件为script/lib/jquery.js\n//此时生成的文件路径为build/lib/jquery.js\n```\n用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。\n\n## gulp.task()\ngulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：\n``` javascript\ngulp.task(name[, deps], fn)\n```\n**name** 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。\n**deps** 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。\n**fn** 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。\n``` javascript\ngulp.task(\"mytask\", [\"array\", \"of\", \"task\", \"names\"], function() {\n  //定义一个有依赖的任务\n  // Do something\n});\n```\n关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。\ngulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：\n``` javascript\n//只要执行default任务，就相当于把one,two,three这三个任务执行了\ngulp.task('default',['one','two','three']);\n```\n如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。\n但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：\n``` javascript\ngulp.task('one', function(){\n  // one是一个异步执行的任务\n  setTimeout(function(){\n    console.log(\"one is done\");\n  },3000);\n});\n\n//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n![](/images/gulp-1.png)\n上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。\n\n那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？\n有三种方法可以实现：\n\n第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。\n``` javascript\ngulp.task(\"one\", function(cb) {\n  //cb为任务函数提供的回调，用来通知任务已经完成\n  //one是一个异步执行的任务\n  setTimeout(function(){\n    console.log(\"one is done\");\n    cb(); //执行回调，表示这个异步任务已经完成\n  },5000);\n});\n\n//这时two任务会在one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n\n第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。\n``` javascript\ngulp.task(\"one\", function(cb) {\n  var stream = gulp.src(\"client/**/*.js\")\n      .pipe(dosomething()) //dosomething()中有某些异步操作\n      .pipe(gulp.dest(\"build\"));\n  return stream;\n});\n\n// 这是two任务会在one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n\n第三：返回一个 promise 对象，例如：\n``` javascript\nvar Q = require('q'); //一个著名的异步处理的库 https://github.com/kriskowal/q\ngulp.task(\"one\", function(cb){\n  var deferred = Q.defer();\n  //做一些异步操作\n  setTimeout(function(){\n    deferred.resolve();\n  },5000);\n  return deferred.promise;\n});\n\ngulp.task(\"two\", [\"one\"], function() {\n  console.log(\"two is done\");\n});\n```\n关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。\n\n## gulp.watch()\ngulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：\n``` javascript\ngulp.watch(glob[, opts], tasks);\n```\n**glob** 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。\n**opts** 为一个可选的配置对象，通常不需要用到。\n**tasks** 为文件变化后要执行的任务，为一个数组\n``` javascript\ngulp.task(\"uglify\", function() {\n  //do something\n});\ngulp.task(\"reload\", function() {\n  //do something\n});\ngulp.watch(\"js/**/*.js\", [\"uglify\",\"reload\"]);\n```\ngulp.watch(glob [,opts, cb])\n**glob** 和 **opts** 参数与第一种用法相同\n**cb** 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径\n``` javascript\ngulp.watch(\"js/**/*.js\", function(event){\n  console.log(event.type); //变化类型added为新增，deleted为删除，changed为改变\n  console.log(event.path); //变化的文件的路径\n});\n```\n\n# gulp 的插件\ngulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 [插件页面](http://gulpjs.com/plugins/) 或者在 npm 搜索 gulpplugin 。\n列一些很棒的 plugin ：\n- [JSHint](https://www.npmjs.com/package/gulp-jshint/) ： js代码检查分析工具\n- [gulp-coffee](https://www.npmjs.com/package/gulp-coffee/) ： 编译CoffeeScript\n- [gulp-mocha](https://www.npmjs.com/package/gulp-mocha) ： 执行Mocha测试\n- [gulp-bump](https://www.npmjs.com/package/gulp-bump) ： 更新版本号\n- [gulp-sass](https://www.npmjs.com/package/gulp-sass) ： sass 编译\n- [browser-sync](http://www.browsersync.cn/docs/gulp/) ： 浏览器自动刷新\n- [gulp-uglify](https://www.npmjs.com/package/gulp-uglify) ： 代码压缩\n- [gulp-concat](https://www.npmjs.com/package/gulp-concat) ： 合并\n- [gulp-eslint](https://www.npmjs.com/package/gulp-eslint) ： 支持 ES6 JSX\n\n# gulp 命令行参数\n- `-v` 或 `--version` 会显示全局和项目本地所安装的 gulp 版本号\n- `--require <module path>` 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 `--require`\n- `--gulpfile <gulpfile path>` 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录\n- `--cwd <dir path>` 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径\n- `-T` 或 `--tasks` 会显示所指定 gulpfile 的 task 依赖树\n- `--tasks-simple` 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表\n- `--color` 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持\n- `--no-color` 强制不显示颜色，即便检测到有颜色支持\n- `--silent` 禁止所有的 gulp 日志\n\n\n命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。\n\n# tip\n\n1、gulp 写进项目 package.json 文件的依赖有什么作用\n方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。\n\n2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。\n\n\n\n\n\n\n","source":"_posts/gulp.md","raw":"---\ntitle: gulp 详解与使用\ndate: 2018-05-01 01:25:24\ncategories: 前端\ntags: [gulp]\ncomments: false\nsummary_img: \n---\n\n# 什么是 gulp\n[gulp](http://gulpjs.com/) 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。\n\n# 为什么要用 gulp\n与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，[API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)（[中文 API](http://www.gulpjs.com.cn/docs/api/)） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 [stream](https://nodejs.org/api/stream.html) 来读取和操作数据，其速度更快。\ngulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。\n\n# 如何使用 gulp\n## Installing Gulp\n新版的 gulp 命令行工具已经改名为 gulp-cli 。\n如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令\n `npm rm --global gulp` ，将之前的全局 gulp 卸掉。\n\n<!-- more -->\n\n### Install the gulp command \n``` bash\nnpm install --global gulp-cli\n```\n\n### Install gulp in your devDependencies\nRun this command in your project directory\n``` bash\nnpm install --save-dev gulp\n```\n\n## Create a gulpfile\nCreate a file called gulpfile.js in your project root with these contents:\n``` javascript\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // place code for your default tash here\n});\n```\n\n## Test it out\nRun the gulp command in your projct directory:\n``` bash\ngulp\n```\n\n# gulp API\ngulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。\n[gulp API](https://github.com/gulpjs/gulp/blob/master/docs/API.md)\n[gulp API 中文](http://www.gulpjs.com.cn/docs/api/)\n\n下面详细介绍一下：\n\n## gulp.src()\ngulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 [stream](https://nodejs.org/api/stream.html) 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：\n``` javascript\ngulp.src(globs [, options])\n```\ngulp 用到的 glob 的匹配规则以及一些文件匹配技巧。\ngulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：\n\n- `*` 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾\n- ** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。\n- ? 匹配文件路径中的一个字符（不会匹配路径分隔符）\n- [...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。\n- !(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的\n- ?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?\n- +(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+\n- `*(pattern|pattern|pattern)` 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 `(pattern|pattern|pattern)*`\n- @(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)\n\n下面以一系列例子来加深理解\n- `*` 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js\n- `*.*` 能匹配 a.js 、 style.css 、 a.b 、 x.y\n- `*/*/*.js` 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js\n- ** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件\n- **/*.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js\n- a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z\n- `a/**b/z` 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录\n- ?.js 能匹配 a.js 、 b.js 、 c.js\n- a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符\n- [xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符\n- [^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js\n\n当有多种匹配模式时可以使用数组\n``` javascript\n// 使用数组的方式来匹配多种文件\ngulp.src(['js/*.js','css/*.css','*.html'])\n```\n使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式\n``` javascript\ngulp.src([*.js,'!b*.js'])  //匹配所有 js 文件，但排除掉以 b 开头的 js 文件\ngulp.src(['!b*.js',*.js])  //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中\n```\n此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：\n\n- a{b,c}d 会展开为 abd 、 acd\n- a{b,}c 会展开为 abc 、 ac\n- a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d \n- a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg\n- a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg\n\n## gulp.dest()\ngulp.dest() 方法是用来写文件的，其语法为：\n``` javascript\ngulp.dest(path[, options])\n```\n**path** 为写入文件的路径\n我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：\n``` javascript\nvar gulp = require(\"gulp\");\ngulp.src(\"script/jquery.js\").pipe(gulp.dest(\"dist/foo.js\"));\n// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js\n```\n要想改变文件名，可以使用插件 gulp-rename\n下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。\ngulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：\n``` javascript\nvar gulp = require(\"gulp\");\n//有通配符开始出现的那部分路径为 **/*.js\ngulp.src(\"script/**/*.js\").pipe(gulp.dest(\"dist\"));\n//最后生成的文件路径为 dist/**/*.js\n//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js\n```\n再举更多一点的例子\n``` javascript\ngulp.src(\"script/avalon/avalon.js\").pipe(gulp.dest(\"dist\"));\n//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js\n\ngulp.src(\"script/**/underscore.js\").pipe(gulp.dest(\"dist\"));\n//有通配符开始出现的那部分路径为 **/underscore.js\n//假设匹配到的文件为script/util/underscore.js\n//则最后生成的文件路径为dist/util/underscore.js\n\ngulp.src(\"script/*\").pipe(gulp.dest(\"dist\"));\n//有通配符出现的那部分路径为*\n//假设匹配到的文件为script/zepto.js\n//则最后生成的文件路径为dist/zepto.js\n```\n通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。\n当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：\n``` javascript\ngulp.src(\"app/src/**/*.css\") //此时base的值为 app/src\n```\n上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。\n``` javascript\ngulp.src(\"app/src/**/*.css\").pipe(gulp.dest(\"dist\"));\n//此时base的值为app/src，也就是说它的base路径为app/src\n//设该模式匹配到了文件app/src/css/normal.css\n//用dist替换掉base路径，最终得到dist/css/normal.css\n```\n所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变\n``` javascript\ngulp.src(\"script/lib/*.js\").pipe(gulp.dest(\"build\"));\n//没有配置base参数，此时默认的base路径为script/lib\n//假设匹配到的文件为script/lib/jquery.js\n//生成的文件路径为build/jquery.js\n\ngulp.src(\"script/lib/*.js\", {base: \"script\"}).pipe(gulp.dest(\"build\"));\n//配置了base参数，此时base路径为script\n//假设匹配到的文件为script/lib/jquery.js\n//此时生成的文件路径为build/lib/jquery.js\n```\n用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。\n\n## gulp.task()\ngulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：\n``` javascript\ngulp.task(name[, deps], fn)\n```\n**name** 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。\n**deps** 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。\n**fn** 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。\n``` javascript\ngulp.task(\"mytask\", [\"array\", \"of\", \"task\", \"names\"], function() {\n  //定义一个有依赖的任务\n  // Do something\n});\n```\n关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。\ngulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：\n``` javascript\n//只要执行default任务，就相当于把one,two,three这三个任务执行了\ngulp.task('default',['one','two','three']);\n```\n如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。\n但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：\n``` javascript\ngulp.task('one', function(){\n  // one是一个异步执行的任务\n  setTimeout(function(){\n    console.log(\"one is done\");\n  },3000);\n});\n\n//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n![](/images/gulp-1.png)\n上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。\n\n那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？\n有三种方法可以实现：\n\n第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。\n``` javascript\ngulp.task(\"one\", function(cb) {\n  //cb为任务函数提供的回调，用来通知任务已经完成\n  //one是一个异步执行的任务\n  setTimeout(function(){\n    console.log(\"one is done\");\n    cb(); //执行回调，表示这个异步任务已经完成\n  },5000);\n});\n\n//这时two任务会在one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n\n第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。\n``` javascript\ngulp.task(\"one\", function(cb) {\n  var stream = gulp.src(\"client/**/*.js\")\n      .pipe(dosomething()) //dosomething()中有某些异步操作\n      .pipe(gulp.dest(\"build\"));\n  return stream;\n});\n\n// 这是two任务会在one任务中的异步操作完成后再执行\ngulp.task(\"two\", [\"one\"], function(){\n  console.log(\"two is done\");\n});\n```\n\n第三：返回一个 promise 对象，例如：\n``` javascript\nvar Q = require('q'); //一个著名的异步处理的库 https://github.com/kriskowal/q\ngulp.task(\"one\", function(cb){\n  var deferred = Q.defer();\n  //做一些异步操作\n  setTimeout(function(){\n    deferred.resolve();\n  },5000);\n  return deferred.promise;\n});\n\ngulp.task(\"two\", [\"one\"], function() {\n  console.log(\"two is done\");\n});\n```\n关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。\n\n## gulp.watch()\ngulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：\n``` javascript\ngulp.watch(glob[, opts], tasks);\n```\n**glob** 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。\n**opts** 为一个可选的配置对象，通常不需要用到。\n**tasks** 为文件变化后要执行的任务，为一个数组\n``` javascript\ngulp.task(\"uglify\", function() {\n  //do something\n});\ngulp.task(\"reload\", function() {\n  //do something\n});\ngulp.watch(\"js/**/*.js\", [\"uglify\",\"reload\"]);\n```\ngulp.watch(glob [,opts, cb])\n**glob** 和 **opts** 参数与第一种用法相同\n**cb** 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径\n``` javascript\ngulp.watch(\"js/**/*.js\", function(event){\n  console.log(event.type); //变化类型added为新增，deleted为删除，changed为改变\n  console.log(event.path); //变化的文件的路径\n});\n```\n\n# gulp 的插件\ngulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 [插件页面](http://gulpjs.com/plugins/) 或者在 npm 搜索 gulpplugin 。\n列一些很棒的 plugin ：\n- [JSHint](https://www.npmjs.com/package/gulp-jshint/) ： js代码检查分析工具\n- [gulp-coffee](https://www.npmjs.com/package/gulp-coffee/) ： 编译CoffeeScript\n- [gulp-mocha](https://www.npmjs.com/package/gulp-mocha) ： 执行Mocha测试\n- [gulp-bump](https://www.npmjs.com/package/gulp-bump) ： 更新版本号\n- [gulp-sass](https://www.npmjs.com/package/gulp-sass) ： sass 编译\n- [browser-sync](http://www.browsersync.cn/docs/gulp/) ： 浏览器自动刷新\n- [gulp-uglify](https://www.npmjs.com/package/gulp-uglify) ： 代码压缩\n- [gulp-concat](https://www.npmjs.com/package/gulp-concat) ： 合并\n- [gulp-eslint](https://www.npmjs.com/package/gulp-eslint) ： 支持 ES6 JSX\n\n# gulp 命令行参数\n- `-v` 或 `--version` 会显示全局和项目本地所安装的 gulp 版本号\n- `--require <module path>` 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 `--require`\n- `--gulpfile <gulpfile path>` 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录\n- `--cwd <dir path>` 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径\n- `-T` 或 `--tasks` 会显示所指定 gulpfile 的 task 依赖树\n- `--tasks-simple` 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表\n- `--color` 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持\n- `--no-color` 强制不显示颜色，即便检测到有颜色支持\n- `--silent` 禁止所有的 gulp 日志\n\n\n命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。\n\n# tip\n\n1、gulp 写进项目 package.json 文件的依赖有什么作用\n方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。\n\n2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。\n\n\n\n\n\n\n","slug":"gulp","published":1,"updated":"2019-08-15T07:19:17.746Z","_id":"cjzccpcyx000iz4v5ybdk7w13","layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是-gulp\"><a href=\"#什么是-gulp\" class=\"headerlink\" title=\"什么是 gulp\"></a>什么是 gulp</h1><p><a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noopener\">gulp</a> 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。</p>\n<h1 id=\"为什么要用-gulp\"><a href=\"#为什么要用-gulp\" class=\"headerlink\" title=\"为什么要用 gulp\"></a>为什么要用 gulp</h1><p>与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">API</a>（<a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">中文 API</a>） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> 来读取和操作数据，其速度更快。<br>gulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。</p>\n<h1 id=\"如何使用-gulp\"><a href=\"#如何使用-gulp\" class=\"headerlink\" title=\"如何使用 gulp\"></a>如何使用 gulp</h1><h2 id=\"Installing-Gulp\"><a href=\"#Installing-Gulp\" class=\"headerlink\" title=\"Installing Gulp\"></a>Installing Gulp</h2><p>新版的 gulp 命令行工具已经改名为 gulp-cli 。<br>如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令<br> <code>npm rm --global gulp</code> ，将之前的全局 gulp 卸掉。</p>\n<a id=\"more\"></a>\n<h3 id=\"Install-the-gulp-command\"><a href=\"#Install-the-gulp-command\" class=\"headerlink\" title=\"Install the gulp command\"></a>Install the gulp command</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global gulp-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-gulp-in-your-devDependencies\"><a href=\"#Install-gulp-in-your-devDependencies\" class=\"headerlink\" title=\"Install gulp in your devDependencies\"></a>Install gulp in your devDependencies</h3><p>Run this command in your project directory<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Create-a-gulpfile\"><a href=\"#Create-a-gulpfile\" class=\"headerlink\" title=\"Create a gulpfile\"></a>Create a gulpfile</h2><p>Create a file called gulpfile.js in your project root with these contents:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// place code for your default tash here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Test-it-out\"><a href=\"#Test-it-out\" class=\"headerlink\" title=\"Test it out\"></a>Test it out</h2><p>Run the gulp command in your projct directory:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"gulp-API\"><a href=\"#gulp-API\" class=\"headerlink\" title=\"gulp API\"></a>gulp API</h1><p>gulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。<br><a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">gulp API</a><br><a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">gulp API 中文</a></p>\n<p>下面详细介绍一下：</p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src()\"></a>gulp.src()</h2><p>gulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(globs [, options])</span><br></pre></td></tr></table></figure></p>\n<p>gulp 用到的 glob 的匹配规则以及一些文件匹配技巧。<br>gulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>\n<ul>\n<li><code>*</code> 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾</li>\n<li>** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>\n<li>? 匹配文件路径中的一个字符（不会匹配路径分隔符）</li>\n<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。</li>\n<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>\n<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?</li>\n<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+</li>\n<li><code>*(pattern|pattern|pattern)</code> 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 <code>(pattern|pattern|pattern)*</code></li>\n<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)</li>\n</ul>\n<p>下面以一系列例子来加深理解</p>\n<ul>\n<li><code>*</code> 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js</li>\n<li><code>*.*</code> 能匹配 a.js 、 style.css 、 a.b 、 x.y</li>\n<li><code>*/*/*.js</code> 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js</li>\n<li>** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件</li>\n<li><em>*/</em>.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js</li>\n<li>a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z</li>\n<li><code>a/**b/z</code> 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录</li>\n<li>?.js 能匹配 a.js 、 b.js 、 c.js</li>\n<li>a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符</li>\n<li>[xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符</li>\n<li>[^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js</li>\n</ul>\n<p>当有多种匹配模式时可以使用数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用数组的方式来匹配多种文件</span></span><br><span class=\"line\">gulp.src([<span class=\"string\">'js/*.js'</span>,<span class=\"string\">'css/*.css'</span>,<span class=\"string\">'*.html'</span>])</span><br></pre></td></tr></table></figure></p>\n<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src([*.js,<span class=\"string\">'!b*.js'</span>])  <span class=\"comment\">//匹配所有 js 文件，但排除掉以 b 开头的 js 文件</span></span><br><span class=\"line\">gulp.src([<span class=\"string\">'!b*.js'</span>,*.js])  <span class=\"comment\">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></span><br></pre></td></tr></table></figure></p>\n<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：</p>\n<ul>\n<li>a{b,c}d 会展开为 abd 、 acd</li>\n<li>a{b,}c 会展开为 abc 、 ac</li>\n<li>a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d </li>\n<li>a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg</li>\n<li>a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg</li>\n</ul>\n<h2 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h2><p>gulp.dest() 方法是用来写文件的，其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure></p>\n<p><strong>path</strong> 为写入文件的路径<br>我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/jquery.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist/foo.js\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js</span></span><br></pre></td></tr></table></figure></p>\n<p>要想改变文件名，可以使用插件 gulp-rename<br>下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。<br>gulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//有通配符开始出现的那部分路径为 **/*.js</span></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/**/*.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//最后生成的文件路径为 dist/**/*.js</span></span><br><span class=\"line\"><span class=\"comment\">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js</span></span><br></pre></td></tr></table></figure></p>\n<p>再举更多一点的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"script/avalon/avalon.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/**/underscore.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//有通配符开始出现的那部分路径为 **/underscore.js</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/util/underscore.js</span></span><br><span class=\"line\"><span class=\"comment\">//则最后生成的文件路径为dist/util/underscore.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/*\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//有通配符出现的那部分路径为*</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/zepto.js</span></span><br><span class=\"line\"><span class=\"comment\">//则最后生成的文件路径为dist/zepto.js</span></span><br></pre></td></tr></table></figure></p>\n<p>通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。<br>当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"app/src/**/*.css\"</span>) <span class=\"comment\">//此时base的值为 app/src</span></span><br></pre></td></tr></table></figure></p>\n<p>上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"app/src/**/*.css\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//此时base的值为app/src，也就是说它的base路径为app/src</span></span><br><span class=\"line\"><span class=\"comment\">//设该模式匹配到了文件app/src/css/normal.css</span></span><br><span class=\"line\"><span class=\"comment\">//用dist替换掉base路径，最终得到dist/css/normal.css</span></span><br></pre></td></tr></table></figure></p>\n<p>所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"script/lib/*.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//没有配置base参数，此时默认的base路径为script/lib</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class=\"line\"><span class=\"comment\">//生成的文件路径为build/jquery.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/lib/*.js\"</span>, &#123;<span class=\"attr\">base</span>: <span class=\"string\">\"script\"</span>&#125;).pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//配置了base参数，此时base路径为script</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class=\"line\"><span class=\"comment\">//此时生成的文件路径为build/lib/jquery.js</span></span><br></pre></td></tr></table></figure></p>\n<p>用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。</p>\n<h2 id=\"gulp-task\"><a href=\"#gulp-task\" class=\"headerlink\" title=\"gulp.task()\"></a>gulp.task()</h2><p>gulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure></p>\n<p><strong>name</strong> 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。<br><strong>fn</strong> 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"mytask\"</span>, [<span class=\"string\">\"array\"</span>, <span class=\"string\">\"of\"</span>, <span class=\"string\">\"task\"</span>, <span class=\"string\">\"names\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义一个有依赖的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。<br>gulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'one'</span>,<span class=\"string\">'two'</span>,<span class=\"string\">'three'</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'one'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// one是一个异步执行的任务</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"one is done\"</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/gulp-1.png\" alt=\"\"><br>上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。</p>\n<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？<br>有三种方法可以实现：</p>\n<p>第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//cb为任务函数提供的回调，用来通知任务已经完成</span></span><br><span class=\"line\">  <span class=\"comment\">//one是一个异步执行的任务</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"one is done\"</span>);</span><br><span class=\"line\">    cb(); <span class=\"comment\">//执行回调，表示这个异步任务已经完成</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时two任务会在one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stream = gulp.src(<span class=\"string\">\"client/**/*.js\"</span>)</span><br><span class=\"line\">      .pipe(dosomething()) <span class=\"comment\">//dosomething()中有某些异步操作</span></span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stream;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是two任务会在one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第三：返回一个 promise 对象，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Q = <span class=\"built_in\">require</span>(<span class=\"string\">'q'</span>); <span class=\"comment\">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> deferred = Q.defer();</span><br><span class=\"line\">  <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    deferred.resolve();</span><br><span class=\"line\">  &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deferred.promise;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。</p>\n<h2 id=\"gulp-watch\"><a href=\"#gulp-watch\" class=\"headerlink\" title=\"gulp.watch()\"></a>gulp.watch()</h2><p>gulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(glob[, opts], tasks);</span><br></pre></td></tr></table></figure></p>\n<p><strong>glob</strong> 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。<br><strong>opts</strong> 为一个可选的配置对象，通常不需要用到。<br><strong>tasks</strong> 为文件变化后要执行的任务，为一个数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"uglify\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">\"reload\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.watch(<span class=\"string\">\"js/**/*.js\"</span>, [<span class=\"string\">\"uglify\"</span>,<span class=\"string\">\"reload\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>gulp.watch(glob [,opts, cb])<br><strong>glob</strong> 和 <strong>opts</strong> 参数与第一种用法相同<br><strong>cb</strong> 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(<span class=\"string\">\"js/**/*.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type); <span class=\"comment\">//变化类型added为新增，deleted为删除，changed为改变</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.path); <span class=\"comment\">//变化的文件的路径</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"gulp-的插件\"><a href=\"#gulp-的插件\" class=\"headerlink\" title=\"gulp 的插件\"></a>gulp 的插件</h1><p>gulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 <a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"noopener\">插件页面</a> 或者在 npm 搜索 gulpplugin 。<br>列一些很棒的 plugin ：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp-jshint/\" target=\"_blank\" rel=\"noopener\">JSHint</a> ： js代码检查分析工具</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-coffee/\" target=\"_blank\" rel=\"noopener\">gulp-coffee</a> ： 编译CoffeeScript</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-mocha\" target=\"_blank\" rel=\"noopener\">gulp-mocha</a> ： 执行Mocha测试</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-bump\" target=\"_blank\" rel=\"noopener\">gulp-bump</a> ： 更新版本号</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-sass\" target=\"_blank\" rel=\"noopener\">gulp-sass</a> ： sass 编译</li>\n<li><a href=\"http://www.browsersync.cn/docs/gulp/\" target=\"_blank\" rel=\"noopener\">browser-sync</a> ： 浏览器自动刷新</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\" target=\"_blank\" rel=\"noopener\">gulp-uglify</a> ： 代码压缩</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-concat\" target=\"_blank\" rel=\"noopener\">gulp-concat</a> ： 合并</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-eslint\" target=\"_blank\" rel=\"noopener\">gulp-eslint</a> ： 支持 ES6 JSX</li>\n</ul>\n<h1 id=\"gulp-命令行参数\"><a href=\"#gulp-命令行参数\" class=\"headerlink\" title=\"gulp 命令行参数\"></a>gulp 命令行参数</h1><ul>\n<li><code>-v</code> 或 <code>--version</code> 会显示全局和项目本地所安装的 gulp 版本号</li>\n<li><code>--require &lt;module path&gt;</code> 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 <code>--require</code></li>\n<li><code>--gulpfile &lt;gulpfile path&gt;</code> 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录</li>\n<li><code>--cwd &lt;dir path&gt;</code> 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径</li>\n<li><code>-T</code> 或 <code>--tasks</code> 会显示所指定 gulpfile 的 task 依赖树</li>\n<li><code>--tasks-simple</code> 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表</li>\n<li><code>--color</code> 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持</li>\n<li><code>--no-color</code> 强制不显示颜色，即便检测到有颜色支持</li>\n<li><code>--silent</code> 禁止所有的 gulp 日志</li>\n</ul>\n<p>命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。</p>\n<h1 id=\"tip\"><a href=\"#tip\" class=\"headerlink\" title=\"tip\"></a>tip</h1><p>1、gulp 写进项目 package.json 文件的依赖有什么作用<br>方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。</p>\n<p>2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是-gulp\"><a href=\"#什么是-gulp\" class=\"headerlink\" title=\"什么是 gulp\"></a>什么是 gulp</h1><p><a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noopener\">gulp</a> 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。</p>\n<h1 id=\"为什么要用-gulp\"><a href=\"#为什么要用-gulp\" class=\"headerlink\" title=\"为什么要用 gulp\"></a>为什么要用 gulp</h1><p>与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">API</a>（<a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">中文 API</a>） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> 来读取和操作数据，其速度更快。<br>gulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。</p>\n<h1 id=\"如何使用-gulp\"><a href=\"#如何使用-gulp\" class=\"headerlink\" title=\"如何使用 gulp\"></a>如何使用 gulp</h1><h2 id=\"Installing-Gulp\"><a href=\"#Installing-Gulp\" class=\"headerlink\" title=\"Installing Gulp\"></a>Installing Gulp</h2><p>新版的 gulp 命令行工具已经改名为 gulp-cli 。<br>如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令<br> <code>npm rm --global gulp</code> ，将之前的全局 gulp 卸掉。</p>","more":"<h3 id=\"Install-the-gulp-command\"><a href=\"#Install-the-gulp-command\" class=\"headerlink\" title=\"Install the gulp command\"></a>Install the gulp command</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global gulp-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-gulp-in-your-devDependencies\"><a href=\"#Install-gulp-in-your-devDependencies\" class=\"headerlink\" title=\"Install gulp in your devDependencies\"></a>Install gulp in your devDependencies</h3><p>Run this command in your project directory<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Create-a-gulpfile\"><a href=\"#Create-a-gulpfile\" class=\"headerlink\" title=\"Create a gulpfile\"></a>Create a gulpfile</h2><p>Create a file called gulpfile.js in your project root with these contents:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// place code for your default tash here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Test-it-out\"><a href=\"#Test-it-out\" class=\"headerlink\" title=\"Test it out\"></a>Test it out</h2><p>Run the gulp command in your projct directory:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"gulp-API\"><a href=\"#gulp-API\" class=\"headerlink\" title=\"gulp API\"></a>gulp API</h1><p>gulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。<br><a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\" target=\"_blank\" rel=\"noopener\">gulp API</a><br><a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"noopener\">gulp API 中文</a></p>\n<p>下面详细介绍一下：</p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src()\"></a>gulp.src()</h2><p>gulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 <a href=\"https://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">stream</a> 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(globs [, options])</span><br></pre></td></tr></table></figure></p>\n<p>gulp 用到的 glob 的匹配规则以及一些文件匹配技巧。<br>gulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>\n<ul>\n<li><code>*</code> 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾</li>\n<li>** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>\n<li>? 匹配文件路径中的一个字符（不会匹配路径分隔符）</li>\n<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。</li>\n<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>\n<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?</li>\n<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+</li>\n<li><code>*(pattern|pattern|pattern)</code> 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 <code>(pattern|pattern|pattern)*</code></li>\n<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)</li>\n</ul>\n<p>下面以一系列例子来加深理解</p>\n<ul>\n<li><code>*</code> 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js</li>\n<li><code>*.*</code> 能匹配 a.js 、 style.css 、 a.b 、 x.y</li>\n<li><code>*/*/*.js</code> 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js</li>\n<li>** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件</li>\n<li><em>*/</em>.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js</li>\n<li>a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z</li>\n<li><code>a/**b/z</code> 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录</li>\n<li>?.js 能匹配 a.js 、 b.js 、 c.js</li>\n<li>a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符</li>\n<li>[xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符</li>\n<li>[^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js</li>\n</ul>\n<p>当有多种匹配模式时可以使用数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用数组的方式来匹配多种文件</span></span><br><span class=\"line\">gulp.src([<span class=\"string\">'js/*.js'</span>,<span class=\"string\">'css/*.css'</span>,<span class=\"string\">'*.html'</span>])</span><br></pre></td></tr></table></figure></p>\n<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src([*.js,<span class=\"string\">'!b*.js'</span>])  <span class=\"comment\">//匹配所有 js 文件，但排除掉以 b 开头的 js 文件</span></span><br><span class=\"line\">gulp.src([<span class=\"string\">'!b*.js'</span>,*.js])  <span class=\"comment\">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></span><br></pre></td></tr></table></figure></p>\n<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：</p>\n<ul>\n<li>a{b,c}d 会展开为 abd 、 acd</li>\n<li>a{b,}c 会展开为 abc 、 ac</li>\n<li>a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d </li>\n<li>a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg</li>\n<li>a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg</li>\n</ul>\n<h2 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h2><p>gulp.dest() 方法是用来写文件的，其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure></p>\n<p><strong>path</strong> 为写入文件的路径<br>我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/jquery.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist/foo.js\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js</span></span><br></pre></td></tr></table></figure></p>\n<p>要想改变文件名，可以使用插件 gulp-rename<br>下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。<br>gulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//有通配符开始出现的那部分路径为 **/*.js</span></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/**/*.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//最后生成的文件路径为 dist/**/*.js</span></span><br><span class=\"line\"><span class=\"comment\">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js</span></span><br></pre></td></tr></table></figure></p>\n<p>再举更多一点的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"script/avalon/avalon.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/**/underscore.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//有通配符开始出现的那部分路径为 **/underscore.js</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/util/underscore.js</span></span><br><span class=\"line\"><span class=\"comment\">//则最后生成的文件路径为dist/util/underscore.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/*\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//有通配符出现的那部分路径为*</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/zepto.js</span></span><br><span class=\"line\"><span class=\"comment\">//则最后生成的文件路径为dist/zepto.js</span></span><br></pre></td></tr></table></figure></p>\n<p>通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。<br>当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"app/src/**/*.css\"</span>) <span class=\"comment\">//此时base的值为 app/src</span></span><br></pre></td></tr></table></figure></p>\n<p>上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"app/src/**/*.css\"</span>).pipe(gulp.dest(<span class=\"string\">\"dist\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//此时base的值为app/src，也就是说它的base路径为app/src</span></span><br><span class=\"line\"><span class=\"comment\">//设该模式匹配到了文件app/src/css/normal.css</span></span><br><span class=\"line\"><span class=\"comment\">//用dist替换掉base路径，最终得到dist/css/normal.css</span></span><br></pre></td></tr></table></figure></p>\n<p>所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">\"script/lib/*.js\"</span>).pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//没有配置base参数，此时默认的base路径为script/lib</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class=\"line\"><span class=\"comment\">//生成的文件路径为build/jquery.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.src(<span class=\"string\">\"script/lib/*.js\"</span>, &#123;<span class=\"attr\">base</span>: <span class=\"string\">\"script\"</span>&#125;).pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//配置了base参数，此时base路径为script</span></span><br><span class=\"line\"><span class=\"comment\">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class=\"line\"><span class=\"comment\">//此时生成的文件路径为build/lib/jquery.js</span></span><br></pre></td></tr></table></figure></p>\n<p>用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。</p>\n<h2 id=\"gulp-task\"><a href=\"#gulp-task\" class=\"headerlink\" title=\"gulp.task()\"></a>gulp.task()</h2><p>gulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure></p>\n<p><strong>name</strong> 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。<br><strong>fn</strong> 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"mytask\"</span>, [<span class=\"string\">\"array\"</span>, <span class=\"string\">\"of\"</span>, <span class=\"string\">\"task\"</span>, <span class=\"string\">\"names\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义一个有依赖的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。<br>gulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'one'</span>,<span class=\"string\">'two'</span>,<span class=\"string\">'three'</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'one'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// one是一个异步执行的任务</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"one is done\"</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/gulp-1.png\" alt=\"\"><br>上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。</p>\n<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？<br>有三种方法可以实现：</p>\n<p>第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//cb为任务函数提供的回调，用来通知任务已经完成</span></span><br><span class=\"line\">  <span class=\"comment\">//one是一个异步执行的任务</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"one is done\"</span>);</span><br><span class=\"line\">    cb(); <span class=\"comment\">//执行回调，表示这个异步任务已经完成</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时two任务会在one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stream = gulp.src(<span class=\"string\">\"client/**/*.js\"</span>)</span><br><span class=\"line\">      .pipe(dosomething()) <span class=\"comment\">//dosomething()中有某些异步操作</span></span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"build\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stream;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是two任务会在one任务中的异步操作完成后再执行</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第三：返回一个 promise 对象，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Q = <span class=\"built_in\">require</span>(<span class=\"string\">'q'</span>); <span class=\"comment\">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"one\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> deferred = Q.defer();</span><br><span class=\"line\">  <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    deferred.resolve();</span><br><span class=\"line\">  &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deferred.promise;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"two\"</span>, [<span class=\"string\">\"one\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"two is done\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。</p>\n<h2 id=\"gulp-watch\"><a href=\"#gulp-watch\" class=\"headerlink\" title=\"gulp.watch()\"></a>gulp.watch()</h2><p>gulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(glob[, opts], tasks);</span><br></pre></td></tr></table></figure></p>\n<p><strong>glob</strong> 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。<br><strong>opts</strong> 为一个可选的配置对象，通常不需要用到。<br><strong>tasks</strong> 为文件变化后要执行的任务，为一个数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"uglify\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">\"reload\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.watch(<span class=\"string\">\"js/**/*.js\"</span>, [<span class=\"string\">\"uglify\"</span>,<span class=\"string\">\"reload\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>gulp.watch(glob [,opts, cb])<br><strong>glob</strong> 和 <strong>opts</strong> 参数与第一种用法相同<br><strong>cb</strong> 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.watch(<span class=\"string\">\"js/**/*.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type); <span class=\"comment\">//变化类型added为新增，deleted为删除，changed为改变</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.path); <span class=\"comment\">//变化的文件的路径</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"gulp-的插件\"><a href=\"#gulp-的插件\" class=\"headerlink\" title=\"gulp 的插件\"></a>gulp 的插件</h1><p>gulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 <a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"noopener\">插件页面</a> 或者在 npm 搜索 gulpplugin 。<br>列一些很棒的 plugin ：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp-jshint/\" target=\"_blank\" rel=\"noopener\">JSHint</a> ： js代码检查分析工具</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-coffee/\" target=\"_blank\" rel=\"noopener\">gulp-coffee</a> ： 编译CoffeeScript</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-mocha\" target=\"_blank\" rel=\"noopener\">gulp-mocha</a> ： 执行Mocha测试</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-bump\" target=\"_blank\" rel=\"noopener\">gulp-bump</a> ： 更新版本号</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-sass\" target=\"_blank\" rel=\"noopener\">gulp-sass</a> ： sass 编译</li>\n<li><a href=\"http://www.browsersync.cn/docs/gulp/\" target=\"_blank\" rel=\"noopener\">browser-sync</a> ： 浏览器自动刷新</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\" target=\"_blank\" rel=\"noopener\">gulp-uglify</a> ： 代码压缩</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-concat\" target=\"_blank\" rel=\"noopener\">gulp-concat</a> ： 合并</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-eslint\" target=\"_blank\" rel=\"noopener\">gulp-eslint</a> ： 支持 ES6 JSX</li>\n</ul>\n<h1 id=\"gulp-命令行参数\"><a href=\"#gulp-命令行参数\" class=\"headerlink\" title=\"gulp 命令行参数\"></a>gulp 命令行参数</h1><ul>\n<li><code>-v</code> 或 <code>--version</code> 会显示全局和项目本地所安装的 gulp 版本号</li>\n<li><code>--require &lt;module path&gt;</code> 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 <code>--require</code></li>\n<li><code>--gulpfile &lt;gulpfile path&gt;</code> 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录</li>\n<li><code>--cwd &lt;dir path&gt;</code> 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径</li>\n<li><code>-T</code> 或 <code>--tasks</code> 会显示所指定 gulpfile 的 task 依赖树</li>\n<li><code>--tasks-simple</code> 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表</li>\n<li><code>--color</code> 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持</li>\n<li><code>--no-color</code> 强制不显示颜色，即便检测到有颜色支持</li>\n<li><code>--silent</code> 禁止所有的 gulp 日志</li>\n</ul>\n<p>命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。</p>\n<h1 id=\"tip\"><a href=\"#tip\" class=\"headerlink\" title=\"tip\"></a>tip</h1><p>1、gulp 写进项目 package.json 文件的依赖有什么作用<br>方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。</p>\n<p>2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。</p>"},{"title":"Hexo-NexT搭建个人博客（四）","date":"2017-12-15T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>\n\n按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。\n解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。\n\n下面来看几个例子：\n\n<!-- more -->\n首先这个是在 `hexo clean` 时报的错：\n![](http://i1.piimg.com/567571/08a05e89a756ee75.png)\n提示插件 **hexo-deployer-git** 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 **npm** 来卸载这个模块，然后重新安装）如下：\n\n![](http://i1.piimg.com/567571/a26efa972092fb9e.png)\n\nOK ， 现在好了，`hexo clean` 没有报错了。\n\n![](http://i1.piimg.com/567571/24a28fcb40d1c95f.png)\n\n下面，我是在执行 `hexo g` 的操作，同样也出现了错误：\n\n![](http://i1.piimg.com/567571/40a2d64a4aba2a04.png)\n\n按照图中我标注的步骤，来看一下错误信息：\n如 1 所示：我们首先会发现缺少模块 **isarray** ，但是我们查看 **package.json** 文件，我们的项目根本就没有引入 **isarray** 这个模块，我猜测这个 **isarray** 模块应该是某个模块的子模块 。\n\n如 2 所示：我们顺着 **at** 一路往下找。\n\n如 3 所示：发现这个 **isarray** 是在 **hexo-generator-sitemap** 里面的 ，所以我们删除这个 **hexo-generator-sitemap** 模块，然后重新安装这个模块。如下：\n\n![](http://i1.piimg.com/567571/6a740eb49f5ad0c2.png)\n\nOK ， 现在好了，`hexo g` 没有报错了。\n\n![](http://i1.piimg.com/567571/91abd56ac0617023.png)\n\n那么，就以这两个例子来作为本次的示范吧，其实，**Hexo** 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。\n\n<p id=\"div-border-top-red\">总结：遇到问题 **bug**，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","source":"_posts/hexo-next-four.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（四）\ndate: 2017-12-15 23:25:24\ncategories: Hexo\ntags: [Hexo, Next]\ncomments: false\n---\n<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>\n\n按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。\n解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。\n\n下面来看几个例子：\n\n<!-- more -->\n首先这个是在 `hexo clean` 时报的错：\n![](http://i1.piimg.com/567571/08a05e89a756ee75.png)\n提示插件 **hexo-deployer-git** 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 **npm** 来卸载这个模块，然后重新安装）如下：\n\n![](http://i1.piimg.com/567571/a26efa972092fb9e.png)\n\nOK ， 现在好了，`hexo clean` 没有报错了。\n\n![](http://i1.piimg.com/567571/24a28fcb40d1c95f.png)\n\n下面，我是在执行 `hexo g` 的操作，同样也出现了错误：\n\n![](http://i1.piimg.com/567571/40a2d64a4aba2a04.png)\n\n按照图中我标注的步骤，来看一下错误信息：\n如 1 所示：我们首先会发现缺少模块 **isarray** ，但是我们查看 **package.json** 文件，我们的项目根本就没有引入 **isarray** 这个模块，我猜测这个 **isarray** 模块应该是某个模块的子模块 。\n\n如 2 所示：我们顺着 **at** 一路往下找。\n\n如 3 所示：发现这个 **isarray** 是在 **hexo-generator-sitemap** 里面的 ，所以我们删除这个 **hexo-generator-sitemap** 模块，然后重新安装这个模块。如下：\n\n![](http://i1.piimg.com/567571/6a740eb49f5ad0c2.png)\n\nOK ， 现在好了，`hexo g` 没有报错了。\n\n![](http://i1.piimg.com/567571/91abd56ac0617023.png)\n\n那么，就以这两个例子来作为本次的示范吧，其实，**Hexo** 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。\n\n<p id=\"div-border-top-red\">总结：遇到问题 **bug**，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","slug":"hexo-next-four","published":1,"updated":"2019-08-15T07:18:50.812Z","_id":"cjzccpcyy000kz4v5vqc7t4kq","layout":"post","photos":[],"link":"","content":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>\n\n<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。</p>\n<p>下面来看几个例子：</p>\n<a id=\"more\"></a>\n<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src=\"http://i1.piimg.com/567571/08a05e89a756ee75.png\" alt=\"\"><br>提示插件 <strong>hexo-deployer-git</strong> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <strong>npm</strong> 来卸载这个模块，然后重新安装）如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/a26efa972092fb9e.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/24a28fcb40d1c95f.png\" alt=\"\"></p>\n<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>\n<p><img src=\"http://i1.piimg.com/567571/40a2d64a4aba2a04.png\" alt=\"\"></p>\n<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <strong>isarray</strong> ，但是我们查看 <strong>package.json</strong> 文件，我们的项目根本就没有引入 <strong>isarray</strong> 这个模块，我猜测这个 <strong>isarray</strong> 模块应该是某个模块的子模块 。</p>\n<p>如 2 所示：我们顺着 <strong>at</strong> 一路往下找。</p>\n<p>如 3 所示：发现这个 <strong>isarray</strong> 是在 <strong>hexo-generator-sitemap</strong> 里面的 ，所以我们删除这个 <strong>hexo-generator-sitemap</strong> 模块，然后重新安装这个模块。如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/6a740eb49f5ad0c2.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/91abd56ac0617023.png\" alt=\"\"></p>\n<p>那么，就以这两个例子来作为本次的示范吧，其实，<strong>Hexo</strong> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>\n<p id=\"div-border-top-red\">总结：遇到问题 <strong>bug</strong>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>","site":{"data":{}},"excerpt":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>\n\n<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。</p>\n<p>下面来看几个例子：</p>","more":"<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src=\"http://i1.piimg.com/567571/08a05e89a756ee75.png\" alt=\"\"><br>提示插件 <strong>hexo-deployer-git</strong> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <strong>npm</strong> 来卸载这个模块，然后重新安装）如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/a26efa972092fb9e.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/24a28fcb40d1c95f.png\" alt=\"\"></p>\n<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>\n<p><img src=\"http://i1.piimg.com/567571/40a2d64a4aba2a04.png\" alt=\"\"></p>\n<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <strong>isarray</strong> ，但是我们查看 <strong>package.json</strong> 文件，我们的项目根本就没有引入 <strong>isarray</strong> 这个模块，我猜测这个 <strong>isarray</strong> 模块应该是某个模块的子模块 。</p>\n<p>如 2 所示：我们顺着 <strong>at</strong> 一路往下找。</p>\n<p>如 3 所示：发现这个 <strong>isarray</strong> 是在 <strong>hexo-generator-sitemap</strong> 里面的 ，所以我们删除这个 <strong>hexo-generator-sitemap</strong> 模块，然后重新安装这个模块。如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/6a740eb49f5ad0c2.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/91abd56ac0617023.png\" alt=\"\"></p>\n<p>那么，就以这两个例子来作为本次的示范吧，其实，<strong>Hexo</strong> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>\n<p id=\"div-border-top-red\">总结：遇到问题 <strong>bug</strong>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>"},{"title":"Hexo-NexT搭建个人博客（一）","date":"2017-09-03T05:25:24.000Z","comments":0,"_content":"# 简介\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的静态站点生成框架，它基于 [Node.js](https://nodejs.org/en/) 。 它有以下特点：\n\n- <i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6>\n<i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i>\n- <i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6>\n<i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i>\n- <i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一键部署</h6>\n<i>只需一条指令即可部署到Github Pages，或其他网站</i>\n- <i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6>\n<i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i>\n\n\n通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins.html) 来快速的插入特定形式的内容。\n\n基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的[主题](https://hexo.io/themes/)。\n[NexT](http://theme-next.iissnan.com/) 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。\n\n<!-- more -->\n\n# 安装\n安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请[提交问题](https://nigelyao.github.io/guestbook/)，我会尽力解决你的问题。\n\n## 安装前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:\n\n> [Node.js](https://nodejs.org/en/)\n> [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash \n$ npm install -g hexo-cli\n```\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n## 安装 Git\n* Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a>\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/)，[MacPorts](http://www.macports.org/) 或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装\n* Linux（Ubuntu，Debian）：`sudo apt-get install git-core`\n* Linux（Fedora，Red Hat，CentOS）：`sudo yum install git-core`\n\n## 安装 Node.js\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。（nvm：Node Version Manager）\nwindows 下使用 nvm 请看这里： [nvm-windows](https://github.com/coreybutler/nvm-windows) ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> \nwindows下安装完nvm以后，我们可以打开命令行中执行命令\n``` bash\n$ nvm\n$ nvm install latest\n```\n执行完以后，重启命令行，执行命令 `node -v` ，如果出现版本号，那么 `Node.js` 就安装成功了。\n\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> </p>\n\n## 安装 Hexo\n有了 Node.js ，我们可以使用 npm 安装 Hexo。\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。`D:\\blog` ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。\n``` bash\n$ hexo init\n```\n等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：\n``` \n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└──\n```\n\n我们继续执行命令\n``` bash\n$ hexo g\n$ hexo s --debug\n```\nHexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。\n这个时候，我们在浏览器中访问 http://localhost:4000/ ，就可以看到基于 Hexo 的默认主题的原型：\n![hexo-next-one-1](http://p1.bqimg.com/567571/27324b740c9e91e2.png)\n\n\n## 安装 NexT 主题\n\n### 下载 NexT 主题\n\n依旧是在当前目录下，使用 Git checkout 代码：\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n等待下载完成。\n\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n### 启用 NexT 主题\n打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。\n到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 `hexo clean` 来清除 Hexo 的缓存。\n\n### 验证主题\n首先启动 Hexo 本地站点，并开启调试模式（即加上 `--debug`），整个命令是 `hexo s --debug`。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：\n\n``` bash\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n此时即可使用浏览器访问 http://localhost:4000/ ，检查站点是否正确运行。\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>\n![hexo-next-one-1](http://p1.bqimg.com/567571/8333728b5eaab526.png)\n现在，我们已经成功安装并启用了 NexT 主题。\n\n<p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.</p>\n\n# 总结\n## 本地调试步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s --debug\n```\n这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。\n\n## 部署步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n当然在部署之前，需要先配置好配置文件中的 deploy。\n\n\n## 常用命令\n``` bash\n$ hexo new \"postName\"  #新建文章\n$ hexo new page \"pageName\" # 新建页面\n$ hexo generate # 生成静态页面至public目录\n$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)\n$ hexo deploy # 项目部署\n$ hexo help # 查看帮助\n$ hexo version # 查看Hexo的版本\n```\n\n## 简写命令\n``` bash\n$ hexo new == hexo n\n$ hexo generate == hexo g\n$ hexo server == hexo s\n$ hexo deploy == hexo d\n```\n\n\n## 常见问题1\n在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：\n错误的设置：\n```\nauthor:nigelyao\nemail:react.dong.yu@gmail.com\nlanguage:zh-CN\n```\n正确的设置：\n```\nauthor: nigelyao\nemail: react.dong.yu@gmail.com\nlanguage: zh-CN\n```\n\n## 常见问题2\n关于 Git 提交中用户名和 Email 的设置\n```\ngit config --global user.name \"Your name\"\ngit config --global user.email \"Your email\"\n```\n\n## 常见问题3\n\nHexo 中的图标使用的是 [Font Awesome](http://fontawesome.io/) ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。\n<i class=\"fa fa-github\"></i> `<i class=\"fa fa-github\"></i>`\n<i class=\"fa fa-github fa-lg\"></i> `<i class=\"fa fa-github fa-lg\"></i>`\n<i class=\"fa fa-github fa-2x\"></i> `<i class=\"fa fa-github fa-2x\"></i>`\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","source":"_posts/hexo-next-one.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（一）\ndate: 2017-09-03 13:25:24\ncategories: Hexo\ntags: [Hexo, Next]\ncomments: false\n---\n# 简介\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的静态站点生成框架，它基于 [Node.js](https://nodejs.org/en/) 。 它有以下特点：\n\n- <i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6>\n<i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i>\n- <i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6>\n<i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i>\n- <i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一键部署</h6>\n<i>只需一条指令即可部署到Github Pages，或其他网站</i>\n- <i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6>\n<i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i>\n\n\n通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins.html) 来快速的插入特定形式的内容。\n\n基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的[主题](https://hexo.io/themes/)。\n[NexT](http://theme-next.iissnan.com/) 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。\n\n<!-- more -->\n\n# 安装\n安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请[提交问题](https://nigelyao.github.io/guestbook/)，我会尽力解决你的问题。\n\n## 安装前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:\n\n> [Node.js](https://nodejs.org/en/)\n> [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash \n$ npm install -g hexo-cli\n```\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n## 安装 Git\n* Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a>\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/)，[MacPorts](http://www.macports.org/) 或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装\n* Linux（Ubuntu，Debian）：`sudo apt-get install git-core`\n* Linux（Fedora，Red Hat，CentOS）：`sudo yum install git-core`\n\n## 安装 Node.js\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。（nvm：Node Version Manager）\nwindows 下使用 nvm 请看这里： [nvm-windows](https://github.com/coreybutler/nvm-windows) ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> \nwindows下安装完nvm以后，我们可以打开命令行中执行命令\n``` bash\n$ nvm\n$ nvm install latest\n```\n执行完以后，重启命令行，执行命令 `node -v` ，如果出现版本号，那么 `Node.js` 就安装成功了。\n\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> </p>\n\n## 安装 Hexo\n有了 Node.js ，我们可以使用 npm 安装 Hexo。\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。`D:\\blog` ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。\n``` bash\n$ hexo init\n```\n等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：\n``` \n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└──\n```\n\n我们继续执行命令\n``` bash\n$ hexo g\n$ hexo s --debug\n```\nHexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。\n这个时候，我们在浏览器中访问 http://localhost:4000/ ，就可以看到基于 Hexo 的默认主题的原型：\n![hexo-next-one-1](http://p1.bqimg.com/567571/27324b740c9e91e2.png)\n\n\n## 安装 NexT 主题\n\n### 下载 NexT 主题\n\n依旧是在当前目录下，使用 Git checkout 代码：\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n等待下载完成。\n\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n### 启用 NexT 主题\n打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。\n到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 `hexo clean` 来清除 Hexo 的缓存。\n\n### 验证主题\n首先启动 Hexo 本地站点，并开启调试模式（即加上 `--debug`），整个命令是 `hexo s --debug`。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：\n\n``` bash\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n此时即可使用浏览器访问 http://localhost:4000/ ，检查站点是否正确运行。\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>\n![hexo-next-one-1](http://p1.bqimg.com/567571/8333728b5eaab526.png)\n现在，我们已经成功安装并启用了 NexT 主题。\n\n<p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.</p>\n\n# 总结\n## 本地调试步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s --debug\n```\n这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。\n\n## 部署步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n当然在部署之前，需要先配置好配置文件中的 deploy。\n\n\n## 常用命令\n``` bash\n$ hexo new \"postName\"  #新建文章\n$ hexo new page \"pageName\" # 新建页面\n$ hexo generate # 生成静态页面至public目录\n$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)\n$ hexo deploy # 项目部署\n$ hexo help # 查看帮助\n$ hexo version # 查看Hexo的版本\n```\n\n## 简写命令\n``` bash\n$ hexo new == hexo n\n$ hexo generate == hexo g\n$ hexo server == hexo s\n$ hexo deploy == hexo d\n```\n\n\n## 常见问题1\n在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：\n错误的设置：\n```\nauthor:nigelyao\nemail:react.dong.yu@gmail.com\nlanguage:zh-CN\n```\n正确的设置：\n```\nauthor: nigelyao\nemail: react.dong.yu@gmail.com\nlanguage: zh-CN\n```\n\n## 常见问题2\n关于 Git 提交中用户名和 Email 的设置\n```\ngit config --global user.name \"Your name\"\ngit config --global user.email \"Your email\"\n```\n\n## 常见问题3\n\nHexo 中的图标使用的是 [Font Awesome](http://fontawesome.io/) ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。\n<i class=\"fa fa-github\"></i> `<i class=\"fa fa-github\"></i>`\n<i class=\"fa fa-github fa-lg\"></i> `<i class=\"fa fa-github fa-lg\"></i>`\n<i class=\"fa fa-github fa-2x\"></i> `<i class=\"fa fa-github fa-2x\"></i>`\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","slug":"hexo-next-one","published":1,"updated":"2019-08-15T07:18:49.764Z","_id":"cjzccpcz1000oz4v5vfzsr09z","layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 。 它有以下特点：</p>\n<ul>\n<li><i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>\n<li><i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>\n<li><i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>\n<li><i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>\n</ul>\n<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">标签插件</a> 来快速的插入特定形式的内容。</p>\n<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题</a>。<br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href=\"https://nigelyao.github.io/guestbook/\">提交问题</a>，我会尽力解决你的问题。</p>\n<h2 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>\n<blockquote>\n<p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n</blockquote>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a></li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，<a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> 或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装</li>\n<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>\n<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>\n</ul>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"noopener\">nvm-windows</a> ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm</span><br><span class=\"line\">$ nvm install latest</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a> </p>\n\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└──</span><br></pre></td></tr></table></figure></p>\n<p>我们继续执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>Hexo 将 source 文件夹中除 <em>posts 文件夹之外，开头命名为 </em>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src=\"http://p1.bqimg.com/567571/27324b740c9e91e2.png\" alt=\"hexo-next-one-1\"></p>\n<h2 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h2><h3 id=\"下载-NexT-主题\"><a href=\"#下载-NexT-主题\" class=\"headerlink\" title=\"下载 NexT 主题\"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git checkout 代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>\n<p>等待下载完成。</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h3 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h3><p>打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>此时即可使用浏览器访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，检查站点是否正确运行。</p>\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src=\"http://p1.bqimg.com/567571/8333728b5eaab526.png\" alt=\"hexo-next-one-1\"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 与 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> 官方文档.</p>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"本地调试步骤\"><a href=\"#本地调试步骤\" class=\"headerlink\" title=\"本地调试步骤\"></a>本地调试步骤</h2><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>当然在部署之前，需要先配置好配置文件中的 deploy。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"postName\"</span>  <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\"># 新建页面</span></span><br><span class=\"line\">$ hexo generate <span class=\"comment\"># 生成静态页面至public目录</span></span><br><span class=\"line\">$ hexo server <span class=\"comment\"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class=\"line\">$ hexo deploy <span class=\"comment\"># 项目部署</span></span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">$ hexo version <span class=\"comment\"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"简写命令\"><a href=\"#简写命令\" class=\"headerlink\" title=\"简写命令\"></a>简写命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new == hexo n</span><br><span class=\"line\">$ hexo generate == hexo g</span><br><span class=\"line\">$ hexo server == hexo s</span><br><span class=\"line\">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题1\"><a href=\"#常见问题1\" class=\"headerlink\" title=\"常见问题1\"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author:nigelyao</span><br><span class=\"line\">email:react.dong.yu@gmail.com</span><br><span class=\"line\">language:zh-CN</span><br></pre></td></tr></table></figure></p>\n<p>正确的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author: nigelyao</span><br><span class=\"line\">email: react.dong.yu@gmail.com</span><br><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"常见问题2\"><a href=\"#常见问题2\" class=\"headerlink\" title=\"常见问题2\"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your name&quot;</span><br><span class=\"line\">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"常见问题3\"><a href=\"#常见问题3\" class=\"headerlink\" title=\"常见问题3\"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class=\"fa fa-github\"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-lg\"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-2x\"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 。 它有以下特点：</p>\n<ul>\n<li><i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>\n<li><i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>\n<li><i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>\n<li><i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>\n</ul>\n<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">标签插件</a> 来快速的插入特定形式的内容。</p>\n<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题</a>。<br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href=\"https://nigelyao.github.io/guestbook/\">提交问题</a>，我会尽力解决你的问题。</p>\n<h2 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>\n<blockquote>\n<p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n</blockquote>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a></li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，<a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> 或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装</li>\n<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>\n<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>\n</ul>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"noopener\">nvm-windows</a> ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm</span><br><span class=\"line\">$ nvm install latest</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a> </p>\n\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└──</span><br></pre></td></tr></table></figure></p>\n<p>我们继续执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>Hexo 将 source 文件夹中除 <em>posts 文件夹之外，开头命名为 </em>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src=\"http://p1.bqimg.com/567571/27324b740c9e91e2.png\" alt=\"hexo-next-one-1\"></p>\n<h2 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h2><h3 id=\"下载-NexT-主题\"><a href=\"#下载-NexT-主题\" class=\"headerlink\" title=\"下载 NexT 主题\"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git checkout 代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>\n<p>等待下载完成。</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h3 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h3><p>打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>此时即可使用浏览器访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，检查站点是否正确运行。</p>\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src=\"http://p1.bqimg.com/567571/8333728b5eaab526.png\" alt=\"hexo-next-one-1\"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 与 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> 官方文档.</p>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"本地调试步骤\"><a href=\"#本地调试步骤\" class=\"headerlink\" title=\"本地调试步骤\"></a>本地调试步骤</h2><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>\n<p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>当然在部署之前，需要先配置好配置文件中的 deploy。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"postName\"</span>  <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\"># 新建页面</span></span><br><span class=\"line\">$ hexo generate <span class=\"comment\"># 生成静态页面至public目录</span></span><br><span class=\"line\">$ hexo server <span class=\"comment\"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class=\"line\">$ hexo deploy <span class=\"comment\"># 项目部署</span></span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">$ hexo version <span class=\"comment\"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"简写命令\"><a href=\"#简写命令\" class=\"headerlink\" title=\"简写命令\"></a>简写命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new == hexo n</span><br><span class=\"line\">$ hexo generate == hexo g</span><br><span class=\"line\">$ hexo server == hexo s</span><br><span class=\"line\">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题1\"><a href=\"#常见问题1\" class=\"headerlink\" title=\"常见问题1\"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author:nigelyao</span><br><span class=\"line\">email:react.dong.yu@gmail.com</span><br><span class=\"line\">language:zh-CN</span><br></pre></td></tr></table></figure></p>\n<p>正确的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author: nigelyao</span><br><span class=\"line\">email: react.dong.yu@gmail.com</span><br><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"常见问题2\"><a href=\"#常见问题2\" class=\"headerlink\" title=\"常见问题2\"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your name&quot;</span><br><span class=\"line\">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"常见问题3\"><a href=\"#常见问题3\" class=\"headerlink\" title=\"常见问题3\"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class=\"fa fa-github\"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-lg\"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-2x\"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>"},{"title":"Hexo-NexT搭建个人博客（三）","date":"2017-11-11T05:25:24.000Z","comments":0,"_content":"　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。\n\n## 一、菜单栏中标签与侧边栏中标签关联的问题\n　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示**标签**这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的**标签**这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：[https://nigelyao.github.io/tags/](https://nigelyao.github.io/tags/)。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。\n\n<!-- more -->\n\n　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 **标签** 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。\n　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？\n　　在 <span id=\"inline-purple\">主题配置文件</span> `\\themes\\next\\layout\\_macro\\sidebar.swing_` 中，将\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    {% if theme.menu.tags %}<a href=\"{{ url_for(theme.menu.tags) }}\">{% endif %}\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    {% if theme.menu.tags %}</a>{% endif %}\n  </div>\n{% endif %}\n```\n改成：\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    <a href=\"{{ url_for(theme.menu.tags) }}\">\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    </a>\n  </div>\n{% endif %}\n```\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n## 二、关于High一下中的音乐多次点击重叠播放的解决方案\n\n　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。\n　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：[https://github.com/nigelyao/Blog](https://github.com/nigelyao/Blog)。\n关于播放音乐的代码是在： [https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig](https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig) 中的第 60 行开始。\n　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。\n```\nvar songs = [\n    \"http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3\",\n    \"http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3\"\n];\n```\n\n\n## 三、关于github屏蔽vendors ，导致页面空白的解决方案\n\n关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。\n1.在根目录添加 **.nojekyll** 文件。\n2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 `_internal: vendors` 改成你所修改的名字，例如 `_internal: lib` 。\n\n\n\n## 四、关于如何获取自己的多说userid\n首先进入自己的帐号管理页面，点击左上自己的名字\n![](http://i1.piimg.com/567571/afbb6058c9f628ad.png)\n此时地址栏后面的一串数字就是你的多说 **userid**。\n![](http://i1.piimg.com/567571/5e3de4efdcabd668.png)\n\n## 五、关于如何修改内容区域宽度\nNext 对内容的宽度的设定如下：\n* 700px，当屏幕宽度 < 1600px\n* 900px，当屏幕宽度 >= 1600px\n* 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\\css\\_variables\\custom.styl 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 `themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl` 文件，更改以下 css 选项定义值：\n```\n.header {width: 1150px;}\n.container .main-inner {width: 1150px;}\n.content-wrap {width: calc(100% - 260px);}\n```\n\n## 六、图片模式\n新建博文，设置 `type: \"picture\"` ，使用 `{\\% gp x-x \\%}...{\\% endgp \\%}` 标签引用要展示的图片地址，如下所示：\n```\n---\ntitle: Naruto-Pictures\ncategories: [picture]\ntags: [picture,naruto]\ndate: 2017-11-02 14:36:04\ntype: \"picture\"\n---\n{% gp 5-3 %}\n![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)\n{% endgp %}\n```\n\n** 图片展示效果 **\n`{\\% gp 5-3 \\%}`：设置图片展示效果，参考 `themes\\next\\scripts\\tags\\group-pictures.js` 注释示意图。\n![](http://p1.bpimg.com/567571/eaef5acfcb3011c2.png)\n`5-3` 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。\n\n<h3 style=\"color:#f63;\">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 `themes\\next\\source\\css\\_common\\components\\tags\\group-pictures.styl` 中的以下样式：\n``` css\n.page-post-detail .post-body .group-picture-column {\n  // float: none;\n  margin-top: 10px;\n  // width: auto !important;\n  img { margin: 0 auto; }\n}\n```\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","source":"_posts/hexo-next-three.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（三）\ndate: 2017-11-11 13:25:24\ncategories: Hexo\ntags: [Hexo, Next]\ncomments: false\n---\n　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。\n\n## 一、菜单栏中标签与侧边栏中标签关联的问题\n　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示**标签**这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的**标签**这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：[https://nigelyao.github.io/tags/](https://nigelyao.github.io/tags/)。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。\n\n<!-- more -->\n\n　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 **标签** 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。\n　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？\n　　在 <span id=\"inline-purple\">主题配置文件</span> `\\themes\\next\\layout\\_macro\\sidebar.swing_` 中，将\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    {% if theme.menu.tags %}<a href=\"{{ url_for(theme.menu.tags) }}\">{% endif %}\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    {% if theme.menu.tags %}</a>{% endif %}\n  </div>\n{% endif %}\n```\n改成：\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    <a href=\"{{ url_for(theme.menu.tags) }}\">\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    </a>\n  </div>\n{% endif %}\n```\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n## 二、关于High一下中的音乐多次点击重叠播放的解决方案\n\n　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。\n　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：[https://github.com/nigelyao/Blog](https://github.com/nigelyao/Blog)。\n关于播放音乐的代码是在： [https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig](https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig) 中的第 60 行开始。\n　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。\n```\nvar songs = [\n    \"http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3\",\n    \"http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3\"\n];\n```\n\n\n## 三、关于github屏蔽vendors ，导致页面空白的解决方案\n\n关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。\n1.在根目录添加 **.nojekyll** 文件。\n2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 `_internal: vendors` 改成你所修改的名字，例如 `_internal: lib` 。\n\n\n\n## 四、关于如何获取自己的多说userid\n首先进入自己的帐号管理页面，点击左上自己的名字\n![](http://i1.piimg.com/567571/afbb6058c9f628ad.png)\n此时地址栏后面的一串数字就是你的多说 **userid**。\n![](http://i1.piimg.com/567571/5e3de4efdcabd668.png)\n\n## 五、关于如何修改内容区域宽度\nNext 对内容的宽度的设定如下：\n* 700px，当屏幕宽度 < 1600px\n* 900px，当屏幕宽度 >= 1600px\n* 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\\css\\_variables\\custom.styl 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 `themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl` 文件，更改以下 css 选项定义值：\n```\n.header {width: 1150px;}\n.container .main-inner {width: 1150px;}\n.content-wrap {width: calc(100% - 260px);}\n```\n\n## 六、图片模式\n新建博文，设置 `type: \"picture\"` ，使用 `{\\% gp x-x \\%}...{\\% endgp \\%}` 标签引用要展示的图片地址，如下所示：\n```\n---\ntitle: Naruto-Pictures\ncategories: [picture]\ntags: [picture,naruto]\ndate: 2017-11-02 14:36:04\ntype: \"picture\"\n---\n{% gp 5-3 %}\n![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)\n{% endgp %}\n```\n\n** 图片展示效果 **\n`{\\% gp 5-3 \\%}`：设置图片展示效果，参考 `themes\\next\\scripts\\tags\\group-pictures.js` 注释示意图。\n![](http://p1.bpimg.com/567571/eaef5acfcb3011c2.png)\n`5-3` 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。\n\n<h3 style=\"color:#f63;\">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 `themes\\next\\source\\css\\_common\\components\\tags\\group-pictures.styl` 中的以下样式：\n``` css\n.page-post-detail .post-body .group-picture-column {\n  // float: none;\n  margin-top: 10px;\n  // width: auto !important;\n  img { margin: 0 auto; }\n}\n```\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","slug":"hexo-next-three","published":1,"updated":"2019-08-15T07:18:47.648Z","_id":"cjzccpcz3000rz4v5678ky0ih","layout":"post","photos":[],"link":"","content":"<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>\n<h2 id=\"一、菜单栏中标签与侧边栏中标签关联的问题\"><a href=\"#一、菜单栏中标签与侧边栏中标签关联的问题\" class=\"headerlink\" title=\"一、菜单栏中标签与侧边栏中标签关联的问题\"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示<strong>标签</strong>这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的<strong>标签</strong>这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href=\"https://nigelyao.github.io/tags/\">https://nigelyao.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>\n<a id=\"more\"></a>\n<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 <strong>标签</strong> 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id=\"inline-purple\">主题配置文件</span> <code>\\themes\\next\\layout\\_macro\\sidebar.swing_</code> 中，将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n<h2 id=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"><a href=\"#二、关于High一下中的音乐多次点击重叠播放的解决方案\" class=\"headerlink\" title=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href=\"https://github.com/nigelyao/Blog\" target=\"_blank\" rel=\"noopener\">https://github.com/nigelyao/Blog</a>。<br>关于播放音乐的代码是在： <a href=\"https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig\" target=\"_blank\" rel=\"noopener\">https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var songs = [</span><br><span class=\"line\">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</span><br><span class=\"line\">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、关于github屏蔽vendors-，导致页面空白的解决方案\"><a href=\"#三、关于github屏蔽vendors-，导致页面空白的解决方案\" class=\"headerlink\" title=\"三、关于github屏蔽vendors ，导致页面空白的解决方案\"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加 <strong>.nojekyll</strong> 文件。<br>2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>\n<h2 id=\"四、关于如何获取自己的多说userid\"><a href=\"#四、关于如何获取自己的多说userid\" class=\"headerlink\" title=\"四、关于如何获取自己的多说userid\"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src=\"http://i1.piimg.com/567571/afbb6058c9f628ad.png\" alt=\"\"><br>此时地址栏后面的一串数字就是你的多说 <strong>userid</strong>。<br><img src=\"http://i1.piimg.com/567571/5e3de4efdcabd668.png\" alt=\"\"></p>\n<h2 id=\"五、关于如何修改内容区域宽度\"><a href=\"#五、关于如何修改内容区域宽度\" class=\"headerlink\" title=\"五、关于如何修改内容区域宽度\"></a>五、关于如何修改内容区域宽度</h2><p>Next 对内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\\css_variables\\custom.styl 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>\n<p>此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 <code>themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl</code> 文件，更改以下 css 选项定义值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;width: 1150px;&#125;</span><br><span class=\"line\">.container .main-inner &#123;width: 1150px;&#125;</span><br><span class=\"line\">.content-wrap &#123;width: calc(100% - 260px);&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"六、图片模式\"><a href=\"#六、图片模式\" class=\"headerlink\" title=\"六、图片模式\"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\\% gp x-x \\%}...{\\% endgp \\%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Naruto-Pictures</span><br><span class=\"line\">categories: [picture]</span><br><span class=\"line\">tags: [picture,naruto]</span><br><span class=\"line\">date: 2017-11-02 14:36:04</span><br><span class=\"line\">type: &quot;picture&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;% gp 5-3 %&#125;</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</span><br><span class=\"line\">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 图片展示效果 </strong><br><code>{\\% gp 5-3 \\%}</code>：设置图片展示效果，参考 <code>themes\\next\\scripts\\tags\\group-pictures.js</code> 注释示意图。<br><img src=\"http://p1.bpimg.com/567571/eaef5acfcb3011c2.png\" alt=\"\"><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。</p>\n<p></p><h3 style=\"color:#f63;\">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 <code>themes\\next\\source\\css\\_common\\components\\tags\\group-pictures.styl</code> 中的以下样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page-post-detail</span> <span class=\"selector-class\">.post-body</span> <span class=\"selector-class\">.group-picture-column</span> &#123;</span><br><span class=\"line\">  // float: none;</span><br><span class=\"line\">  <span class=\"selector-tag\">margin-top</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  // width: auto !important;</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>","site":{"data":{}},"excerpt":"<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>\n<h2 id=\"一、菜单栏中标签与侧边栏中标签关联的问题\"><a href=\"#一、菜单栏中标签与侧边栏中标签关联的问题\" class=\"headerlink\" title=\"一、菜单栏中标签与侧边栏中标签关联的问题\"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示<strong>标签</strong>这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的<strong>标签</strong>这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href=\"https://nigelyao.github.io/tags/\">https://nigelyao.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>","more":"<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 <strong>标签</strong> 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id=\"inline-purple\">主题配置文件</span> <code>\\themes\\next\\layout\\_macro\\sidebar.swing_</code> 中，将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n<h2 id=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"><a href=\"#二、关于High一下中的音乐多次点击重叠播放的解决方案\" class=\"headerlink\" title=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href=\"https://github.com/nigelyao/Blog\" target=\"_blank\" rel=\"noopener\">https://github.com/nigelyao/Blog</a>。<br>关于播放音乐的代码是在： <a href=\"https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig\" target=\"_blank\" rel=\"noopener\">https://github.com/nigelyao/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var songs = [</span><br><span class=\"line\">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</span><br><span class=\"line\">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、关于github屏蔽vendors-，导致页面空白的解决方案\"><a href=\"#三、关于github屏蔽vendors-，导致页面空白的解决方案\" class=\"headerlink\" title=\"三、关于github屏蔽vendors ，导致页面空白的解决方案\"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加 <strong>.nojekyll</strong> 文件。<br>2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>\n<h2 id=\"四、关于如何获取自己的多说userid\"><a href=\"#四、关于如何获取自己的多说userid\" class=\"headerlink\" title=\"四、关于如何获取自己的多说userid\"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src=\"http://i1.piimg.com/567571/afbb6058c9f628ad.png\" alt=\"\"><br>此时地址栏后面的一串数字就是你的多说 <strong>userid</strong>。<br><img src=\"http://i1.piimg.com/567571/5e3de4efdcabd668.png\" alt=\"\"></p>\n<h2 id=\"五、关于如何修改内容区域宽度\"><a href=\"#五、关于如何修改内容区域宽度\" class=\"headerlink\" title=\"五、关于如何修改内容区域宽度\"></a>五、关于如何修改内容区域宽度</h2><p>Next 对内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\\css_variables\\custom.styl 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>\n<p>此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 <code>themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl</code> 文件，更改以下 css 选项定义值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;width: 1150px;&#125;</span><br><span class=\"line\">.container .main-inner &#123;width: 1150px;&#125;</span><br><span class=\"line\">.content-wrap &#123;width: calc(100% - 260px);&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"六、图片模式\"><a href=\"#六、图片模式\" class=\"headerlink\" title=\"六、图片模式\"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\\% gp x-x \\%}...{\\% endgp \\%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Naruto-Pictures</span><br><span class=\"line\">categories: [picture]</span><br><span class=\"line\">tags: [picture,naruto]</span><br><span class=\"line\">date: 2017-11-02 14:36:04</span><br><span class=\"line\">type: &quot;picture&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;% gp 5-3 %&#125;</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</span><br><span class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</span><br><span class=\"line\">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 图片展示效果 </strong><br><code>{\\% gp 5-3 \\%}</code>：设置图片展示效果，参考 <code>themes\\next\\scripts\\tags\\group-pictures.js</code> 注释示意图。<br><img src=\"http://p1.bpimg.com/567571/eaef5acfcb3011c2.png\" alt=\"\"><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。</p>\n<p></p><h3 style=\"color:#f63;\">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 <code>themes\\next\\source\\css\\_common\\components\\tags\\group-pictures.styl</code> 中的以下样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page-post-detail</span> <span class=\"selector-class\">.post-body</span> <span class=\"selector-class\">.group-picture-column</span> &#123;</span><br><span class=\"line\">  // float: none;</span><br><span class=\"line\">  <span class=\"selector-tag\">margin-top</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  // width: auto !important;</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>"},{"title":"Hexo-NexT搭建个人博客（二）","date":"2017-09-30T14:18:22.000Z","comments":0,"_content":"\n本篇文章将介绍基于NexT主题下的一些扩展功能的实现。\n首先，我们需要明白：\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 1.设置侧栏的位置\n修改 <span id=\"inline-purple\">主题配置文件</span> 中 `sidebar.position` 的值，支持的选项有：**left** **right**\n目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。\n\n<!-- more -->\n\n#### 2. 关于添加居中模块\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n代码如下：\n``` html\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n\n#### 3. 添加High一下\n打开博客根目录 `\\themes\\next\\layout\\_partials\\header.swig` ，在\n`<ul> ... /ul>` 标签之间加入以下代码：\n``` javascript\n<li> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n\n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n\n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n\n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n\n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n\n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n\n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n\n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n\n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n\n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n\n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n\n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n\n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n\n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n    })()    '>High一下</a> </li>\n    ```\n\n\n\n#### 4. 添加最近访客\n在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：\n```\n最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n```\n\n\n#### 5. 鼠标点击小红心的设置\n  1. 将 [love.js](https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/love.js) 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>` 标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 页面点击小红心 -->\n  <script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n  ```\n\n#### 6. 背景的设置\n  1. 将 [particle.js](https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/particle.js) 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 背景动画 -->\n  <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n  ```\n\n#### 7.修改文章内链接文本样式\n将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。\n找到文件 `themes\\next\\source\\css\\_custom\\custom.styl` ，添加如下 css 样式：\n``` css\n.post-body p a {\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\n\n#### 8. 多说评论不稳定，加载速度慢怎么办？\n把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。\n将\n```\n(document.getElementsByTagName('head')[0]\n```\n修改成下面的代码\n```\n(document.getElementById('footer')\n```\n\n\n#### 9. 给 Github 添加 README\n默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。\n正确的解决方法其实很简单：\n** 把 README.md 文件的后缀名改成 \"MDOWN\" 然后扔到`blog/source`文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 **\n\n#### 10. 给 Blog 添加 LICENSE\n在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：\n```\n# Creative Commons 4.0 International License.\n# http://creativecommons.org/\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons: by-nc-sa\n#creative_commons:\n```\n将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","source":"_posts/hexo-next-two.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（二）\ndate: 2017-09-30 22:18:22\ncategories: Hexo\ntags: [Hexo, Next]\ncomments: false\n---\n\n本篇文章将介绍基于NexT主题下的一些扩展功能的实现。\n首先，我们需要明白：\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 1.设置侧栏的位置\n修改 <span id=\"inline-purple\">主题配置文件</span> 中 `sidebar.position` 的值，支持的选项有：**left** **right**\n目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。\n\n<!-- more -->\n\n#### 2. 关于添加居中模块\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n代码如下：\n``` html\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n\n#### 3. 添加High一下\n打开博客根目录 `\\themes\\next\\layout\\_partials\\header.swig` ，在\n`<ul> ... /ul>` 标签之间加入以下代码：\n``` javascript\n<li> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n\n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n\n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n\n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n\n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n\n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n\n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n\n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n\n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n\n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n\n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n\n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n\n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n\n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n    })()    '>High一下</a> </li>\n    ```\n\n\n\n#### 4. 添加最近访客\n在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：\n```\n最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n```\n\n\n#### 5. 鼠标点击小红心的设置\n  1. 将 [love.js](https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/love.js) 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>` 标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 页面点击小红心 -->\n  <script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n  ```\n\n#### 6. 背景的设置\n  1. 将 [particle.js](https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/particle.js) 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 背景动画 -->\n  <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n  ```\n\n#### 7.修改文章内链接文本样式\n将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。\n找到文件 `themes\\next\\source\\css\\_custom\\custom.styl` ，添加如下 css 样式：\n``` css\n.post-body p a {\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\n\n#### 8. 多说评论不稳定，加载速度慢怎么办？\n把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。\n将\n```\n(document.getElementsByTagName('head')[0]\n```\n修改成下面的代码\n```\n(document.getElementById('footer')\n```\n\n\n#### 9. 给 Github 添加 README\n默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。\n正确的解决方法其实很简单：\n** 把 README.md 文件的后缀名改成 \"MDOWN\" 然后扔到`blog/source`文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 **\n\n#### 10. 给 Blog 添加 LICENSE\n在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：\n```\n# Creative Commons 4.0 International License.\n# http://creativecommons.org/\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons: by-nc-sa\n#creative_commons:\n```\n将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[博客源码](https://github.com/nigelyao/nigelyao.github.io) ， 欢迎 star\n</i></p>","slug":"hexo-next-two","published":1,"updated":"2019-08-15T07:18:46.829Z","_id":"cjzccpcz6000wz4v5nwmnm3td","layout":"post","photos":[],"link":"","content":"<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"1-设置侧栏的位置\"><a href=\"#1-设置侧栏的位置\" class=\"headerlink\" title=\"1.设置侧栏的位置\"></a>1.设置侧栏的位置</h4><p>修改 <span id=\"inline-purple\">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<strong>left</strong> <strong>right</strong><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>\n<a id=\"more\"></a>\n<h4 id=\"2-关于添加居中模块\"><a href=\"#2-关于添加居中模块\" class=\"headerlink\" title=\"2. 关于添加居中模块\"></a>2. 关于添加居中模块</h4><p><blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blockquote-center\"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-添加High一下\"><a href=\"#3-添加High一下\" class=\"headerlink\" title=\"3. 添加High一下\"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\\themes\\next\\layout\\_partials\\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"把这个链接拖到你的Chrome收藏夹工具栏中\"</span> <span class=\"attr\">href</span>=<span class=\"string\">'javascript:(function() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    function c() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"link\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"type\", \"text/css\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"rel\", \"stylesheet\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"href\", f);</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", l);</span></span><br><span class=\"line\"><span class=\"xml\">        document.body.appendChild(e)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function h() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.getElementsByClassName(l);</span></span><br><span class=\"line\"><span class=\"xml\">        for (var t = 0; t <span class=\"tag\">&lt; <span class=\"attr\">e.length</span>; <span class=\"attr\">t</span>++) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">            document.body.removeChild(e[t])</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function p() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"div\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", a);</span></span><br><span class=\"line\"><span class=\"xml\">        document.body.appendChild(e);</span></span><br><span class=\"line\"><span class=\"xml\">        setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            document.body.removeChild(e)</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, 100)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function d(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            height : e.offsetHeight,</span></span><br><span class=\"line\"><span class=\"xml\">            width : e.offsetWidth</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function v(i) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var s = d(i);</span></span><br><span class=\"line\"><span class=\"xml\">        return s.height &gt; e &amp;&amp; s.height <span class=\"tag\">&lt; <span class=\"attr\">n</span> &amp;&amp; <span class=\"attr\">s.width</span> &gt;</span> t &amp;&amp; s.width <span class=\"tag\">&lt; <span class=\"attr\">r</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function m(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var t = e;</span></span><br><span class=\"line\"><span class=\"xml\">        var n = 0;</span></span><br><span class=\"line\"><span class=\"xml\">        while (!!t) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            n += t.offsetTop;</span></span><br><span class=\"line\"><span class=\"xml\">            t = t.offsetParent</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return n</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function g() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.documentElement;</span></span><br><span class=\"line\"><span class=\"xml\">        if (!!window.innerWidth) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return window.innerHeight</span></span><br><span class=\"line\"><span class=\"xml\">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return e.clientHeight</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return 0</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function y() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        if (window.pageYOffset) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return window.pageYOffset</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function E(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var t = m(e);</span></span><br><span class=\"line\"><span class=\"xml\">        return t &gt;= w &amp;&amp; t <span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">b</span> + <span class=\"attr\">w</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function S() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"audio\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", l);</span></span><br><span class=\"line\"><span class=\"xml\">        e.src = i;</span></span><br><span class=\"line\"><span class=\"xml\">        e.loop = false;</span></span><br><span class=\"line\"><span class=\"xml\">        e.addEventListener(\"canplay\", function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">                x(k)</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;, 500);</span></span><br><span class=\"line\"><span class=\"xml\">            setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">                N();</span></span><br><span class=\"line\"><span class=\"xml\">                p();</span></span><br><span class=\"line\"><span class=\"xml\">                for (var e = 0; e <span class=\"tag\">&lt; <span class=\"attr\">O.length</span>; <span class=\"attr\">e</span>++) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    T(O[e])</span></span><br><span class=\"line\"><span class=\"xml\">                &#125;</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;, 15500)</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, true);</span></span><br><span class=\"line\"><span class=\"xml\">        e.addEventListener(\"ended\", function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            N();</span></span><br><span class=\"line\"><span class=\"xml\">            h()</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, true);</span></span><br><span class=\"line\">        e.innerHTML = \" &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;\";</span><br><span class=\"line\">        document.body.appendChild(e);</span><br><span class=\"line\">        e.play()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function x(e) &#123;</span><br><span class=\"line\">        e.className += \" \" + s + \" \" + o</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function T(e) &#123;</span><br><span class=\"line\">        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function N() &#123;</span><br><span class=\"line\">        var e = document.getElementsByClassName(s);</span><br><span class=\"line\">        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");</span><br><span class=\"line\">        for (var n = 0; n &lt; e.length; ) &#123;</span><br><span class=\"line\">            e[n].className = e[n].className.replace(t, \"\")</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var e = 30;</span><br><span class=\"line\">    var t = 30;</span><br><span class=\"line\">    var n = 350;</span><br><span class=\"line\">    var r = 350;</span><br><span class=\"line\">    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";</span><br><span class=\"line\">    var s = \"mw-harlem_shake_me\";</span><br><span class=\"line\">    var o = \"im_first\";</span><br><span class=\"line\">    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];</span><br><span class=\"line\">    var a = \"mw-strobe_light\";</span><br><span class=\"line\">    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";</span><br><span class=\"line\">    var l = \"mw_added_css\";</span><br><span class=\"line\">    var b = g();</span><br><span class=\"line\">    var w = y();</span><br><span class=\"line\">    var C = document.getElementsByTagName(\"*\");</span><br><span class=\"line\">    var k = null;</span><br><span class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class=\"line\">        var A = C[L];</span><br><span class=\"line\">        if (v(A)) &#123;</span><br><span class=\"line\">            if (E(A)) &#123;</span><br><span class=\"line\">                k = A;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (A === null) &#123;</span><br><span class=\"line\">        console.warn(\"Could not find a node of the right size. Please try a different page.\");</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c();</span><br><span class=\"line\">    S();</span><br><span class=\"line\">    var O = [];</span><br><span class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class=\"line\">        var A = C[L];</span><br><span class=\"line\">        if (v(A)) &#123;</span><br><span class=\"line\">            O.push(A)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"xml\">    &#125;)()    '&gt;High一下<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-添加最近访客\"><a href=\"#4-添加最近访客\" class=\"headerlink\" title=\"4. 添加最近访客\"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最近访客</span><br><span class=\"line\">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-鼠标点击小红心的设置\"><a href=\"#5-鼠标点击小红心的设置\" class=\"headerlink\" title=\"5. 鼠标点击小红心的设置\"></a>5. 鼠标点击小红心的设置</h4><ol>\n<li>将 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/love.js\" target=\"_blank\" rel=\"noopener\">love.js</a> 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code> 标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"6-背景的设置\"><a href=\"#6-背景的设置\" class=\"headerlink\" title=\"6. 背景的设置\"></a>6. 背景的设置</h4><ol>\n<li>将 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/particle.js\" target=\"_blank\" rel=\"noopener\">particle.js</a> 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 背景动画 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/particle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"7-修改文章内链接文本样式\"><a href=\"#7-修改文章内链接文本样式\" class=\"headerlink\" title=\"7.修改文章内链接文本样式\"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\\next\\source\\css\\_custom\\custom.styl</code> ，添加如下 css 样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#0477ab</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">text-decoration</span>: <span class=\"selector-tag\">underline</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-多说评论不稳定，加载速度慢怎么办？\"><a href=\"#8-多说评论不稳定，加载速度慢怎么办？\" class=\"headerlink\" title=\"8. 多说评论不稳定，加载速度慢怎么办？\"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。<br>将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(document.getElementsByTagName(&apos;head&apos;)[0]</span><br></pre></td></tr></table></figure></p>\n<p>修改成下面的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(document.getElementById(&apos;footer&apos;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"9-给-Github-添加-README\"><a href=\"#9-给-Github-添加-README\" class=\"headerlink\" title=\"9. 给 Github 添加 README\"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。<br>正确的解决方法其实很简单：<br><strong> 把 README.md 文件的后缀名改成 “MDOWN” 然后扔到<code>blog/source</code>文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 </strong></p>\n<h4 id=\"10-给-Blog-添加-LICENSE\"><a href=\"#10-给-Blog-添加-LICENSE\" class=\"headerlink\" title=\"10. 给 Blog 添加 LICENSE\"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Creative Commons 4.0 International License.</span><br><span class=\"line\"># http://creativecommons.org/</span><br><span class=\"line\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class=\"line\">creative_commons: by-nc-sa</span><br><span class=\"line\">#creative_commons:</span><br></pre></td></tr></table></figure></p>\n<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>","site":{"data":{}},"excerpt":"<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"1-设置侧栏的位置\"><a href=\"#1-设置侧栏的位置\" class=\"headerlink\" title=\"1.设置侧栏的位置\"></a>1.设置侧栏的位置</h4><p>修改 <span id=\"inline-purple\">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<strong>left</strong> <strong>right</strong><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>","more":"<h4 id=\"2-关于添加居中模块\"><a href=\"#2-关于添加居中模块\" class=\"headerlink\" title=\"2. 关于添加居中模块\"></a>2. 关于添加居中模块</h4><p><blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blockquote-center\"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-添加High一下\"><a href=\"#3-添加High一下\" class=\"headerlink\" title=\"3. 添加High一下\"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\\themes\\next\\layout\\_partials\\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"把这个链接拖到你的Chrome收藏夹工具栏中\"</span> <span class=\"attr\">href</span>=<span class=\"string\">'javascript:(function() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    function c() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"link\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"type\", \"text/css\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"rel\", \"stylesheet\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"href\", f);</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", l);</span></span><br><span class=\"line\"><span class=\"xml\">        document.body.appendChild(e)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function h() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.getElementsByClassName(l);</span></span><br><span class=\"line\"><span class=\"xml\">        for (var t = 0; t <span class=\"tag\">&lt; <span class=\"attr\">e.length</span>; <span class=\"attr\">t</span>++) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">            document.body.removeChild(e[t])</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function p() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"div\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", a);</span></span><br><span class=\"line\"><span class=\"xml\">        document.body.appendChild(e);</span></span><br><span class=\"line\"><span class=\"xml\">        setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            document.body.removeChild(e)</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, 100)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function d(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            height : e.offsetHeight,</span></span><br><span class=\"line\"><span class=\"xml\">            width : e.offsetWidth</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function v(i) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var s = d(i);</span></span><br><span class=\"line\"><span class=\"xml\">        return s.height &gt; e &amp;&amp; s.height <span class=\"tag\">&lt; <span class=\"attr\">n</span> &amp;&amp; <span class=\"attr\">s.width</span> &gt;</span> t &amp;&amp; s.width <span class=\"tag\">&lt; <span class=\"attr\">r</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function m(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var t = e;</span></span><br><span class=\"line\"><span class=\"xml\">        var n = 0;</span></span><br><span class=\"line\"><span class=\"xml\">        while (!!t) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            n += t.offsetTop;</span></span><br><span class=\"line\"><span class=\"xml\">            t = t.offsetParent</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return n</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function g() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.documentElement;</span></span><br><span class=\"line\"><span class=\"xml\">        if (!!window.innerWidth) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return window.innerHeight</span></span><br><span class=\"line\"><span class=\"xml\">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return e.clientHeight</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return 0</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function y() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        if (window.pageYOffset) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            return window.pageYOffset</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function E(e) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var t = m(e);</span></span><br><span class=\"line\"><span class=\"xml\">        return t &gt;= w &amp;&amp; t <span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">b</span> + <span class=\"attr\">w</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    function S() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        var e = document.createElement(\"audio\");</span></span><br><span class=\"line\"><span class=\"xml\">        e.setAttribute(\"class\", l);</span></span><br><span class=\"line\"><span class=\"xml\">        e.src = i;</span></span><br><span class=\"line\"><span class=\"xml\">        e.loop = false;</span></span><br><span class=\"line\"><span class=\"xml\">        e.addEventListener(\"canplay\", function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">                x(k)</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;, 500);</span></span><br><span class=\"line\"><span class=\"xml\">            setTimeout(function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">                N();</span></span><br><span class=\"line\"><span class=\"xml\">                p();</span></span><br><span class=\"line\"><span class=\"xml\">                for (var e = 0; e <span class=\"tag\">&lt; <span class=\"attr\">O.length</span>; <span class=\"attr\">e</span>++) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    T(O[e])</span></span><br><span class=\"line\"><span class=\"xml\">                &#125;</span></span><br><span class=\"line\"><span class=\"xml\">            &#125;, 15500)</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, true);</span></span><br><span class=\"line\"><span class=\"xml\">        e.addEventListener(\"ended\", function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            N();</span></span><br><span class=\"line\"><span class=\"xml\">            h()</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;, true);</span></span><br><span class=\"line\">        e.innerHTML = \" &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;\";</span><br><span class=\"line\">        document.body.appendChild(e);</span><br><span class=\"line\">        e.play()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function x(e) &#123;</span><br><span class=\"line\">        e.className += \" \" + s + \" \" + o</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function T(e) &#123;</span><br><span class=\"line\">        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function N() &#123;</span><br><span class=\"line\">        var e = document.getElementsByClassName(s);</span><br><span class=\"line\">        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");</span><br><span class=\"line\">        for (var n = 0; n &lt; e.length; ) &#123;</span><br><span class=\"line\">            e[n].className = e[n].className.replace(t, \"\")</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var e = 30;</span><br><span class=\"line\">    var t = 30;</span><br><span class=\"line\">    var n = 350;</span><br><span class=\"line\">    var r = 350;</span><br><span class=\"line\">    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";</span><br><span class=\"line\">    var s = \"mw-harlem_shake_me\";</span><br><span class=\"line\">    var o = \"im_first\";</span><br><span class=\"line\">    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];</span><br><span class=\"line\">    var a = \"mw-strobe_light\";</span><br><span class=\"line\">    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";</span><br><span class=\"line\">    var l = \"mw_added_css\";</span><br><span class=\"line\">    var b = g();</span><br><span class=\"line\">    var w = y();</span><br><span class=\"line\">    var C = document.getElementsByTagName(\"*\");</span><br><span class=\"line\">    var k = null;</span><br><span class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class=\"line\">        var A = C[L];</span><br><span class=\"line\">        if (v(A)) &#123;</span><br><span class=\"line\">            if (E(A)) &#123;</span><br><span class=\"line\">                k = A;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (A === null) &#123;</span><br><span class=\"line\">        console.warn(\"Could not find a node of the right size. Please try a different page.\");</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c();</span><br><span class=\"line\">    S();</span><br><span class=\"line\">    var O = [];</span><br><span class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class=\"line\">        var A = C[L];</span><br><span class=\"line\">        if (v(A)) &#123;</span><br><span class=\"line\">            O.push(A)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"xml\">    &#125;)()    '&gt;High一下<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-添加最近访客\"><a href=\"#4-添加最近访客\" class=\"headerlink\" title=\"4. 添加最近访客\"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最近访客</span><br><span class=\"line\">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-鼠标点击小红心的设置\"><a href=\"#5-鼠标点击小红心的设置\" class=\"headerlink\" title=\"5. 鼠标点击小红心的设置\"></a>5. 鼠标点击小红心的设置</h4><ol>\n<li>将 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/love.js\" target=\"_blank\" rel=\"noopener\">love.js</a> 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code> 标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"6-背景的设置\"><a href=\"#6-背景的设置\" class=\"headerlink\" title=\"6. 背景的设置\"></a>6. 背景的设置</h4><ol>\n<li>将 <a href=\"https://github.com/nigelyao/nigelyao.github.io/blob/master/js/src/particle.js\" target=\"_blank\" rel=\"noopener\">particle.js</a> 文件添加到 \\themes\\next\\source\\js\\src 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 背景动画 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/particle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"7-修改文章内链接文本样式\"><a href=\"#7-修改文章内链接文本样式\" class=\"headerlink\" title=\"7.修改文章内链接文本样式\"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\\next\\source\\css\\_custom\\custom.styl</code> ，添加如下 css 样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#0477ab</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">text-decoration</span>: <span class=\"selector-tag\">underline</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-多说评论不稳定，加载速度慢怎么办？\"><a href=\"#8-多说评论不稳定，加载速度慢怎么办？\" class=\"headerlink\" title=\"8. 多说评论不稳定，加载速度慢怎么办？\"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。<br>将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(document.getElementsByTagName(&apos;head&apos;)[0]</span><br></pre></td></tr></table></figure></p>\n<p>修改成下面的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(document.getElementById(&apos;footer&apos;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"9-给-Github-添加-README\"><a href=\"#9-给-Github-添加-README\" class=\"headerlink\" title=\"9. 给 Github 添加 README\"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。<br>正确的解决方法其实很简单：<br><strong> 把 README.md 文件的后缀名改成 “MDOWN” 然后扔到<code>blog/source</code>文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 </strong></p>\n<h4 id=\"10-给-Blog-添加-LICENSE\"><a href=\"#10-给-Blog-添加-LICENSE\" class=\"headerlink\" title=\"10. 给 Blog 添加 LICENSE\"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Creative Commons 4.0 International License.</span><br><span class=\"line\"># http://creativecommons.org/</span><br><span class=\"line\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class=\"line\">creative_commons: by-nc-sa</span><br><span class=\"line\">#creative_commons:</span><br></pre></td></tr></table></figure></p>\n<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/nigelyao/nigelyao.github.io\" target=\"_blank\" rel=\"noopener\">博客源码</a> ， 欢迎 star<br></i></p>"},{"title":"【转】在2016年学JavaScript是一种什么样的体验","date":"2017-10-16T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<!-- more -->\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p>\n<p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n译者：方应杭\n[原文](https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2017-d3a717dd577f)\n","source":"_posts/how-it-feels-to-learn-javascript-in-2016.md","raw":"---\ntitle: 【转】在2016年学JavaScript是一种什么样的体验\ndate: 2017-10-16 23:25:24\ncategories: 前端\ntags: [essay, JavaScript]\ncomments: false\n---\n<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<!-- more -->\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p>\n<p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n译者：方应杭\n[原文](https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2017-d3a717dd577f)\n","slug":"how-it-feels-to-learn-javascript-in-2016","published":1,"updated":"2019-08-15T07:18:45.891Z","_id":"cjzccpcz7000zz4v5at4l11og","layout":"post","photos":[],"link":"","content":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<a id=\"more\"></a>\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p><br><p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n<p>译者：方应杭<br><a href=\"https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2017-d3a717dd577f\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n","site":{"data":{}},"excerpt":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>","more":"<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p><br><p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n<p>译者：方应杭<br><a href=\"https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2017-d3a717dd577f\" target=\"_blank\" rel=\"noopener\">原文</a></p>"},{"title":"JavaScript 内存管理 & 垃圾回收机制","date":"2018-02-18T05:25:24.000Z","comments":0,"_content":"\n# 简介\n低级语言，比如C，有低级的内存管理基元，像 malloc()，free()。另一方面，JavaScript 的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动释放”。后者被称为垃圾回收。这个“自动”是混淆并给 JavaScript （和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。\n\n<!-- more -->\n\n# JavaScript 的内存分配\n## 变量初始化\n为了不让程序员为分配费心，JavaScript 在定义变量时完成内存分配。\n例如：\n``` javascript\nvar n = 123;  // 给数值变量分配内存\n\n// 为对象及其包含变量分配内存\nvar o = {\n    a: 1,\n    b: null\n};\n\n// 函数表达式也能分配一个对象\nobj.addEventListener(\"click\", function(){\n  obj.style.backgroundColor = 'blue';\n}, false);\n```\n\n## 通过函数调用的内存分配\n有些函数调用结果是分配对象内存：\n``` javascript\nvar d = new Date();\nvar e = document.createElement(\"div\");\n```\n\n## 值的使用\n使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。\n\n## 当内存不再需要使用时释放\n大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。\n\n高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这个过程是一个近似的，因为要知道某块内存是否需要是 [无法判定的](http://en.wikipedia.org/wiki/Decidability_%28logic%29) （无法被某种算法所解决）。\n\n# 垃圾回收机制——GC\nJavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。\n\n原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。\n\nJavaScript 垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。\n\n不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。\n\n还是上代码说明吧：\n``` javascript\nfunction fn1() {\n    var obj = {name: 'yu', age: 10};\n} \nfunction fn2() {\n    var obj = {name: 'yu', age: 11};\n    return obj;\n}\nvar a = fn1();\nvar b = fn2();\n```\n我们来看代码是如何执行的。首先定义了两个 function,分别叫做 fn1 和 fn2，当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象，而当调用结束后，出了 fn1 的环境，那么该块内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。\n\n这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。\n\n## 标记清除\njs 中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个而变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。\n\n## 引用计数\n这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\nNetscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。\n``` javascript\nfunction fn() {\n    var a = {};\n    var b = {};\n    a.pro = b;\n    b.pro = a;\n} \nfn();\n```\n以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄漏。在IE7与IE8上，内存直线上升。\n最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样\n``` javascript\nmyObject.element = null;\nelement.o = null;\n```\n\n# 内存管理\n1、什么时候触发垃圾回收？\n垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。\n\n微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。\n\n2、合理的 GC 方案\n1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：\n- 遍历所有可访问的对象。\n- 回收已不可访问的对象。\n\n2）、GC 的缺陷\n和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。\n\n# 总结\n一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。\nsetInterval 会产生回调堆积，特别是时间很短的时候。\n\n# 扩展\n\nsetInterval 有个很烦的地方就是当 js 主程序空闲的时候，执行代码队列里面的代码的时候，如果此时候我们有一个问题，定时器是等到回调执行完，才开始计时进行下次循环呢？还是只要一次计时完毕，插入回调之后不管回调执不执行就开始计时呢？答案显示是后者，这也就是我说 setInterval 坑的原因啊，因为这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行，这时候回调肯定是不会执行的，因此如果这个时候无限定时时间到了会再次插入回调，这个时候如果发现队列中的第一次回调没有执行，那么再次插入的回调浏览器就默认取消，（这是以防出现回调连续执行多次的情况）但是这又引发了新的情况就是有些回调是不能取消掉的？","source":"_posts/js-memory-management-and-gc.md","raw":"---\ntitle: JavaScript 内存管理 & 垃圾回收机制\ndate: 2018-02-18 13:25:24\ncategories: 综合\ntags: [JavaScript]\ncomments: false\n---\n\n# 简介\n低级语言，比如C，有低级的内存管理基元，像 malloc()，free()。另一方面，JavaScript 的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动释放”。后者被称为垃圾回收。这个“自动”是混淆并给 JavaScript （和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。\n\n<!-- more -->\n\n# JavaScript 的内存分配\n## 变量初始化\n为了不让程序员为分配费心，JavaScript 在定义变量时完成内存分配。\n例如：\n``` javascript\nvar n = 123;  // 给数值变量分配内存\n\n// 为对象及其包含变量分配内存\nvar o = {\n    a: 1,\n    b: null\n};\n\n// 函数表达式也能分配一个对象\nobj.addEventListener(\"click\", function(){\n  obj.style.backgroundColor = 'blue';\n}, false);\n```\n\n## 通过函数调用的内存分配\n有些函数调用结果是分配对象内存：\n``` javascript\nvar d = new Date();\nvar e = document.createElement(\"div\");\n```\n\n## 值的使用\n使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。\n\n## 当内存不再需要使用时释放\n大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。\n\n高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这个过程是一个近似的，因为要知道某块内存是否需要是 [无法判定的](http://en.wikipedia.org/wiki/Decidability_%28logic%29) （无法被某种算法所解决）。\n\n# 垃圾回收机制——GC\nJavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。\n\n原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。\n\nJavaScript 垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。\n\n不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。\n\n还是上代码说明吧：\n``` javascript\nfunction fn1() {\n    var obj = {name: 'yu', age: 10};\n} \nfunction fn2() {\n    var obj = {name: 'yu', age: 11};\n    return obj;\n}\nvar a = fn1();\nvar b = fn2();\n```\n我们来看代码是如何执行的。首先定义了两个 function,分别叫做 fn1 和 fn2，当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象，而当调用结束后，出了 fn1 的环境，那么该块内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。\n\n这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。\n\n## 标记清除\njs 中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个而变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。\n\n## 引用计数\n这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\nNetscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。\n``` javascript\nfunction fn() {\n    var a = {};\n    var b = {};\n    a.pro = b;\n    b.pro = a;\n} \nfn();\n```\n以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄漏。在IE7与IE8上，内存直线上升。\n最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样\n``` javascript\nmyObject.element = null;\nelement.o = null;\n```\n\n# 内存管理\n1、什么时候触发垃圾回收？\n垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。\n\n微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。\n\n2、合理的 GC 方案\n1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：\n- 遍历所有可访问的对象。\n- 回收已不可访问的对象。\n\n2）、GC 的缺陷\n和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。\n\n# 总结\n一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。\nsetInterval 会产生回调堆积，特别是时间很短的时候。\n\n# 扩展\n\nsetInterval 有个很烦的地方就是当 js 主程序空闲的时候，执行代码队列里面的代码的时候，如果此时候我们有一个问题，定时器是等到回调执行完，才开始计时进行下次循环呢？还是只要一次计时完毕，插入回调之后不管回调执不执行就开始计时呢？答案显示是后者，这也就是我说 setInterval 坑的原因啊，因为这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行，这时候回调肯定是不会执行的，因此如果这个时候无限定时时间到了会再次插入回调，这个时候如果发现队列中的第一次回调没有执行，那么再次插入的回调浏览器就默认取消，（这是以防出现回调连续执行多次的情况）但是这又引发了新的情况就是有些回调是不能取消掉的？","slug":"js-memory-management-and-gc","published":1,"updated":"2019-08-15T07:19:15.323Z","_id":"cjzccpcza0013z4v5r7w1hsdg","layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>低级语言，比如C，有低级的内存管理基元，像 malloc()，free()。另一方面，JavaScript 的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动释放”。后者被称为垃圾回收。这个“自动”是混淆并给 JavaScript （和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。</p>\n<a id=\"more\"></a>\n<h1 id=\"JavaScript-的内存分配\"><a href=\"#JavaScript-的内存分配\" class=\"headerlink\" title=\"JavaScript 的内存分配\"></a>JavaScript 的内存分配</h1><h2 id=\"变量初始化\"><a href=\"#变量初始化\" class=\"headerlink\" title=\"变量初始化\"></a>变量初始化</h2><p>为了不让程序员为分配费心，JavaScript 在定义变量时完成内存分配。<br>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">123</span>;  <span class=\"comment\">// 给数值变量分配内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为对象及其包含变量分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式也能分配一个对象</span></span><br><span class=\"line\">obj.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  obj.style.backgroundColor = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过函数调用的内存分配\"><a href=\"#通过函数调用的内存分配\" class=\"headerlink\" title=\"通过函数调用的内存分配\"></a>通过函数调用的内存分配</h2><p>有些函数调用结果是分配对象内存：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"值的使用\"><a href=\"#值的使用\" class=\"headerlink\" title=\"值的使用\"></a>值的使用</h2><p>使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p>\n<h2 id=\"当内存不再需要使用时释放\"><a href=\"#当内存不再需要使用时释放\" class=\"headerlink\" title=\"当内存不再需要使用时释放\"></a>当内存不再需要使用时释放</h2><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。</p>\n<p>高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这个过程是一个近似的，因为要知道某块内存是否需要是 <a href=\"http://en.wikipedia.org/wiki/Decidability_%28logic%29\" target=\"_blank\" rel=\"noopener\">无法判定的</a> （无法被某种算法所解决）。</p>\n<h1 id=\"垃圾回收机制——GC\"><a href=\"#垃圾回收机制——GC\" class=\"headerlink\" title=\"垃圾回收机制——GC\"></a>垃圾回收机制——GC</h1><p>JavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>\n<p>JavaScript 垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>\n<p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p>\n<p>还是上代码说明吧：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'yu'</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'yu'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fn2();</span><br></pre></td></tr></table></figure></p>\n<p>我们来看代码是如何执行的。首先定义了两个 function,分别叫做 fn1 和 fn2，当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象，而当调用结束后，出了 fn1 的环境，那么该块内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。</p>\n<p>这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。</p>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>js 中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个而变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>Netscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;&#125;;</span><br><span class=\"line\">    a.pro = b;</span><br><span class=\"line\">    b.pro = a;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄漏。在IE7与IE8上，内存直线上升。<br>最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject.element = <span class=\"literal\">null</span>;</span><br><span class=\"line\">element.o = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p>1、什么时候触发垃圾回收？<br>垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。</p>\n<p>微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。</p>\n<p>2、合理的 GC 方案<br>1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：</p>\n<ul>\n<li>遍历所有可访问的对象。</li>\n<li>回收已不可访问的对象。</li>\n</ul>\n<p>2）、GC 的缺陷<br>和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。<br>setInterval 会产生回调堆积，特别是时间很短的时候。</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>setInterval 有个很烦的地方就是当 js 主程序空闲的时候，执行代码队列里面的代码的时候，如果此时候我们有一个问题，定时器是等到回调执行完，才开始计时进行下次循环呢？还是只要一次计时完毕，插入回调之后不管回调执不执行就开始计时呢？答案显示是后者，这也就是我说 setInterval 坑的原因啊，因为这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行，这时候回调肯定是不会执行的，因此如果这个时候无限定时时间到了会再次插入回调，这个时候如果发现队列中的第一次回调没有执行，那么再次插入的回调浏览器就默认取消，（这是以防出现回调连续执行多次的情况）但是这又引发了新的情况就是有些回调是不能取消掉的？</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>低级语言，比如C，有低级的内存管理基元，像 malloc()，free()。另一方面，JavaScript 的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动释放”。后者被称为垃圾回收。这个“自动”是混淆并给 JavaScript （和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。</p>","more":"<h1 id=\"JavaScript-的内存分配\"><a href=\"#JavaScript-的内存分配\" class=\"headerlink\" title=\"JavaScript 的内存分配\"></a>JavaScript 的内存分配</h1><h2 id=\"变量初始化\"><a href=\"#变量初始化\" class=\"headerlink\" title=\"变量初始化\"></a>变量初始化</h2><p>为了不让程序员为分配费心，JavaScript 在定义变量时完成内存分配。<br>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">123</span>;  <span class=\"comment\">// 给数值变量分配内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为对象及其包含变量分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式也能分配一个对象</span></span><br><span class=\"line\">obj.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  obj.style.backgroundColor = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过函数调用的内存分配\"><a href=\"#通过函数调用的内存分配\" class=\"headerlink\" title=\"通过函数调用的内存分配\"></a>通过函数调用的内存分配</h2><p>有些函数调用结果是分配对象内存：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"值的使用\"><a href=\"#值的使用\" class=\"headerlink\" title=\"值的使用\"></a>值的使用</h2><p>使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p>\n<h2 id=\"当内存不再需要使用时释放\"><a href=\"#当内存不再需要使用时释放\" class=\"headerlink\" title=\"当内存不再需要使用时释放\"></a>当内存不再需要使用时释放</h2><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。</p>\n<p>高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这个过程是一个近似的，因为要知道某块内存是否需要是 <a href=\"http://en.wikipedia.org/wiki/Decidability_%28logic%29\" target=\"_blank\" rel=\"noopener\">无法判定的</a> （无法被某种算法所解决）。</p>\n<h1 id=\"垃圾回收机制——GC\"><a href=\"#垃圾回收机制——GC\" class=\"headerlink\" title=\"垃圾回收机制——GC\"></a>垃圾回收机制——GC</h1><p>JavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>\n<p>JavaScript 垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>\n<p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p>\n<p>还是上代码说明吧：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'yu'</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'yu'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fn2();</span><br></pre></td></tr></table></figure></p>\n<p>我们来看代码是如何执行的。首先定义了两个 function,分别叫做 fn1 和 fn2，当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象，而当调用结束后，出了 fn1 的环境，那么该块内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。</p>\n<p>这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。</p>\n<h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><p>js 中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个而变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>Netscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;&#125;;</span><br><span class=\"line\">    a.pro = b;</span><br><span class=\"line\">    b.pro = a;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄漏。在IE7与IE8上，内存直线上升。<br>最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject.element = <span class=\"literal\">null</span>;</span><br><span class=\"line\">element.o = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p>1、什么时候触发垃圾回收？<br>垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。</p>\n<p>微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。</p>\n<p>2、合理的 GC 方案<br>1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：</p>\n<ul>\n<li>遍历所有可访问的对象。</li>\n<li>回收已不可访问的对象。</li>\n</ul>\n<p>2）、GC 的缺陷<br>和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。<br>setInterval 会产生回调堆积，特别是时间很短的时候。</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>setInterval 有个很烦的地方就是当 js 主程序空闲的时候，执行代码队列里面的代码的时候，如果此时候我们有一个问题，定时器是等到回调执行完，才开始计时进行下次循环呢？还是只要一次计时完毕，插入回调之后不管回调执不执行就开始计时呢？答案显示是后者，这也就是我说 setInterval 坑的原因啊，因为这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行，这时候回调肯定是不会执行的，因此如果这个时候无限定时时间到了会再次插入回调，这个时候如果发现队列中的第一次回调没有执行，那么再次插入的回调浏览器就默认取消，（这是以防出现回调连续执行多次的情况）但是这又引发了新的情况就是有些回调是不能取消掉的？</p>"},{"title":"腻子脚本 — HTML5Shiv","date":"2018-01-18T05:25:24.000Z","comments":0,"_content":"\n# 简介\n[HTML5shiv](https://github.com/aFarkas/html5shiv) is a javascript workaround to provide support for the new HTML 5 elements in IE Browsers older than IE 9.\n\n- 越来越多的站点开始使用 HTML5 标签。但是目前的情况是还有很多人在使用IE6，IE7，IE8。\n- 而IE6，IE7，IE8是不能识别 HTML5 标签的。\n- 这里提供一种让 IE 浏览器支持 HTML5 的方法，那就是使用 HTML5Shiv。\n- HTML5Shiv 主要解决 HTML5 提出的新的元素不被IE6-8识别。\n\n<!-- more -->\n\n# 为什么要使用 HTML5 的新标签\n* `<header>` 定义页面或区段的头部\n* `<footer>` 定义页面或区段的尾部\n* `<nav>` 定义页面或区段的导航区域\n* `<section>` 页面的逻辑区域或内容组合\n* `<article>` 定义正文或一段完整的内容\n* `<aside>` 定义补充或相关内容\n\n使用他们能让代码语义化更直观，而且更方便 SEO 优化，但是此 HTML5 新标签在 IE6/IE7/IE8 上并不能识别，需要 javascript 处理，所以我们就需要使用目前使用最广泛的 html5shiv.js 了，包括 Bootstrap 框架也是使用的这个来兼容低版本 IE 的。\n\n\n# 实现原理\n　　这些 HTML5 新元素不能被 IE6-8 识别，不能作为父节点包裹子元素，并且不能应用 CSS 样式。让 CSS 样式应用在未知元素上只需执行 `document.createElement(elementName)` 即可实现。HTML5Shiv 就是根据这个原理创建的。\n\n<p id=\"div-border-top-purple\">关于 HTML5 不得不提 IE，在苹果、Google、Opera 和 Mozilla 等主流浏览器厂商积极参与新版本 HTML 标准的制定和推广时，微软却对 HTML5 规范不屑一顾。然而微软近期才表态要在 IE 中支持 HTML5,以致到今天为止的 IE8 及以下是无法支持 HTML5 标签的.</p>\n\n\n# 使用\n\nHTML5Shiv 的使用非常的简单，考虑到 IE9 是支持 HTML5 的，所以只需要在页面 head 中添加如下代码即可： \n```\n<!--[if lt IE 9]>\n  <script src=\".js/html5shiv.js \"></script >\n<![endif]–-> \n```\n\nThe syntax for the HTML5shiv is : \n``` html\n<head>\n  <!--[if lt IE 9]>\n  <script src=\"./js/html5shiv.js\"></script>\n  <![endif]-->\n</head>\n```\n\n\n# 注意事项\n## 注意事项一\n在引入了 html5shiv.js 以后，还需要在你自己的 css 文件中添加:\n``` css\narticle,aside,dialog,footer,header,section,footer,nav,figure,menu{\n  display:block;\n}\n```\n主要是让这些 HTML5 标签成块状,像 div 那样。\n\nNo matter how ways what did you using, you should be initialize the new lable css.\n``` css\narticle,aside,dialog,footer,header,section,footer,nav,figure,menu{\n  display:block;\n}\n```\n\n## 注意事项二\n　　因为 html5shiv.js 是 JavaScript 文件，如果 IE6/7/8 禁用脚本的用户,那么就变成了无样式的\"白板\"网页,我们该怎么解决呢?\n　　我们可以参照 Facebook 的做法，即引导用户进入带有 noscript 标识的页面，用 xhtml 标签替换 html5 标签，这要比为了保持兼容而写大量 hack 的作法更轻便一些。\n``` html\n<!--[if lte IE 8]> \n<noscript>\n<style>\n  .html5-wrappers{display:none!important;}\n</style>\n<div class=\"ie-noscript-warning\">您的浏览器禁用了脚本，请<a href=\"#\">查看这里</a>来启用脚本!或者<a href=\"/?noscript=1\">继续访问</a>.\n</div>\n</noscript>\n<![endif]-->\n```\n    \n这样可以引导用户开启脚本，或者直接跳到 xhtml 标签设计的页面。\n\n\n## 注意事项三\n\n* HTML5shiv is found within the `<head>` tag.\n* HTML5shiv is a javascript file that is referenced in a `<script>` tag.\n* You should usr HTML5shiv when you are using the new HTML5 element such as : `<header>`,`<footer>`,`<nav>`,`<aside>`,`<article>`\n* Download the latest version of HTML5shiv from [github](https://github.com/aFarkas/html5shiv/) or reference the Open Source Software CDN version at `https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js` or `https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js`.\n* You will require the HTML5shiv to provide compatibility for IE Browser older than IE 9.\n\n## Example\n### HTML 5 Document\nIf you created a new web page in HTML5,you would include the HTML5shiv as follows:\n\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<!--[if lt IE 9]>\n  <script src=\".js/html5shiv.min.js\"></script>\n<![endif]-->\n</head>\n```\n\n\nIn this HTML 5 Document example,we have added HTML5shiv within the <head> tag.In this case,the HTML5shiv is a javascript file called **html5shiv.js** found in the ./js directory.\n\nIf you did not want to download and store the HTML5shiv on your site,you could reference the version found on the Open Source Software CDN site.\n\n### Support two CDN site\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<title>HTML 5 Example by github.com/nigelyao</title>\n<!--[if lt IE 9]>\n    <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n<![endif]-->\n</head>\n```\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<title>HTML 5 Example by github.com/nigelyao</title>\n<!--[if lt IE 9]>\n    <script src=\"https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js\"></script>\n<![endif]-->\n</head>\n```\n\n## 注意事项四\n\n### HTML 4.0.1 Transitional Document\nHTML5shiv does not apply to HTML 4.0.1 Transitional.\n\n### XHTML 1.0 Transitional Document\nHTML5shiv does not apply to XHTML 1.0 Transitional.\n\n### XHTML 1.0 Strict Document\nHTML5shiv does not apply to XHTML 1.0 Strict.\n\n### XHTML 1.1 Document\nHTML5shiv does not apply to XHTML 1.1.\n\n\n# Tips\n关于低版本浏览器不能识别 HTML5 标签的问题，除了使用 html5shiv.js 之外，还有一种做法就是为网站创建多套模版，通过程序对 User-Agent 的判断给不同的浏览器用户显示不同的页面，比如优酷网就是采用的这种模式。\n\n# 总结\n[HTML5Shiv](https://nigelyao.github.io/2018/01/18/html5shiv/) and [Respond.js](https://nigelyao.github.io/2018/02/11/respond-js/) for IE8 support of HTML5 elements and media queries.\n\n\n","source":"_posts/html5shiv.md","raw":"---\ntitle: 腻子脚本 — HTML5Shiv\ndate: 2018-01-18 13:25:24\ncategories: 前端\ntags: [JavaScript]\ncomments: false\n---\n\n# 简介\n[HTML5shiv](https://github.com/aFarkas/html5shiv) is a javascript workaround to provide support for the new HTML 5 elements in IE Browsers older than IE 9.\n\n- 越来越多的站点开始使用 HTML5 标签。但是目前的情况是还有很多人在使用IE6，IE7，IE8。\n- 而IE6，IE7，IE8是不能识别 HTML5 标签的。\n- 这里提供一种让 IE 浏览器支持 HTML5 的方法，那就是使用 HTML5Shiv。\n- HTML5Shiv 主要解决 HTML5 提出的新的元素不被IE6-8识别。\n\n<!-- more -->\n\n# 为什么要使用 HTML5 的新标签\n* `<header>` 定义页面或区段的头部\n* `<footer>` 定义页面或区段的尾部\n* `<nav>` 定义页面或区段的导航区域\n* `<section>` 页面的逻辑区域或内容组合\n* `<article>` 定义正文或一段完整的内容\n* `<aside>` 定义补充或相关内容\n\n使用他们能让代码语义化更直观，而且更方便 SEO 优化，但是此 HTML5 新标签在 IE6/IE7/IE8 上并不能识别，需要 javascript 处理，所以我们就需要使用目前使用最广泛的 html5shiv.js 了，包括 Bootstrap 框架也是使用的这个来兼容低版本 IE 的。\n\n\n# 实现原理\n　　这些 HTML5 新元素不能被 IE6-8 识别，不能作为父节点包裹子元素，并且不能应用 CSS 样式。让 CSS 样式应用在未知元素上只需执行 `document.createElement(elementName)` 即可实现。HTML5Shiv 就是根据这个原理创建的。\n\n<p id=\"div-border-top-purple\">关于 HTML5 不得不提 IE，在苹果、Google、Opera 和 Mozilla 等主流浏览器厂商积极参与新版本 HTML 标准的制定和推广时，微软却对 HTML5 规范不屑一顾。然而微软近期才表态要在 IE 中支持 HTML5,以致到今天为止的 IE8 及以下是无法支持 HTML5 标签的.</p>\n\n\n# 使用\n\nHTML5Shiv 的使用非常的简单，考虑到 IE9 是支持 HTML5 的，所以只需要在页面 head 中添加如下代码即可： \n```\n<!--[if lt IE 9]>\n  <script src=\".js/html5shiv.js \"></script >\n<![endif]–-> \n```\n\nThe syntax for the HTML5shiv is : \n``` html\n<head>\n  <!--[if lt IE 9]>\n  <script src=\"./js/html5shiv.js\"></script>\n  <![endif]-->\n</head>\n```\n\n\n# 注意事项\n## 注意事项一\n在引入了 html5shiv.js 以后，还需要在你自己的 css 文件中添加:\n``` css\narticle,aside,dialog,footer,header,section,footer,nav,figure,menu{\n  display:block;\n}\n```\n主要是让这些 HTML5 标签成块状,像 div 那样。\n\nNo matter how ways what did you using, you should be initialize the new lable css.\n``` css\narticle,aside,dialog,footer,header,section,footer,nav,figure,menu{\n  display:block;\n}\n```\n\n## 注意事项二\n　　因为 html5shiv.js 是 JavaScript 文件，如果 IE6/7/8 禁用脚本的用户,那么就变成了无样式的\"白板\"网页,我们该怎么解决呢?\n　　我们可以参照 Facebook 的做法，即引导用户进入带有 noscript 标识的页面，用 xhtml 标签替换 html5 标签，这要比为了保持兼容而写大量 hack 的作法更轻便一些。\n``` html\n<!--[if lte IE 8]> \n<noscript>\n<style>\n  .html5-wrappers{display:none!important;}\n</style>\n<div class=\"ie-noscript-warning\">您的浏览器禁用了脚本，请<a href=\"#\">查看这里</a>来启用脚本!或者<a href=\"/?noscript=1\">继续访问</a>.\n</div>\n</noscript>\n<![endif]-->\n```\n    \n这样可以引导用户开启脚本，或者直接跳到 xhtml 标签设计的页面。\n\n\n## 注意事项三\n\n* HTML5shiv is found within the `<head>` tag.\n* HTML5shiv is a javascript file that is referenced in a `<script>` tag.\n* You should usr HTML5shiv when you are using the new HTML5 element such as : `<header>`,`<footer>`,`<nav>`,`<aside>`,`<article>`\n* Download the latest version of HTML5shiv from [github](https://github.com/aFarkas/html5shiv/) or reference the Open Source Software CDN version at `https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js` or `https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js`.\n* You will require the HTML5shiv to provide compatibility for IE Browser older than IE 9.\n\n## Example\n### HTML 5 Document\nIf you created a new web page in HTML5,you would include the HTML5shiv as follows:\n\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<!--[if lt IE 9]>\n  <script src=\".js/html5shiv.min.js\"></script>\n<![endif]-->\n</head>\n```\n\n\nIn this HTML 5 Document example,we have added HTML5shiv within the <head> tag.In this case,the HTML5shiv is a javascript file called **html5shiv.js** found in the ./js directory.\n\nIf you did not want to download and store the HTML5shiv on your site,you could reference the version found on the Open Source Software CDN site.\n\n### Support two CDN site\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<title>HTML 5 Example by github.com/nigelyao</title>\n<!--[if lt IE 9]>\n    <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n<![endif]-->\n</head>\n```\n``` html\n<head>\n<meta charset=\"UTF-8\">\n<title>HTML 5 Example by github.com/nigelyao</title>\n<!--[if lt IE 9]>\n    <script src=\"https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js\"></script>\n<![endif]-->\n</head>\n```\n\n## 注意事项四\n\n### HTML 4.0.1 Transitional Document\nHTML5shiv does not apply to HTML 4.0.1 Transitional.\n\n### XHTML 1.0 Transitional Document\nHTML5shiv does not apply to XHTML 1.0 Transitional.\n\n### XHTML 1.0 Strict Document\nHTML5shiv does not apply to XHTML 1.0 Strict.\n\n### XHTML 1.1 Document\nHTML5shiv does not apply to XHTML 1.1.\n\n\n# Tips\n关于低版本浏览器不能识别 HTML5 标签的问题，除了使用 html5shiv.js 之外，还有一种做法就是为网站创建多套模版，通过程序对 User-Agent 的判断给不同的浏览器用户显示不同的页面，比如优酷网就是采用的这种模式。\n\n# 总结\n[HTML5Shiv](https://nigelyao.github.io/2018/01/18/html5shiv/) and [Respond.js](https://nigelyao.github.io/2018/02/11/respond-js/) for IE8 support of HTML5 elements and media queries.\n\n\n","slug":"html5shiv","published":1,"updated":"2019-08-15T07:19:16.138Z","_id":"cjzccpczc0015z4v5whoa2n3l","layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"https://github.com/aFarkas/html5shiv\" target=\"_blank\" rel=\"noopener\">HTML5shiv</a> is a javascript workaround to provide support for the new HTML 5 elements in IE Browsers older than IE 9.</p>\n<ul>\n<li>越来越多的站点开始使用 HTML5 标签。但是目前的情况是还有很多人在使用IE6，IE7，IE8。</li>\n<li>而IE6，IE7，IE8是不能识别 HTML5 标签的。</li>\n<li>这里提供一种让 IE 浏览器支持 HTML5 的方法，那就是使用 HTML5Shiv。</li>\n<li>HTML5Shiv 主要解决 HTML5 提出的新的元素不被IE6-8识别。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"为什么要使用-HTML5-的新标签\"><a href=\"#为什么要使用-HTML5-的新标签\" class=\"headerlink\" title=\"为什么要使用 HTML5 的新标签\"></a>为什么要使用 HTML5 的新标签</h1><ul>\n<li><code>&lt;header&gt;</code> 定义页面或区段的头部</li>\n<li><code>&lt;footer&gt;</code> 定义页面或区段的尾部</li>\n<li><code>&lt;nav&gt;</code> 定义页面或区段的导航区域</li>\n<li><code>&lt;section&gt;</code> 页面的逻辑区域或内容组合</li>\n<li><code>&lt;article&gt;</code> 定义正文或一段完整的内容</li>\n<li><code>&lt;aside&gt;</code> 定义补充或相关内容</li>\n</ul>\n<p>使用他们能让代码语义化更直观，而且更方便 SEO 优化，但是此 HTML5 新标签在 IE6/IE7/IE8 上并不能识别，需要 javascript 处理，所以我们就需要使用目前使用最广泛的 html5shiv.js 了，包括 Bootstrap 框架也是使用的这个来兼容低版本 IE 的。</p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>　　这些 HTML5 新元素不能被 IE6-8 识别，不能作为父节点包裹子元素，并且不能应用 CSS 样式。让 CSS 样式应用在未知元素上只需执行 <code>document.createElement(elementName)</code> 即可实现。HTML5Shiv 就是根据这个原理创建的。</p>\n<p id=\"div-border-top-purple\">关于 HTML5 不得不提 IE，在苹果、Google、Opera 和 Mozilla 等主流浏览器厂商积极参与新版本 HTML 标准的制定和推广时，微软却对 HTML5 规范不屑一顾。然而微软近期才表态要在 IE 中支持 HTML5,以致到今天为止的 IE8 及以下是无法支持 HTML5 标签的.</p>\n\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>HTML5Shiv 的使用非常的简单，考虑到 IE9 是支持 HTML5 的，所以只需要在页面 head 中添加如下代码即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script src=&quot;.js/html5shiv.js &quot;&gt;&lt;/script &gt;</span><br><span class=\"line\">&lt;![endif]–-&gt;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax for the HTML5shiv is :<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;script src=\"./js/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><h2 id=\"注意事项一\"><a href=\"#注意事项一\" class=\"headerlink\" title=\"注意事项一\"></a>注意事项一</h2><p>在引入了 html5shiv.js 以后，还需要在你自己的 css 文件中添加:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">dialog</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">figure</span>,<span class=\"selector-tag\">menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主要是让这些 HTML5 标签成块状,像 div 那样。</p>\n<p>No matter how ways what did you using, you should be initialize the new lable css.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">dialog</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">figure</span>,<span class=\"selector-tag\">menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意事项二\"><a href=\"#注意事项二\" class=\"headerlink\" title=\"注意事项二\"></a>注意事项二</h2><p>　　因为 html5shiv.js 是 JavaScript 文件，如果 IE6/7/8 禁用脚本的用户,那么就变成了无样式的”白板”网页,我们该怎么解决呢?<br>　　我们可以参照 Facebook 的做法，即引导用户进入带有 noscript 标识的页面，用 xhtml 标签替换 html5 标签，这要比为了保持兼容而写大量 hack 的作法更轻便一些。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 8]&gt; </span></span><br><span class=\"line\"><span class=\"comment\">&lt;noscript&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  .html5-wrappers&#123;display:none!important;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;div class=\"ie-noscript-warning\"&gt;您的浏览器禁用了脚本，请&lt;a href=\"#\"&gt;查看这里&lt;/a&gt;来启用脚本!或者&lt;a href=\"/?noscript=1\"&gt;继续访问&lt;/a&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/noscript&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样可以引导用户开启脚本，或者直接跳到 xhtml 标签设计的页面。</p>\n<h2 id=\"注意事项三\"><a href=\"#注意事项三\" class=\"headerlink\" title=\"注意事项三\"></a>注意事项三</h2><ul>\n<li>HTML5shiv is found within the <code>&lt;head&gt;</code> tag.</li>\n<li>HTML5shiv is a javascript file that is referenced in a <code>&lt;script&gt;</code> tag.</li>\n<li>You should usr HTML5shiv when you are using the new HTML5 element such as : <code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;aside&gt;</code>,<code>&lt;article&gt;</code></li>\n<li>Download the latest version of HTML5shiv from <a href=\"https://github.com/aFarkas/html5shiv/\" target=\"_blank\" rel=\"noopener\">github</a> or reference the Open Source Software CDN version at <code>https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js</code> or <code>https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js</code>.</li>\n<li>You will require the HTML5shiv to provide compatibility for IE Browser older than IE 9.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"HTML-5-Document\"><a href=\"#HTML-5-Document\" class=\"headerlink\" title=\"HTML 5 Document\"></a>HTML 5 Document</h3><p>If you created a new web page in HTML5,you would include the HTML5shiv as follows:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;script src=\".js/html5shiv.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In this HTML 5 Document example,we have added HTML5shiv within the <head> tag.In this case,the HTML5shiv is a javascript file called <strong>html5shiv.js</strong> found in the ./js directory.</head></p>\n<p>If you did not want to download and store the HTML5shiv on your site,you could reference the version found on the Open Source Software CDN site.</p>\n<h3 id=\"Support-two-CDN-site\"><a href=\"#Support-two-CDN-site\" class=\"headerlink\" title=\"Support two CDN site\"></a>Support two CDN site</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML 5 Example by github.com/nigelyao<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML 5 Example by github.com/nigelyao<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项四\"><a href=\"#注意事项四\" class=\"headerlink\" title=\"注意事项四\"></a>注意事项四</h2><h3 id=\"HTML-4-0-1-Transitional-Document\"><a href=\"#HTML-4-0-1-Transitional-Document\" class=\"headerlink\" title=\"HTML 4.0.1 Transitional Document\"></a>HTML 4.0.1 Transitional Document</h3><p>HTML5shiv does not apply to HTML 4.0.1 Transitional.</p>\n<h3 id=\"XHTML-1-0-Transitional-Document\"><a href=\"#XHTML-1-0-Transitional-Document\" class=\"headerlink\" title=\"XHTML 1.0 Transitional Document\"></a>XHTML 1.0 Transitional Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Transitional.</p>\n<h3 id=\"XHTML-1-0-Strict-Document\"><a href=\"#XHTML-1-0-Strict-Document\" class=\"headerlink\" title=\"XHTML 1.0 Strict Document\"></a>XHTML 1.0 Strict Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Strict.</p>\n<h3 id=\"XHTML-1-1-Document\"><a href=\"#XHTML-1-1-Document\" class=\"headerlink\" title=\"XHTML 1.1 Document\"></a>XHTML 1.1 Document</h3><p>HTML5shiv does not apply to XHTML 1.1.</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>关于低版本浏览器不能识别 HTML5 标签的问题，除了使用 html5shiv.js 之外，还有一种做法就是为网站创建多套模版，通过程序对 User-Agent 的判断给不同的浏览器用户显示不同的页面，比如优酷网就是采用的这种模式。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"https://nigelyao.github.io/2018/01/18/html5shiv/\">HTML5Shiv</a> and <a href=\"https://nigelyao.github.io/2018/02/11/respond-js/\">Respond.js</a> for IE8 support of HTML5 elements and media queries.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"https://github.com/aFarkas/html5shiv\" target=\"_blank\" rel=\"noopener\">HTML5shiv</a> is a javascript workaround to provide support for the new HTML 5 elements in IE Browsers older than IE 9.</p>\n<ul>\n<li>越来越多的站点开始使用 HTML5 标签。但是目前的情况是还有很多人在使用IE6，IE7，IE8。</li>\n<li>而IE6，IE7，IE8是不能识别 HTML5 标签的。</li>\n<li>这里提供一种让 IE 浏览器支持 HTML5 的方法，那就是使用 HTML5Shiv。</li>\n<li>HTML5Shiv 主要解决 HTML5 提出的新的元素不被IE6-8识别。</li>\n</ul>","more":"<h1 id=\"为什么要使用-HTML5-的新标签\"><a href=\"#为什么要使用-HTML5-的新标签\" class=\"headerlink\" title=\"为什么要使用 HTML5 的新标签\"></a>为什么要使用 HTML5 的新标签</h1><ul>\n<li><code>&lt;header&gt;</code> 定义页面或区段的头部</li>\n<li><code>&lt;footer&gt;</code> 定义页面或区段的尾部</li>\n<li><code>&lt;nav&gt;</code> 定义页面或区段的导航区域</li>\n<li><code>&lt;section&gt;</code> 页面的逻辑区域或内容组合</li>\n<li><code>&lt;article&gt;</code> 定义正文或一段完整的内容</li>\n<li><code>&lt;aside&gt;</code> 定义补充或相关内容</li>\n</ul>\n<p>使用他们能让代码语义化更直观，而且更方便 SEO 优化，但是此 HTML5 新标签在 IE6/IE7/IE8 上并不能识别，需要 javascript 处理，所以我们就需要使用目前使用最广泛的 html5shiv.js 了，包括 Bootstrap 框架也是使用的这个来兼容低版本 IE 的。</p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>　　这些 HTML5 新元素不能被 IE6-8 识别，不能作为父节点包裹子元素，并且不能应用 CSS 样式。让 CSS 样式应用在未知元素上只需执行 <code>document.createElement(elementName)</code> 即可实现。HTML5Shiv 就是根据这个原理创建的。</p>\n<p id=\"div-border-top-purple\">关于 HTML5 不得不提 IE，在苹果、Google、Opera 和 Mozilla 等主流浏览器厂商积极参与新版本 HTML 标准的制定和推广时，微软却对 HTML5 规范不屑一顾。然而微软近期才表态要在 IE 中支持 HTML5,以致到今天为止的 IE8 及以下是无法支持 HTML5 标签的.</p>\n\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>HTML5Shiv 的使用非常的简单，考虑到 IE9 是支持 HTML5 的，所以只需要在页面 head 中添加如下代码即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script src=&quot;.js/html5shiv.js &quot;&gt;&lt;/script &gt;</span><br><span class=\"line\">&lt;![endif]–-&gt;</span><br></pre></td></tr></table></figure></p>\n<p>The syntax for the HTML5shiv is :<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;script src=\"./js/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><h2 id=\"注意事项一\"><a href=\"#注意事项一\" class=\"headerlink\" title=\"注意事项一\"></a>注意事项一</h2><p>在引入了 html5shiv.js 以后，还需要在你自己的 css 文件中添加:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">dialog</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">figure</span>,<span class=\"selector-tag\">menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主要是让这些 HTML5 标签成块状,像 div 那样。</p>\n<p>No matter how ways what did you using, you should be initialize the new lable css.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">dialog</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">figure</span>,<span class=\"selector-tag\">menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意事项二\"><a href=\"#注意事项二\" class=\"headerlink\" title=\"注意事项二\"></a>注意事项二</h2><p>　　因为 html5shiv.js 是 JavaScript 文件，如果 IE6/7/8 禁用脚本的用户,那么就变成了无样式的”白板”网页,我们该怎么解决呢?<br>　　我们可以参照 Facebook 的做法，即引导用户进入带有 noscript 标识的页面，用 xhtml 标签替换 html5 标签，这要比为了保持兼容而写大量 hack 的作法更轻便一些。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 8]&gt; </span></span><br><span class=\"line\"><span class=\"comment\">&lt;noscript&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  .html5-wrappers&#123;display:none!important;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;div class=\"ie-noscript-warning\"&gt;您的浏览器禁用了脚本，请&lt;a href=\"#\"&gt;查看这里&lt;/a&gt;来启用脚本!或者&lt;a href=\"/?noscript=1\"&gt;继续访问&lt;/a&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/noscript&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样可以引导用户开启脚本，或者直接跳到 xhtml 标签设计的页面。</p>\n<h2 id=\"注意事项三\"><a href=\"#注意事项三\" class=\"headerlink\" title=\"注意事项三\"></a>注意事项三</h2><ul>\n<li>HTML5shiv is found within the <code>&lt;head&gt;</code> tag.</li>\n<li>HTML5shiv is a javascript file that is referenced in a <code>&lt;script&gt;</code> tag.</li>\n<li>You should usr HTML5shiv when you are using the new HTML5 element such as : <code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;aside&gt;</code>,<code>&lt;article&gt;</code></li>\n<li>Download the latest version of HTML5shiv from <a href=\"https://github.com/aFarkas/html5shiv/\" target=\"_blank\" rel=\"noopener\">github</a> or reference the Open Source Software CDN version at <code>https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js</code> or <code>https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js</code>.</li>\n<li>You will require the HTML5shiv to provide compatibility for IE Browser older than IE 9.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><h3 id=\"HTML-5-Document\"><a href=\"#HTML-5-Document\" class=\"headerlink\" title=\"HTML 5 Document\"></a>HTML 5 Document</h3><p>If you created a new web page in HTML5,you would include the HTML5shiv as follows:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;script src=\".js/html5shiv.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In this HTML 5 Document example,we have added HTML5shiv within the <head> tag.In this case,the HTML5shiv is a javascript file called <strong>html5shiv.js</strong> found in the ./js directory.</head></p>\n<p>If you did not want to download and store the HTML5shiv on your site,you could reference the version found on the Open Source Software CDN site.</p>\n<h3 id=\"Support-two-CDN-site\"><a href=\"#Support-two-CDN-site\" class=\"headerlink\" title=\"Support two CDN site\"></a>Support two CDN site</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML 5 Example by github.com/nigelyao<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML 5 Example by github.com/nigelyao<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项四\"><a href=\"#注意事项四\" class=\"headerlink\" title=\"注意事项四\"></a>注意事项四</h2><h3 id=\"HTML-4-0-1-Transitional-Document\"><a href=\"#HTML-4-0-1-Transitional-Document\" class=\"headerlink\" title=\"HTML 4.0.1 Transitional Document\"></a>HTML 4.0.1 Transitional Document</h3><p>HTML5shiv does not apply to HTML 4.0.1 Transitional.</p>\n<h3 id=\"XHTML-1-0-Transitional-Document\"><a href=\"#XHTML-1-0-Transitional-Document\" class=\"headerlink\" title=\"XHTML 1.0 Transitional Document\"></a>XHTML 1.0 Transitional Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Transitional.</p>\n<h3 id=\"XHTML-1-0-Strict-Document\"><a href=\"#XHTML-1-0-Strict-Document\" class=\"headerlink\" title=\"XHTML 1.0 Strict Document\"></a>XHTML 1.0 Strict Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Strict.</p>\n<h3 id=\"XHTML-1-1-Document\"><a href=\"#XHTML-1-1-Document\" class=\"headerlink\" title=\"XHTML 1.1 Document\"></a>XHTML 1.1 Document</h3><p>HTML5shiv does not apply to XHTML 1.1.</p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>关于低版本浏览器不能识别 HTML5 标签的问题，除了使用 html5shiv.js 之外，还有一种做法就是为网站创建多套模版，通过程序对 User-Agent 的判断给不同的浏览器用户显示不同的页面，比如优酷网就是采用的这种模式。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"https://nigelyao.github.io/2018/01/18/html5shiv/\">HTML5Shiv</a> and <a href=\"https://nigelyao.github.io/2018/02/11/respond-js/\">Respond.js</a> for IE8 support of HTML5 elements and media queries.</p>"},{"title":"如何解决内存泄漏引发的血案","date":"2018-02-27T17:01:00.000Z","comments":0,"_content":"\n之前做了一个谷歌浏览器的插件开发，它会打开一个链接，然后收集数据并上传。依次循环，但是跑的时间久了，内存就变得很高，然后浏览器就会变卡，慢慢的影响这个插件的运行，最后浏览器也会崩溃。\n\n# 什么是内存泄漏\n内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。在 C++ 中，因为是手动管理内存，内存泄露是经常出现的事情。而现在流行的 C# 和 Java 等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄露。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。\n\n<!-- more -->\n\n自动垃圾收集是不能代替有效的内存管理的，特别是在大型，长时间运行的Web应用程序中。\n\n# 内存泄漏的几种情况\n\n1、Delete 一个 Object 的属性会让此对象变慢\n``` javascript\nvar obj = {x: 'y'};\ndelete obj;  // 此时 obj 会成一个慢对象\nobj.x;\n\nvar obj = {x: 'y'};\nobj = null;  // 应该这样\n```\n\n2、闭包\n1）在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。\n2）闭包可以维持函数内局部变量，使其得不到释放。\n``` javascript\nvar a = function() {\n  var largeStr = new Array(1000000).join('x');\n  return function() {\n    return largeStr;\n  }\n}();\n```\n\n3、DOM 泄漏\n当原有的 DOM 被移除时，子节点引用没有被移除则无法回收\n当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。\n``` javascript\nvar btn = document.getElementById(\"myBth\");\nbtn.onclick = function() {\n  document.getElementById(\"myDiv\").innerHTML = 'test memory';\n}\n```\n\n应改成下面：\n\n``` javascript\nvar btn = document.getElementById(\"myBth\");\nbtn.onclick = function() {\n  btn.onclick = null;\n  document.getElementById(\"myDiv\").innerHTML = 'test memory';\n}\n```\n\n4、Timers 计(定)时器泄漏\n定时器也是常见产生内存泄露的地方\n``` javascript\nfor(var i=0; i<90000; i++) {\n  var obj = {\n    callAgain: function() {\n        var ref = this;\n        var val = setTimeout(function(){\n          ref.callAgain();\n        },90000);\n    }\n  };\n  obj.callAgain();\n  // 虽然你想回收但是 timer 还在\n  obj = null;\n}\n```\n\n5、jquery 的 html() 函数\n页面中还需要注意的一点是使用 jquery 的 html() 函数，该函数不是基于 innerHTML 实现的，大量使用同样也会导致系统性能下降。\n\n6、使用事件委托代替事件注册\n页面中如果元素过多，且需要为每个元素注册相同的 click 事件，这个时候我们优先考虑到使用委托机制，将需要注册的 click 事件注册到元素的上层或者顶层元素，这样我们就节省了大量的 click 注册事件。\n\n7、自动类型装箱转换\n``` javascript\nvar s = \"test test\";\nalert(s.length);\n```\n\ns 本身是一个 string 而非 object，它没有 length 属性，所以当访问 length 时，JS 引擎会自动创建一个临时 String 对象封装 s，而这个对象一定会泄漏。这个 bug 匪夷所思，所幸解决起来相当容易，记得所有值类型做.运算之前先显示转换一下：\n``` javascript\nvar s = \"test test\";\nalert(new String(s).length);\n```\n\n# 调试内存\n1、Timeline\nChrome 自带的内存调试工具可以很方便的查看内存使用情况和内存泄漏：\nF12 -> Timeline -> Memory\n点击 record 即可开始收集，点击弹出框的 Finish 即停止，然后会统计出 record 到 Finish 这一段时间内的内存使用情况。\n\n2、Profiles\nChrome 自带的 Profiles 可以记录当前的内存使用情况\nF12 -> Profiles -> Take Heap Snapshot\n点击 Take Snapshot 就可以拍下当前 JS 的 heap 快照。\n*注意：每次拍快照前，都会先自动执行一个 GC，所以在视图里的对象都是可及的。*\n\n\n","source":"_posts/memory-leak.md","raw":"---\ntitle: 如何解决内存泄漏引发的血案\ndate: 2018-02-28 01:01:00\ncategories: 综合\ntags: [JavaScript]\ncomments: false\n---\n\n之前做了一个谷歌浏览器的插件开发，它会打开一个链接，然后收集数据并上传。依次循环，但是跑的时间久了，内存就变得很高，然后浏览器就会变卡，慢慢的影响这个插件的运行，最后浏览器也会崩溃。\n\n# 什么是内存泄漏\n内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。在 C++ 中，因为是手动管理内存，内存泄露是经常出现的事情。而现在流行的 C# 和 Java 等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄露。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。\n\n<!-- more -->\n\n自动垃圾收集是不能代替有效的内存管理的，特别是在大型，长时间运行的Web应用程序中。\n\n# 内存泄漏的几种情况\n\n1、Delete 一个 Object 的属性会让此对象变慢\n``` javascript\nvar obj = {x: 'y'};\ndelete obj;  // 此时 obj 会成一个慢对象\nobj.x;\n\nvar obj = {x: 'y'};\nobj = null;  // 应该这样\n```\n\n2、闭包\n1）在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。\n2）闭包可以维持函数内局部变量，使其得不到释放。\n``` javascript\nvar a = function() {\n  var largeStr = new Array(1000000).join('x');\n  return function() {\n    return largeStr;\n  }\n}();\n```\n\n3、DOM 泄漏\n当原有的 DOM 被移除时，子节点引用没有被移除则无法回收\n当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。\n``` javascript\nvar btn = document.getElementById(\"myBth\");\nbtn.onclick = function() {\n  document.getElementById(\"myDiv\").innerHTML = 'test memory';\n}\n```\n\n应改成下面：\n\n``` javascript\nvar btn = document.getElementById(\"myBth\");\nbtn.onclick = function() {\n  btn.onclick = null;\n  document.getElementById(\"myDiv\").innerHTML = 'test memory';\n}\n```\n\n4、Timers 计(定)时器泄漏\n定时器也是常见产生内存泄露的地方\n``` javascript\nfor(var i=0; i<90000; i++) {\n  var obj = {\n    callAgain: function() {\n        var ref = this;\n        var val = setTimeout(function(){\n          ref.callAgain();\n        },90000);\n    }\n  };\n  obj.callAgain();\n  // 虽然你想回收但是 timer 还在\n  obj = null;\n}\n```\n\n5、jquery 的 html() 函数\n页面中还需要注意的一点是使用 jquery 的 html() 函数，该函数不是基于 innerHTML 实现的，大量使用同样也会导致系统性能下降。\n\n6、使用事件委托代替事件注册\n页面中如果元素过多，且需要为每个元素注册相同的 click 事件，这个时候我们优先考虑到使用委托机制，将需要注册的 click 事件注册到元素的上层或者顶层元素，这样我们就节省了大量的 click 注册事件。\n\n7、自动类型装箱转换\n``` javascript\nvar s = \"test test\";\nalert(s.length);\n```\n\ns 本身是一个 string 而非 object，它没有 length 属性，所以当访问 length 时，JS 引擎会自动创建一个临时 String 对象封装 s，而这个对象一定会泄漏。这个 bug 匪夷所思，所幸解决起来相当容易，记得所有值类型做.运算之前先显示转换一下：\n``` javascript\nvar s = \"test test\";\nalert(new String(s).length);\n```\n\n# 调试内存\n1、Timeline\nChrome 自带的内存调试工具可以很方便的查看内存使用情况和内存泄漏：\nF12 -> Timeline -> Memory\n点击 record 即可开始收集，点击弹出框的 Finish 即停止，然后会统计出 record 到 Finish 这一段时间内的内存使用情况。\n\n2、Profiles\nChrome 自带的 Profiles 可以记录当前的内存使用情况\nF12 -> Profiles -> Take Heap Snapshot\n点击 Take Snapshot 就可以拍下当前 JS 的 heap 快照。\n*注意：每次拍快照前，都会先自动执行一个 GC，所以在视图里的对象都是可及的。*\n\n\n","slug":"memory-leak","published":1,"updated":"2019-08-15T07:19:14.548Z","_id":"cjzccpczg001az4v572t8lqaj","layout":"post","photos":[],"link":"","content":"<p>之前做了一个谷歌浏览器的插件开发，它会打开一个链接，然后收集数据并上传。依次循环，但是跑的时间久了，内存就变得很高，然后浏览器就会变卡，慢慢的影响这个插件的运行，最后浏览器也会崩溃。</p>\n<h1 id=\"什么是内存泄漏\"><a href=\"#什么是内存泄漏\" class=\"headerlink\" title=\"什么是内存泄漏\"></a>什么是内存泄漏</h1><p>内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。在 C++ 中，因为是手动管理内存，内存泄露是经常出现的事情。而现在流行的 C# 和 Java 等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄露。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。</p>\n<a id=\"more\"></a>\n<p>自动垃圾收集是不能代替有效的内存管理的，特别是在大型，长时间运行的Web应用程序中。</p>\n<h1 id=\"内存泄漏的几种情况\"><a href=\"#内存泄漏的几种情况\" class=\"headerlink\" title=\"内存泄漏的几种情况\"></a>内存泄漏的几种情况</h1><p>1、Delete 一个 Object 的属性会让此对象变慢<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"string\">'y'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj;  <span class=\"comment\">// 此时 obj 会成一个慢对象</span></span><br><span class=\"line\">obj.x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"string\">'y'</span>&#125;;</span><br><span class=\"line\">obj = <span class=\"literal\">null</span>;  <span class=\"comment\">// 应该这样</span></span><br></pre></td></tr></table></figure></p>\n<p>2、闭包<br>1）在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。<br>2）闭包可以维持函数内局部变量，使其得不到释放。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> largeStr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'x'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> largeStr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>3、DOM 泄漏<br>当原有的 DOM 被移除时，子节点引用没有被移除则无法回收<br>当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBth\"</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML = <span class=\"string\">'test memory'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>应改成下面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBth\"</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  btn.onclick = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML = <span class=\"string\">'test memory'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、Timers 计(定)时器泄漏<br>定时器也是常见产生内存泄露的地方<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">90000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    callAgain: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ref = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          ref.callAgain();</span><br><span class=\"line\">        &#125;,<span class=\"number\">90000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  obj.callAgain();</span><br><span class=\"line\">  <span class=\"comment\">// 虽然你想回收但是 timer 还在</span></span><br><span class=\"line\">  obj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5、jquery 的 html() 函数<br>页面中还需要注意的一点是使用 jquery 的 html() 函数，该函数不是基于 innerHTML 实现的，大量使用同样也会导致系统性能下降。</p>\n<p>6、使用事件委托代替事件注册<br>页面中如果元素过多，且需要为每个元素注册相同的 click 事件，这个时候我们优先考虑到使用委托机制，将需要注册的 click 事件注册到元素的上层或者顶层元素，这样我们就节省了大量的 click 注册事件。</p>\n<p>7、自动类型装箱转换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"test test\"</span>;</span><br><span class=\"line\">alert(s.length);</span><br></pre></td></tr></table></figure></p>\n<p>s 本身是一个 string 而非 object，它没有 length 属性，所以当访问 length 时，JS 引擎会自动创建一个临时 String 对象封装 s，而这个对象一定会泄漏。这个 bug 匪夷所思，所幸解决起来相当容易，记得所有值类型做.运算之前先显示转换一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"test test\"</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(s).length);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"调试内存\"><a href=\"#调试内存\" class=\"headerlink\" title=\"调试内存\"></a>调试内存</h1><p>1、Timeline<br>Chrome 自带的内存调试工具可以很方便的查看内存使用情况和内存泄漏：<br>F12 -&gt; Timeline -&gt; Memory<br>点击 record 即可开始收集，点击弹出框的 Finish 即停止，然后会统计出 record 到 Finish 这一段时间内的内存使用情况。</p>\n<p>2、Profiles<br>Chrome 自带的 Profiles 可以记录当前的内存使用情况<br>F12 -&gt; Profiles -&gt; Take Heap Snapshot<br>点击 Take Snapshot 就可以拍下当前 JS 的 heap 快照。<br><em>注意：每次拍快照前，都会先自动执行一个 GC，所以在视图里的对象都是可及的。</em></p>\n","site":{"data":{}},"excerpt":"<p>之前做了一个谷歌浏览器的插件开发，它会打开一个链接，然后收集数据并上传。依次循环，但是跑的时间久了，内存就变得很高，然后浏览器就会变卡，慢慢的影响这个插件的运行，最后浏览器也会崩溃。</p>\n<h1 id=\"什么是内存泄漏\"><a href=\"#什么是内存泄漏\" class=\"headerlink\" title=\"什么是内存泄漏\"></a>什么是内存泄漏</h1><p>内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。在 C++ 中，因为是手动管理内存，内存泄露是经常出现的事情。而现在流行的 C# 和 Java 等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄露。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。</p>","more":"<p>自动垃圾收集是不能代替有效的内存管理的，特别是在大型，长时间运行的Web应用程序中。</p>\n<h1 id=\"内存泄漏的几种情况\"><a href=\"#内存泄漏的几种情况\" class=\"headerlink\" title=\"内存泄漏的几种情况\"></a>内存泄漏的几种情况</h1><p>1、Delete 一个 Object 的属性会让此对象变慢<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"string\">'y'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj;  <span class=\"comment\">// 此时 obj 会成一个慢对象</span></span><br><span class=\"line\">obj.x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"string\">'y'</span>&#125;;</span><br><span class=\"line\">obj = <span class=\"literal\">null</span>;  <span class=\"comment\">// 应该这样</span></span><br></pre></td></tr></table></figure></p>\n<p>2、闭包<br>1）在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。<br>2）闭包可以维持函数内局部变量，使其得不到释放。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> largeStr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'x'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> largeStr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>3、DOM 泄漏<br>当原有的 DOM 被移除时，子节点引用没有被移除则无法回收<br>当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBth\"</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML = <span class=\"string\">'test memory'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>应改成下面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBth\"</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  btn.onclick = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>).innerHTML = <span class=\"string\">'test memory'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、Timers 计(定)时器泄漏<br>定时器也是常见产生内存泄露的地方<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">90000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    callAgain: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ref = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          ref.callAgain();</span><br><span class=\"line\">        &#125;,<span class=\"number\">90000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  obj.callAgain();</span><br><span class=\"line\">  <span class=\"comment\">// 虽然你想回收但是 timer 还在</span></span><br><span class=\"line\">  obj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5、jquery 的 html() 函数<br>页面中还需要注意的一点是使用 jquery 的 html() 函数，该函数不是基于 innerHTML 实现的，大量使用同样也会导致系统性能下降。</p>\n<p>6、使用事件委托代替事件注册<br>页面中如果元素过多，且需要为每个元素注册相同的 click 事件，这个时候我们优先考虑到使用委托机制，将需要注册的 click 事件注册到元素的上层或者顶层元素，这样我们就节省了大量的 click 注册事件。</p>\n<p>7、自动类型装箱转换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"test test\"</span>;</span><br><span class=\"line\">alert(s.length);</span><br></pre></td></tr></table></figure></p>\n<p>s 本身是一个 string 而非 object，它没有 length 属性，所以当访问 length 时，JS 引擎会自动创建一个临时 String 对象封装 s，而这个对象一定会泄漏。这个 bug 匪夷所思，所幸解决起来相当容易，记得所有值类型做.运算之前先显示转换一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"test test\"</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(s).length);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"调试内存\"><a href=\"#调试内存\" class=\"headerlink\" title=\"调试内存\"></a>调试内存</h1><p>1、Timeline<br>Chrome 自带的内存调试工具可以很方便的查看内存使用情况和内存泄漏：<br>F12 -&gt; Timeline -&gt; Memory<br>点击 record 即可开始收集，点击弹出框的 Finish 即停止，然后会统计出 record 到 Finish 这一段时间内的内存使用情况。</p>\n<p>2、Profiles<br>Chrome 自带的 Profiles 可以记录当前的内存使用情况<br>F12 -&gt; Profiles -&gt; Take Heap Snapshot<br>点击 Take Snapshot 就可以拍下当前 JS 的 heap 快照。<br><em>注意：每次拍快照前，都会先自动执行一个 GC，所以在视图里的对象都是可及的。</em></p>"},{"title":"npm 的一个小细节","date":"2018-05-19T17:25:24.000Z","comments":0,"summary_img":null,"_content":"\n在使用 electron 构建桌面应用的时候，在 package.json 里面的 scripts 字段是这样的\n``` \n\"scripts\": {\n  \"start\": \"electron .\"\n},\n```\n我们可以执行 npm start ，那么它就会执行 `electron .` 这个命令。\n那么如果我们直接执行 `electron .`\n由于我们没有将 electron 加入到全局，所以不行。\n那么为什么 npm start 可以执行呢？\n\n<!-- more -->\n\n这就涉及到 npm run 命令的一个小细节了。\nnpm run xxx 可以执行 package.json 里面 scripts 里面对应的命令，并且是 shell 脚本。但是在执行的时候有一个小处理：\n\n**npm run 新建的这个 shell ，会将当前目录的 node_modules/.bin 子目录加入 PATH 变量，执行结束后，再将 PATH 变量恢复原样。**\n\n这就解释了，没有安装全局的 electron ，直接运行 `electron .` 是不行的，但是使用 `npm start` 来运行 `electron .` 可以。\n\n**下面介绍一个使用 npm 的实践：**\n很多朋友使用 hexo 来构建博客；hexo 是基于 Node.js 产物，用它发表博文，很是方便；你只需 hexo clean, hexo g, hexo d三个命令即可；而且每一个命令必须等待前一个命令运行完成。文章数据一多，一套命令打下来，也得 20s+；如果略懂 npm，在 package.js 中加入点命名，例如像这样；\n``` javascript\n\"scripts\": {\n  \"start\": \"sudo hexo clean && sudo hexo g && sudo gulp && sudo hexo d\"\n}\n```\n\n那么 只需运行 npm start 就好，可将时间消耗缩短至 2s节省时间虽说不多，却也是数量级的提升，而且代价只是那么小，并一劳永逸。所以有必要对此。\n\n关于 npm 的详细学习，可以查看：[npm 全面介绍](https://nigelyao.github.io/2018/04/10/npm/)","source":"_posts/npm-two.md","raw":"title: npm 的一个小细节\ndate: 2018-05-20 01:25:24\ncategories: 前端\ntags: [npm]\ncomments: false\nsummary_img: \n---\n\n在使用 electron 构建桌面应用的时候，在 package.json 里面的 scripts 字段是这样的\n``` \n\"scripts\": {\n  \"start\": \"electron .\"\n},\n```\n我们可以执行 npm start ，那么它就会执行 `electron .` 这个命令。\n那么如果我们直接执行 `electron .`\n由于我们没有将 electron 加入到全局，所以不行。\n那么为什么 npm start 可以执行呢？\n\n<!-- more -->\n\n这就涉及到 npm run 命令的一个小细节了。\nnpm run xxx 可以执行 package.json 里面 scripts 里面对应的命令，并且是 shell 脚本。但是在执行的时候有一个小处理：\n\n**npm run 新建的这个 shell ，会将当前目录的 node_modules/.bin 子目录加入 PATH 变量，执行结束后，再将 PATH 变量恢复原样。**\n\n这就解释了，没有安装全局的 electron ，直接运行 `electron .` 是不行的，但是使用 `npm start` 来运行 `electron .` 可以。\n\n**下面介绍一个使用 npm 的实践：**\n很多朋友使用 hexo 来构建博客；hexo 是基于 Node.js 产物，用它发表博文，很是方便；你只需 hexo clean, hexo g, hexo d三个命令即可；而且每一个命令必须等待前一个命令运行完成。文章数据一多，一套命令打下来，也得 20s+；如果略懂 npm，在 package.js 中加入点命名，例如像这样；\n``` javascript\n\"scripts\": {\n  \"start\": \"sudo hexo clean && sudo hexo g && sudo gulp && sudo hexo d\"\n}\n```\n\n那么 只需运行 npm start 就好，可将时间消耗缩短至 2s节省时间虽说不多，却也是数量级的提升，而且代价只是那么小，并一劳永逸。所以有必要对此。\n\n关于 npm 的详细学习，可以查看：[npm 全面介绍](https://nigelyao.github.io/2018/04/10/npm/)","slug":"npm-two","published":1,"updated":"2019-08-15T07:19:13.760Z","_id":"cjzccpczj001dz4v5bj4ofnd5","layout":"post","photos":[],"link":"","content":"<p>在使用 electron 构建桌面应用的时候，在 package.json 里面的 scripts 字段是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>我们可以执行 npm start ，那么它就会执行 <code>electron .</code> 这个命令。<br>那么如果我们直接执行 <code>electron .</code><br>由于我们没有将 electron 加入到全局，所以不行。<br>那么为什么 npm start 可以执行呢？</p>\n<a id=\"more\"></a>\n<p>这就涉及到 npm run 命令的一个小细节了。<br>npm run xxx 可以执行 package.json 里面 scripts 里面对应的命令，并且是 shell 脚本。但是在执行的时候有一个小处理：</p>\n<p><strong>npm run 新建的这个 shell ，会将当前目录的 node_modules/.bin 子目录加入 PATH 变量，执行结束后，再将 PATH 变量恢复原样。</strong></p>\n<p>这就解释了，没有安装全局的 electron ，直接运行 <code>electron .</code> 是不行的，但是使用 <code>npm start</code> 来运行 <code>electron .</code> 可以。</p>\n<p><strong>下面介绍一个使用 npm 的实践：</strong><br>很多朋友使用 hexo 来构建博客；hexo 是基于 Node.js 产物，用它发表博文，很是方便；你只需 hexo clean, hexo g, hexo d三个命令即可；而且每一个命令必须等待前一个命令运行完成。文章数据一多，一套命令打下来，也得 20s+；如果略懂 npm，在 package.js 中加入点命名，例如像这样；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp; sudo gulp &amp;&amp; sudo hexo d\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么 只需运行 npm start 就好，可将时间消耗缩短至 2s节省时间虽说不多，却也是数量级的提升，而且代价只是那么小，并一劳永逸。所以有必要对此。</p>\n<p>关于 npm 的详细学习，可以查看：<a href=\"https://nigelyao.github.io/2018/04/10/npm/\">npm 全面介绍</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用 electron 构建桌面应用的时候，在 package.json 里面的 scripts 字段是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>我们可以执行 npm start ，那么它就会执行 <code>electron .</code> 这个命令。<br>那么如果我们直接执行 <code>electron .</code><br>由于我们没有将 electron 加入到全局，所以不行。<br>那么为什么 npm start 可以执行呢？</p>","more":"<p>这就涉及到 npm run 命令的一个小细节了。<br>npm run xxx 可以执行 package.json 里面 scripts 里面对应的命令，并且是 shell 脚本。但是在执行的时候有一个小处理：</p>\n<p><strong>npm run 新建的这个 shell ，会将当前目录的 node_modules/.bin 子目录加入 PATH 变量，执行结束后，再将 PATH 变量恢复原样。</strong></p>\n<p>这就解释了，没有安装全局的 electron ，直接运行 <code>electron .</code> 是不行的，但是使用 <code>npm start</code> 来运行 <code>electron .</code> 可以。</p>\n<p><strong>下面介绍一个使用 npm 的实践：</strong><br>很多朋友使用 hexo 来构建博客；hexo 是基于 Node.js 产物，用它发表博文，很是方便；你只需 hexo clean, hexo g, hexo d三个命令即可；而且每一个命令必须等待前一个命令运行完成。文章数据一多，一套命令打下来，也得 20s+；如果略懂 npm，在 package.js 中加入点命名，例如像这样；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp; sudo gulp &amp;&amp; sudo hexo d\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么 只需运行 npm start 就好，可将时间消耗缩短至 2s节省时间虽说不多，却也是数量级的提升，而且代价只是那么小，并一劳永逸。所以有必要对此。</p>\n<p>关于 npm 的详细学习，可以查看：<a href=\"https://nigelyao.github.io/2018/04/10/npm/\">npm 全面介绍</a></p>"},{"title":"polyfill — Respond.js","date":"2018-02-11T15:25:24.000Z","comments":0,"_content":"\n> Respond.js 让不支持 css3 Media Query 的浏览器包括 IE6-IE8 等其他浏览器支持媒体查询。\n\nRespond.js 是一个快速、轻量的 polyfill，用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 `min-width` 和 `max-width`特性，实现响应式网页设计（Responsive Web Design）。\n\n<!-- more -->\n\n响应式布局，理想状态是，对 `PC/移动` 各种终端进行响应。媒体查询的支持程度是 IE9+ 以及其他现代的浏览器，但是 IE8 在市场当中仍然占据了比较大量的市场份额，使我们不得不进行 IE 低端浏览器的考虑。那么如何在 IE6~8 浏览器中兼容响应式布局呢？\n这里我们需要借助这样一个文件：`respond.js`.\n\n文件下载地址：[respond.js](respond.js).\n\n自己在阅读了官方文档之后，进行了一系列测试。友情提示各位朋友，关于 **respond.js** 的使用，有一些需要注意的地方，一旦不注意，在 IE6-8 中就无法显示出来。\n\n\n\n# 插件原理\n既然要实现响应式网页，那么就需要用到媒体查询，媒体查询的核心是 `min-width` 和 `max-width`,而 IE8 以下以及一些其它的浏览器不支持这两个属性，**respond.js** 是怎么做的呢？\n\n* 将 `<head>` 中所有外部引入的CSS文件路径取出来存储到一个数组当中；\n* 遍历数组，并一个个发送 AJAX 请求；\n* AJAX 回调后，分析 response 中的 media query 的 `min-width` 和 `max-width` 语法（注意，仅仅支持 `min-width` 和 `max-width` ），分析出 viewport 变化区间对应相应的 css 块；\n* 页面初始化时和 `window.resize` 时，根据当前 viewport 使用相应的 css 块。\n\n# 使用方法\n考虑到 IE9 是支持 CSS3 的，所以直接在 HTML 页面的 `<head>` 标签中添加脚本引入即可：\n\n\n``` html\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <!--[if lt IE 9]>\n      <script src=\"js/respond.js\"></script>\n    <![endif]-->\n</head>\n```\n\n讲道理，我们是应该将 js 文件放在 html 文件的最后，但是 repond.js 文件，我还是建议你将它放在 `<head>` 中，并且放在 css 文件的后面。越早引入越好，在 IE 下面看到页面闪屏的概率就越低，因为最初 css 会先渲染出来，如果 respond.js 加载得很后面，这时重新根据 media query 解析出来的 css 会再改变一次页面的布局等，所以看起来有闪屏的现象.\n\n\n# 核心结论\n那么此时，就可以根据基本的实现思路，得到一些书写代码时要注意的地方：\n- 需要启动本地服务器（localhost），不能使用普通本地的url地址（file://开头）；\n- 需要外部引入 CSS 文件，将 CSS 样式书写在 style 中是无效的；\n- 由于 respond 插件是查找 CSS 文件，再进行处理，所以 respond.js 文件一定要放置在 CSS 文件的后面；\n- 另外，虽然把 respond.js 放置在 `<head>` 里还是在 `<body>` 后面都能够实现，但是建议放置在 `<head>` 中（具体原因在下面的文档提示中有提到）；\n- 最好不要为 CSS 设置 utf-8 的编码，使用默认（原因详见下面的文档提示部分）\n\n\n\n# 文档提示\n在官方文档当中的一些提示：\n- 越早的引入 respond.js 文件，也就越可能避免 IE 下出现的闪屏。\n- 不支持嵌套的媒体查询。\n- utf-8 的字符编码对 respond.js 文件的运行有影响。\n官方API原文：\n`if CSS files are encoded in UTF-8 with Byte-Order-Mark, they will not work with Respond.js in IE7 or IE8.`\n基本含义就是：**utf-8 格式的 CSS 文件字符编码会对插件造成影响**\n但是在我使用 IE6-8 进行测试的时候，都能够正常显示（无论是在 css 文件中增加 charset 设置还是在 link 标签中增加 charset 设置）。因此，并不是太清楚这个位置 bug 的含义。\n- 跨域可能会出现闪屏（还没有测试，具体情况不详）\n\n# NOTE\n\n1. Respond.js 和 跨域（cross-domain） CSS 的问题\n如果Respond.js和CSS文件被放在不同的域名或子域名下面（例如，使用CDN）时需要一些额外的设置。请参考Respond.js文档获取详细信息。\n\n2. Internet Explorer 8 与 box-sizing\nIE8 不能完全支持 `box-sizing: border-box;` 与 `min-width`、`max-width`、`min-height` 或 `max-height` 一同使用。由于此原因，从 Bootstrap v3.0.1 版本开始，我们不再为 `.container` 使用 `max-width`。\n\n3. IE兼容模式\nBootstrap 不支持 IE 的兼容模式。为了让 IE 浏览器运行最新的渲染模式，建议将此 标签加入到你的页面中：\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">`\n此标签被加入到所有文档页面和案例页面中，以确保在每个被支持的 IE 浏览器中保持最好的页面展现效果。\n\n4. Respond.js 和 @import\nRespond.js 不支持通过 @import 引入的 CSS 文件。例如，Drupal 一般被配置为通过 @import 引入 CSS 文件，Respond.js 对其将无法起到作用。\n\n# Tips\n从 respond.js 的工作原理可以知道，它将 `<head>` 中所有外部引入的 CSS 文件路径取出来存储到一个数组当中；然后遍历数组，并一个个发送 AJAX 请求；可以看出这里必须依赖 ajax 请求 css 路径才能得到 css 文件中的 media query 的内容，那 ajax 的跨域问题就要解决了；\n\n由于我们的静态资源都是要放在 cdn 的，responds.js 也给出了跨域方法，即引入代理页面：\n\n//把 cross-domain/respond-proxy.html 放到cdn上\n//把 cross-domain/respond.proxy.gif 放到当前域服务器上\n\n``` html\n<!-- Respond.js proxy on external server -->\n<link href=\"http://externalcdn.com/respond-proxy.html\" id=\"respond-proxy\" rel=\"respond-proxy\" />\n\n<!-- Respond.js redirect location on local server -->\n<link href=\"/path/to/respond.proxy.gif\" id=\"respond-redirect\" rel=\"respond-redirect\" />\n\n<!-- Respond.js proxy script on local server -->\n<script src=\"/path/to/respond.proxy.js\"></script>\n```\n\n\n# 其他的支持响应式布局的插件  css3-dediaqueries.js\ncss3-mediaqueries.js 支持几乎所有的 media query 的语法。会出现闪屏。并不是很推荐使用，虽然能够支持全部的 media queries,但 `min-width` 和 `max-width` 其实就可以满足我们对响应式布局的需要。\n\n# 补充一点\nif CSS files are encoded in UTF-8 with Byte-Order-Mark,they will not work with Repond.js in IE7 or IE8.\n\n也就是说保存格式应该是 utf-8 无 BOM 格式，BOM 会影响程序对文档的处理，正常的 utf-8 文档应该没事。\n\n\n# Tips\n**always link stylesheets or write inline CSS before js scripts.**\n\nRespond.js on Github： [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).\n","source":"_posts/respond-js.md","raw":"---\ntitle: polyfill — Respond.js\ndate: 2018-02-11 23:25:24\ncategories: 前端\ntags: [JavaScript]\ncomments: false\n---\n\n> Respond.js 让不支持 css3 Media Query 的浏览器包括 IE6-IE8 等其他浏览器支持媒体查询。\n\nRespond.js 是一个快速、轻量的 polyfill，用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 `min-width` 和 `max-width`特性，实现响应式网页设计（Responsive Web Design）。\n\n<!-- more -->\n\n响应式布局，理想状态是，对 `PC/移动` 各种终端进行响应。媒体查询的支持程度是 IE9+ 以及其他现代的浏览器，但是 IE8 在市场当中仍然占据了比较大量的市场份额，使我们不得不进行 IE 低端浏览器的考虑。那么如何在 IE6~8 浏览器中兼容响应式布局呢？\n这里我们需要借助这样一个文件：`respond.js`.\n\n文件下载地址：[respond.js](respond.js).\n\n自己在阅读了官方文档之后，进行了一系列测试。友情提示各位朋友，关于 **respond.js** 的使用，有一些需要注意的地方，一旦不注意，在 IE6-8 中就无法显示出来。\n\n\n\n# 插件原理\n既然要实现响应式网页，那么就需要用到媒体查询，媒体查询的核心是 `min-width` 和 `max-width`,而 IE8 以下以及一些其它的浏览器不支持这两个属性，**respond.js** 是怎么做的呢？\n\n* 将 `<head>` 中所有外部引入的CSS文件路径取出来存储到一个数组当中；\n* 遍历数组，并一个个发送 AJAX 请求；\n* AJAX 回调后，分析 response 中的 media query 的 `min-width` 和 `max-width` 语法（注意，仅仅支持 `min-width` 和 `max-width` ），分析出 viewport 变化区间对应相应的 css 块；\n* 页面初始化时和 `window.resize` 时，根据当前 viewport 使用相应的 css 块。\n\n# 使用方法\n考虑到 IE9 是支持 CSS3 的，所以直接在 HTML 页面的 `<head>` 标签中添加脚本引入即可：\n\n\n``` html\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <!--[if lt IE 9]>\n      <script src=\"js/respond.js\"></script>\n    <![endif]-->\n</head>\n```\n\n讲道理，我们是应该将 js 文件放在 html 文件的最后，但是 repond.js 文件，我还是建议你将它放在 `<head>` 中，并且放在 css 文件的后面。越早引入越好，在 IE 下面看到页面闪屏的概率就越低，因为最初 css 会先渲染出来，如果 respond.js 加载得很后面，这时重新根据 media query 解析出来的 css 会再改变一次页面的布局等，所以看起来有闪屏的现象.\n\n\n# 核心结论\n那么此时，就可以根据基本的实现思路，得到一些书写代码时要注意的地方：\n- 需要启动本地服务器（localhost），不能使用普通本地的url地址（file://开头）；\n- 需要外部引入 CSS 文件，将 CSS 样式书写在 style 中是无效的；\n- 由于 respond 插件是查找 CSS 文件，再进行处理，所以 respond.js 文件一定要放置在 CSS 文件的后面；\n- 另外，虽然把 respond.js 放置在 `<head>` 里还是在 `<body>` 后面都能够实现，但是建议放置在 `<head>` 中（具体原因在下面的文档提示中有提到）；\n- 最好不要为 CSS 设置 utf-8 的编码，使用默认（原因详见下面的文档提示部分）\n\n\n\n# 文档提示\n在官方文档当中的一些提示：\n- 越早的引入 respond.js 文件，也就越可能避免 IE 下出现的闪屏。\n- 不支持嵌套的媒体查询。\n- utf-8 的字符编码对 respond.js 文件的运行有影响。\n官方API原文：\n`if CSS files are encoded in UTF-8 with Byte-Order-Mark, they will not work with Respond.js in IE7 or IE8.`\n基本含义就是：**utf-8 格式的 CSS 文件字符编码会对插件造成影响**\n但是在我使用 IE6-8 进行测试的时候，都能够正常显示（无论是在 css 文件中增加 charset 设置还是在 link 标签中增加 charset 设置）。因此，并不是太清楚这个位置 bug 的含义。\n- 跨域可能会出现闪屏（还没有测试，具体情况不详）\n\n# NOTE\n\n1. Respond.js 和 跨域（cross-domain） CSS 的问题\n如果Respond.js和CSS文件被放在不同的域名或子域名下面（例如，使用CDN）时需要一些额外的设置。请参考Respond.js文档获取详细信息。\n\n2. Internet Explorer 8 与 box-sizing\nIE8 不能完全支持 `box-sizing: border-box;` 与 `min-width`、`max-width`、`min-height` 或 `max-height` 一同使用。由于此原因，从 Bootstrap v3.0.1 版本开始，我们不再为 `.container` 使用 `max-width`。\n\n3. IE兼容模式\nBootstrap 不支持 IE 的兼容模式。为了让 IE 浏览器运行最新的渲染模式，建议将此 标签加入到你的页面中：\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">`\n此标签被加入到所有文档页面和案例页面中，以确保在每个被支持的 IE 浏览器中保持最好的页面展现效果。\n\n4. Respond.js 和 @import\nRespond.js 不支持通过 @import 引入的 CSS 文件。例如，Drupal 一般被配置为通过 @import 引入 CSS 文件，Respond.js 对其将无法起到作用。\n\n# Tips\n从 respond.js 的工作原理可以知道，它将 `<head>` 中所有外部引入的 CSS 文件路径取出来存储到一个数组当中；然后遍历数组，并一个个发送 AJAX 请求；可以看出这里必须依赖 ajax 请求 css 路径才能得到 css 文件中的 media query 的内容，那 ajax 的跨域问题就要解决了；\n\n由于我们的静态资源都是要放在 cdn 的，responds.js 也给出了跨域方法，即引入代理页面：\n\n//把 cross-domain/respond-proxy.html 放到cdn上\n//把 cross-domain/respond.proxy.gif 放到当前域服务器上\n\n``` html\n<!-- Respond.js proxy on external server -->\n<link href=\"http://externalcdn.com/respond-proxy.html\" id=\"respond-proxy\" rel=\"respond-proxy\" />\n\n<!-- Respond.js redirect location on local server -->\n<link href=\"/path/to/respond.proxy.gif\" id=\"respond-redirect\" rel=\"respond-redirect\" />\n\n<!-- Respond.js proxy script on local server -->\n<script src=\"/path/to/respond.proxy.js\"></script>\n```\n\n\n# 其他的支持响应式布局的插件  css3-dediaqueries.js\ncss3-mediaqueries.js 支持几乎所有的 media query 的语法。会出现闪屏。并不是很推荐使用，虽然能够支持全部的 media queries,但 `min-width` 和 `max-width` 其实就可以满足我们对响应式布局的需要。\n\n# 补充一点\nif CSS files are encoded in UTF-8 with Byte-Order-Mark,they will not work with Repond.js in IE7 or IE8.\n\n也就是说保存格式应该是 utf-8 无 BOM 格式，BOM 会影响程序对文档的处理，正常的 utf-8 文档应该没事。\n\n\n# Tips\n**always link stylesheets or write inline CSS before js scripts.**\n\nRespond.js on Github： [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).\n","slug":"respond-js","published":1,"updated":"2019-08-15T07:19:12.162Z","_id":"cjzccpczm001iz4v5g7wawaxc","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Respond.js 让不支持 css3 Media Query 的浏览器包括 IE6-IE8 等其他浏览器支持媒体查询。</p>\n</blockquote>\n<p>Respond.js 是一个快速、轻量的 polyfill，用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 <code>min-width</code> 和 <code>max-width</code>特性，实现响应式网页设计（Responsive Web Design）。</p>\n<a id=\"more\"></a>\n<p>响应式布局，理想状态是，对 <code>PC/移动</code> 各种终端进行响应。媒体查询的支持程度是 IE9+ 以及其他现代的浏览器，但是 IE8 在市场当中仍然占据了比较大量的市场份额，使我们不得不进行 IE 低端浏览器的考虑。那么如何在 IE6~8 浏览器中兼容响应式布局呢？<br>这里我们需要借助这样一个文件：<code>respond.js</code>.</p>\n<p>文件下载地址：<a href=\"respond.js\">respond.js</a>.</p>\n<p>自己在阅读了官方文档之后，进行了一系列测试。友情提示各位朋友，关于 <strong>respond.js</strong> 的使用，有一些需要注意的地方，一旦不注意，在 IE6-8 中就无法显示出来。</p>\n<h1 id=\"插件原理\"><a href=\"#插件原理\" class=\"headerlink\" title=\"插件原理\"></a>插件原理</h1><p>既然要实现响应式网页，那么就需要用到媒体查询，媒体查询的核心是 <code>min-width</code> 和 <code>max-width</code>,而 IE8 以下以及一些其它的浏览器不支持这两个属性，<strong>respond.js</strong> 是怎么做的呢？</p>\n<ul>\n<li>将 <code>&lt;head&gt;</code> 中所有外部引入的CSS文件路径取出来存储到一个数组当中；</li>\n<li>遍历数组，并一个个发送 AJAX 请求；</li>\n<li>AJAX 回调后，分析 response 中的 media query 的 <code>min-width</code> 和 <code>max-width</code> 语法（注意，仅仅支持 <code>min-width</code> 和 <code>max-width</code> ），分析出 viewport 变化区间对应相应的 css 块；</li>\n<li>页面初始化时和 <code>window.resize</code> 时，根据当前 viewport 使用相应的 css 块。</li>\n</ul>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>考虑到 IE9 是支持 CSS3 的，所以直接在 HTML 页面的 <code>&lt;head&gt;</code> 标签中添加脚本引入即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=\"js/respond.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>讲道理，我们是应该将 js 文件放在 html 文件的最后，但是 repond.js 文件，我还是建议你将它放在 <code>&lt;head&gt;</code> 中，并且放在 css 文件的后面。越早引入越好，在 IE 下面看到页面闪屏的概率就越低，因为最初 css 会先渲染出来，如果 respond.js 加载得很后面，这时重新根据 media query 解析出来的 css 会再改变一次页面的布局等，所以看起来有闪屏的现象.</p>\n<h1 id=\"核心结论\"><a href=\"#核心结论\" class=\"headerlink\" title=\"核心结论\"></a>核心结论</h1><p>那么此时，就可以根据基本的实现思路，得到一些书写代码时要注意的地方：</p>\n<ul>\n<li>需要启动本地服务器（localhost），不能使用普通本地的url地址（file://开头）；</li>\n<li>需要外部引入 CSS 文件，将 CSS 样式书写在 style 中是无效的；</li>\n<li>由于 respond 插件是查找 CSS 文件，再进行处理，所以 respond.js 文件一定要放置在 CSS 文件的后面；</li>\n<li>另外，虽然把 respond.js 放置在 <code>&lt;head&gt;</code> 里还是在 <code>&lt;body&gt;</code> 后面都能够实现，但是建议放置在 <code>&lt;head&gt;</code> 中（具体原因在下面的文档提示中有提到）；</li>\n<li>最好不要为 CSS 设置 utf-8 的编码，使用默认（原因详见下面的文档提示部分）</li>\n</ul>\n<h1 id=\"文档提示\"><a href=\"#文档提示\" class=\"headerlink\" title=\"文档提示\"></a>文档提示</h1><p>在官方文档当中的一些提示：</p>\n<ul>\n<li>越早的引入 respond.js 文件，也就越可能避免 IE 下出现的闪屏。</li>\n<li>不支持嵌套的媒体查询。</li>\n<li>utf-8 的字符编码对 respond.js 文件的运行有影响。<br>官方API原文：<br><code>if CSS files are encoded in UTF-8 with Byte-Order-Mark, they will not work with Respond.js in IE7 or IE8.</code><br>基本含义就是：<strong>utf-8 格式的 CSS 文件字符编码会对插件造成影响</strong><br>但是在我使用 IE6-8 进行测试的时候，都能够正常显示（无论是在 css 文件中增加 charset 设置还是在 link 标签中增加 charset 设置）。因此，并不是太清楚这个位置 bug 的含义。</li>\n<li>跨域可能会出现闪屏（还没有测试，具体情况不详）</li>\n</ul>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li><p>Respond.js 和 跨域（cross-domain） CSS 的问题<br>如果Respond.js和CSS文件被放在不同的域名或子域名下面（例如，使用CDN）时需要一些额外的设置。请参考Respond.js文档获取详细信息。</p>\n</li>\n<li><p>Internet Explorer 8 与 box-sizing<br>IE8 不能完全支持 <code>box-sizing: border-box;</code> 与 <code>min-width</code>、<code>max-width</code>、<code>min-height</code> 或 <code>max-height</code> 一同使用。由于此原因，从 Bootstrap v3.0.1 版本开始，我们不再为 <code>.container</code> 使用 <code>max-width</code>。</p>\n</li>\n<li><p>IE兼容模式<br>Bootstrap 不支持 IE 的兼容模式。为了让 IE 浏览器运行最新的渲染模式，建议将此 标签加入到你的页面中：<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</code><br>此标签被加入到所有文档页面和案例页面中，以确保在每个被支持的 IE 浏览器中保持最好的页面展现效果。</p>\n</li>\n<li><p>Respond.js 和 @import<br>Respond.js 不支持通过 @import 引入的 CSS 文件。例如，Drupal 一般被配置为通过 @import 引入 CSS 文件，Respond.js 对其将无法起到作用。</p>\n</li>\n</ol>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>从 respond.js 的工作原理可以知道，它将 <code>&lt;head&gt;</code> 中所有外部引入的 CSS 文件路径取出来存储到一个数组当中；然后遍历数组，并一个个发送 AJAX 请求；可以看出这里必须依赖 ajax 请求 css 路径才能得到 css 文件中的 media query 的内容，那 ajax 的跨域问题就要解决了；</p>\n<p>由于我们的静态资源都是要放在 cdn 的，responds.js 也给出了跨域方法，即引入代理页面：</p>\n<p>//把 cross-domain/respond-proxy.html 放到cdn上<br>//把 cross-domain/respond.proxy.gif 放到当前域服务器上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js proxy on external server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://externalcdn.com/respond-proxy.html\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"respond-proxy\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"respond-proxy\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js redirect location on local server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/respond.proxy.gif\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"respond-redirect\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"respond-redirect\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js proxy script on local server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/respond.proxy.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"其他的支持响应式布局的插件-css3-dediaqueries-js\"><a href=\"#其他的支持响应式布局的插件-css3-dediaqueries-js\" class=\"headerlink\" title=\"其他的支持响应式布局的插件  css3-dediaqueries.js\"></a>其他的支持响应式布局的插件  css3-dediaqueries.js</h1><p>css3-mediaqueries.js 支持几乎所有的 media query 的语法。会出现闪屏。并不是很推荐使用，虽然能够支持全部的 media queries,但 <code>min-width</code> 和 <code>max-width</code> 其实就可以满足我们对响应式布局的需要。</p>\n<h1 id=\"补充一点\"><a href=\"#补充一点\" class=\"headerlink\" title=\"补充一点\"></a>补充一点</h1><p>if CSS files are encoded in UTF-8 with Byte-Order-Mark,they will not work with Repond.js in IE7 or IE8.</p>\n<p>也就是说保存格式应该是 utf-8 无 BOM 格式，BOM 会影响程序对文档的处理，正常的 utf-8 文档应该没事。</p>\n<h1 id=\"Tips-1\"><a href=\"#Tips-1\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p><strong>always link stylesheets or write inline CSS before js scripts.</strong></p>\n<p>Respond.js on Github： <a href=\"https://github.com/scottjehl/Respond\" target=\"_blank\" rel=\"noopener\">https://github.com/scottjehl/Respond</a>.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Respond.js 让不支持 css3 Media Query 的浏览器包括 IE6-IE8 等其他浏览器支持媒体查询。</p>\n</blockquote>\n<p>Respond.js 是一个快速、轻量的 polyfill，用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 <code>min-width</code> 和 <code>max-width</code>特性，实现响应式网页设计（Responsive Web Design）。</p>","more":"<p>响应式布局，理想状态是，对 <code>PC/移动</code> 各种终端进行响应。媒体查询的支持程度是 IE9+ 以及其他现代的浏览器，但是 IE8 在市场当中仍然占据了比较大量的市场份额，使我们不得不进行 IE 低端浏览器的考虑。那么如何在 IE6~8 浏览器中兼容响应式布局呢？<br>这里我们需要借助这样一个文件：<code>respond.js</code>.</p>\n<p>文件下载地址：<a href=\"respond.js\">respond.js</a>.</p>\n<p>自己在阅读了官方文档之后，进行了一系列测试。友情提示各位朋友，关于 <strong>respond.js</strong> 的使用，有一些需要注意的地方，一旦不注意，在 IE6-8 中就无法显示出来。</p>\n<h1 id=\"插件原理\"><a href=\"#插件原理\" class=\"headerlink\" title=\"插件原理\"></a>插件原理</h1><p>既然要实现响应式网页，那么就需要用到媒体查询，媒体查询的核心是 <code>min-width</code> 和 <code>max-width</code>,而 IE8 以下以及一些其它的浏览器不支持这两个属性，<strong>respond.js</strong> 是怎么做的呢？</p>\n<ul>\n<li>将 <code>&lt;head&gt;</code> 中所有外部引入的CSS文件路径取出来存储到一个数组当中；</li>\n<li>遍历数组，并一个个发送 AJAX 请求；</li>\n<li>AJAX 回调后，分析 response 中的 media query 的 <code>min-width</code> 和 <code>max-width</code> 语法（注意，仅仅支持 <code>min-width</code> 和 <code>max-width</code> ），分析出 viewport 变化区间对应相应的 css 块；</li>\n<li>页面初始化时和 <code>window.resize</code> 时，根据当前 viewport 使用相应的 css 块。</li>\n</ul>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>考虑到 IE9 是支持 CSS3 的，所以直接在 HTML 页面的 <code>&lt;head&gt;</code> 标签中添加脚本引入即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=\"js/respond.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>讲道理，我们是应该将 js 文件放在 html 文件的最后，但是 repond.js 文件，我还是建议你将它放在 <code>&lt;head&gt;</code> 中，并且放在 css 文件的后面。越早引入越好，在 IE 下面看到页面闪屏的概率就越低，因为最初 css 会先渲染出来，如果 respond.js 加载得很后面，这时重新根据 media query 解析出来的 css 会再改变一次页面的布局等，所以看起来有闪屏的现象.</p>\n<h1 id=\"核心结论\"><a href=\"#核心结论\" class=\"headerlink\" title=\"核心结论\"></a>核心结论</h1><p>那么此时，就可以根据基本的实现思路，得到一些书写代码时要注意的地方：</p>\n<ul>\n<li>需要启动本地服务器（localhost），不能使用普通本地的url地址（file://开头）；</li>\n<li>需要外部引入 CSS 文件，将 CSS 样式书写在 style 中是无效的；</li>\n<li>由于 respond 插件是查找 CSS 文件，再进行处理，所以 respond.js 文件一定要放置在 CSS 文件的后面；</li>\n<li>另外，虽然把 respond.js 放置在 <code>&lt;head&gt;</code> 里还是在 <code>&lt;body&gt;</code> 后面都能够实现，但是建议放置在 <code>&lt;head&gt;</code> 中（具体原因在下面的文档提示中有提到）；</li>\n<li>最好不要为 CSS 设置 utf-8 的编码，使用默认（原因详见下面的文档提示部分）</li>\n</ul>\n<h1 id=\"文档提示\"><a href=\"#文档提示\" class=\"headerlink\" title=\"文档提示\"></a>文档提示</h1><p>在官方文档当中的一些提示：</p>\n<ul>\n<li>越早的引入 respond.js 文件，也就越可能避免 IE 下出现的闪屏。</li>\n<li>不支持嵌套的媒体查询。</li>\n<li>utf-8 的字符编码对 respond.js 文件的运行有影响。<br>官方API原文：<br><code>if CSS files are encoded in UTF-8 with Byte-Order-Mark, they will not work with Respond.js in IE7 or IE8.</code><br>基本含义就是：<strong>utf-8 格式的 CSS 文件字符编码会对插件造成影响</strong><br>但是在我使用 IE6-8 进行测试的时候，都能够正常显示（无论是在 css 文件中增加 charset 设置还是在 link 标签中增加 charset 设置）。因此，并不是太清楚这个位置 bug 的含义。</li>\n<li>跨域可能会出现闪屏（还没有测试，具体情况不详）</li>\n</ul>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li><p>Respond.js 和 跨域（cross-domain） CSS 的问题<br>如果Respond.js和CSS文件被放在不同的域名或子域名下面（例如，使用CDN）时需要一些额外的设置。请参考Respond.js文档获取详细信息。</p>\n</li>\n<li><p>Internet Explorer 8 与 box-sizing<br>IE8 不能完全支持 <code>box-sizing: border-box;</code> 与 <code>min-width</code>、<code>max-width</code>、<code>min-height</code> 或 <code>max-height</code> 一同使用。由于此原因，从 Bootstrap v3.0.1 版本开始，我们不再为 <code>.container</code> 使用 <code>max-width</code>。</p>\n</li>\n<li><p>IE兼容模式<br>Bootstrap 不支持 IE 的兼容模式。为了让 IE 浏览器运行最新的渲染模式，建议将此 标签加入到你的页面中：<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</code><br>此标签被加入到所有文档页面和案例页面中，以确保在每个被支持的 IE 浏览器中保持最好的页面展现效果。</p>\n</li>\n<li><p>Respond.js 和 @import<br>Respond.js 不支持通过 @import 引入的 CSS 文件。例如，Drupal 一般被配置为通过 @import 引入 CSS 文件，Respond.js 对其将无法起到作用。</p>\n</li>\n</ol>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>从 respond.js 的工作原理可以知道，它将 <code>&lt;head&gt;</code> 中所有外部引入的 CSS 文件路径取出来存储到一个数组当中；然后遍历数组，并一个个发送 AJAX 请求；可以看出这里必须依赖 ajax 请求 css 路径才能得到 css 文件中的 media query 的内容，那 ajax 的跨域问题就要解决了；</p>\n<p>由于我们的静态资源都是要放在 cdn 的，responds.js 也给出了跨域方法，即引入代理页面：</p>\n<p>//把 cross-domain/respond-proxy.html 放到cdn上<br>//把 cross-domain/respond.proxy.gif 放到当前域服务器上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js proxy on external server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://externalcdn.com/respond-proxy.html\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"respond-proxy\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"respond-proxy\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js redirect location on local server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/respond.proxy.gif\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"respond-redirect\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"respond-redirect\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Respond.js proxy script on local server --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/respond.proxy.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"其他的支持响应式布局的插件-css3-dediaqueries-js\"><a href=\"#其他的支持响应式布局的插件-css3-dediaqueries-js\" class=\"headerlink\" title=\"其他的支持响应式布局的插件  css3-dediaqueries.js\"></a>其他的支持响应式布局的插件  css3-dediaqueries.js</h1><p>css3-mediaqueries.js 支持几乎所有的 media query 的语法。会出现闪屏。并不是很推荐使用，虽然能够支持全部的 media queries,但 <code>min-width</code> 和 <code>max-width</code> 其实就可以满足我们对响应式布局的需要。</p>\n<h1 id=\"补充一点\"><a href=\"#补充一点\" class=\"headerlink\" title=\"补充一点\"></a>补充一点</h1><p>if CSS files are encoded in UTF-8 with Byte-Order-Mark,they will not work with Repond.js in IE7 or IE8.</p>\n<p>也就是说保存格式应该是 utf-8 无 BOM 格式，BOM 会影响程序对文档的处理，正常的 utf-8 文档应该没事。</p>\n<h1 id=\"Tips-1\"><a href=\"#Tips-1\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p><strong>always link stylesheets or write inline CSS before js scripts.</strong></p>\n<p>Respond.js on Github： <a href=\"https://github.com/scottjehl/Respond\" target=\"_blank\" rel=\"noopener\">https://github.com/scottjehl/Respond</a>.</p>"},{"title":"npm 全面介绍","date":"2018-04-09T19:25:24.000Z","comments":0,"summary_img":"http://i1.piimg.com/588926/30e7b49044d5cfc4.png","_content":"\n<!-- <img src=\"http://i1.piimg.com/588926/30e7b49044d5cfc4.png\" alt=\"summary-img-src-npm\"> -->\n\n<!-- more -->\n\n# 什么是 NPM\n\nnpm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。\n\nnpm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n# 为什么要使用 NPM\nnpm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署上的很多问题，常见的场景有以下几种：\n\n- 允许用户从 npm 服务器下载别人编写的第三方包到本地使用。\n- 允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。\n\nnpm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n# 如何使用 NPM\n## 安装\nnpm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但是，Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。\n```\n$ sudo npm install npm@latest -g\n```\n如果是 Window 系统使用以下命令即可：\n```\nnpm install npm -g\n```\n也就是使用 npm 安装自己。之所以可以这样，是因为 npm 本身与 Node 的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n``` bash\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n\n## 使用\n### npm init\nnpm init 用来初始化生成一个新的 package.json 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n如果使用了 -f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的 package.json 文件。\n``` bash\n$ npm init -y\n```\n\n### npm set\nnpm set 用来设置环境变量\n``` bash\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。\n\n### npm info\nnpm info 命令可以查看每个模块的具体信息。比如，查看 underscore 模块的信息。\n``` bash\n$ npm info underscore\n```\n上面命令返回一个 JavaScript 对象，包含了 underscore 模块的详细信息。这个对象的每个成员，都可以直接从 info 命令查询。\n``` bash\n$ npm info underscore description\n\n$ npm info underscore homepage\n\n$ npm info underscore version\n```\n\n### npm search\nnpm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。\n``` bash\n$ npm search <搜索词>\n```\n\n### npm list\nnpm list 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。\n``` bash\n$ npm list\n\n# 加上 global 参数，会列出全局安装的模块\n$ npm list -global\n\n# npm list 命令也可以列出单个模块\n$ npm list underscore\n```\n\n### npm install\n使用 npm 安装包的命令格式为：\n`npm [install/i] [package_name]`\n\n#### 本地模式和全局模式\nnpm 在默认情况下会从 http://npmjs.org 搜索或下载包，将包安装到当前目录的 node_modules 子目录下。\n如果你熟悉 Ruby 的 gem 或者 Python 的 pip，你会发现 npm 与它们的行为不同，gem 或 pip 总是以全局模式安装，使包可以供所有的程序使用，而 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。\n\n我们在使用 supervisor 的时候使用了 `npm install -g supervisor` 命令，就是以全局模式安装 supervisor 。\n\n这里注意一点的就是，supervisor 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 `npm config set prefix \"路径\"` 安装完以后就可以用 supervisor 来启动服务了。\nsupervisor 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 Node.js 。\n\n\n一般来说，全局安装只适用于工具模块，比如 eslint 和 gulp 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为**本地模式不会注册 PATH 环境变量**。\n“本地安装”指的是将一个模块下载到当前项目的 node_modules 子目录，然后只有在项目目录之中，才能调用这个模块。\n\n本地模式和全局模式的特点如下：\n\n|模式|可通过 require 使用|注册 PATH|\n|:---:|:---:|:---:|\n|本地模式|是|否|\n|全局模式|否|是|\n\n``` bash\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n\nnpm install 也支持直接输入 Github 代码库地址。\n``` bash\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过， npm 都要强制重新安装，可以使用 -f 或 --force 参数。\n``` bash\n$ npm install <packageName> --force\n```\n\n#### 安装不同版本\ninstall 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 @ 和版本号。\n``` bash\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\ninstall 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 packages.json 文件的哪一项中。\n\n> --save：模块名将被添加到 dependencies，可以简化为参数-S。\n> --save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。\n\n\n``` bash\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n\n\n##### dependencies 依赖\n这个可以说是我们 npm 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 js 模块包。下面这段代码表示我们依赖了 `markdown-it` 这个包，版本是 `^8.1.0` ，代表最小依赖版本是 `8.1.0` ，如果这个包有更新，那么当我们使用 npm install 命令的时候，npm 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。\n``` javascript\n\"dependencies\": {\n    \"markdown-it\": \"^8.1.0\"\n}\n```\n\n##### devDependencies 开发依赖\n在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 devDependencies 的包，在别人引用的时候不会被 npm 下载。\n``` javascript\n\"devDependencies\": {\n    \"autoprefixer\": \"^6.4.0\",0\",\n    \"babel-preset-es2015\": \"^6.0.0\",\n    \"babel-preset-stage-2\": \"^6.0.0\",\n    \"babel-register\": \"^6.0.0\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\",\n    \"webpack-merge\": \"^0.14.1\",\n    \"highlightjs\": \"^9.8.0\"\n}\n```\n当你有了一个完整的 package.json 文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 npm install 就可以很方便的下载好这个模块所需要的包。\n\nnpm install 默认会安装 dependencies 字段和 devDependencies 字段中的所有模块，如果使用 --production 参数，可以只安装 dependencies 字段的模块。\n``` bash\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n\n一旦安装了某个模块，就可以在代码中用 require 命令加载这个模块。\n``` javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n\n\n### npm run\nnpm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。\npackage.json\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n\n#### scripts 脚本\n顾名思义，就是一些脚本代码，可以通过 `npm run script-key` 来调用，例如在这个 package.json 的文件夹下使用 `npm run dev` 就相当于运行了 `node build/dev-server.js` 这一段代码。使用 scripts 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。\nnpm run 是 npm run-script 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。\n\n``` javascript\n// 脚本\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\",\n    \"docs\": \"node build/docs.js\",\n    \"build-docs\": \"npm run docs & git checkout gh-pages & xcopy /sy dist\\\\* . & git add . & git commit -m 'auto-pages' & git push & git checkout master\",\n    \"build-publish\": \"rmdir /S /Q lib & npm run build &git add . & git commit -m auto-build & npm version patch & npm publish & git push\",\n    \"lint\": \"eslint --ext .js,.vue src\"\n}\n```\n\nnpm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。\nnpm 内置了两个命令简写， npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。\n\n``` javascript\n\"build\": \"npm run build-js && npm run build-css\"\n```\n上面的写法是先运行 npm run build-js ，然后再运行 npm run build-css ，两个命令中间用 && 连接。如果希望两个命令同时平行执行，它们中间可以用 & 连接。\n\n写在 scripts 属性中的命令，也可以在 node_modules/.bin 目录中直接写成 bash 脚本。下面是一个 bash 脚本。\n``` bash\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n假定上面的脚本文件名为 build.sh ，并且权限为可执行，就可以在 scripts 属性中引用该文件。\n``` javascript\n\"build-js\": \"bin/build.sh\"\n```\n\n### pre- 和 post- 脚本\nnpm run 为每条命令提供了 pre- 和 post- 两个钩子（hook）。以 npm run lint 为例，执行这条命令之前，npm 会先查看有没有定义 prelint 和 postlint 两个钩子，如果有的话，就会先执行 npm run prelint，然后执行 npm run lint，最后执行 npm run postlint。\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n上面代码是一个 package.json 文件的例子。如果执行 npm test，会按下面的顺序执行相应的命令。\n1. pretest\n2. test\n3. posttest\n\n如果执行过程出错，就不会执行排在后面的脚本，即如果 prelint 脚本执行出错，就不会接着执行 lint 和 postlint 脚本。\n\n### npm bin\nnpm bin 命令显示相对于当前目录的，Node 模块的可执行脚本所在的目录（即 .bin 目录）。\n``` bash\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n\n# 创建全局链接\nnpm 提供了一个有趣的命令 npm link，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 require 使用。但通过 npm link 命令可以打破这一限制。举个例子，我们已经通过 `npm install -g express` 安装了 express，这时在工程的目录下运行命令：\n`npm link express ./node_modules/express -> /user/local/lib/node_modules/express`\n我们可以在 node_modules 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。\n除了将全局的包链接到本地以外，使用 npm link 命令还可以将本地的包链接到全局。使用方法是在包目录（package.json 所在目录）中运行 npm link 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。\n\n# 创建包\n包是在模块基础上更深一步的抽象，Node.js 的包类似于 C/C++ 的函数库或者 Java、.Net 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。Node.js 根据 CommonJS 规范实现了包机制，开发了 npm 来解决包的发布和获取需求。\nNode.js 的包是一个目录，其中包含了一个 JSON 格式的包说明文件 package.json。严格符合 CommonJS 规范的包应该具备以下特征：\n。package.json 必须在包的顶层目录下；\n。二进制文件应该在 bin 目录下；\n。JavaScript 代码应该在 lib 目录下；\n。文档应该在 doc 目录下；\n。单元测试应该在 test 目录下。\n\nNode.js 对包的要求并没有这么严格，只要顶层目录下有 package.json，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 CommonJS 规范。\n\n我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 package.json，我们可以创建更复杂，更完善，更符合规范的包用于发布。\n    \nNode.js 在调用某个包时，会首先检查包中 packgage.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n    \npackage.json 是 CommonJS 规定的用来描述包的文件，完全符合规范的 package.json 文件应该含有以下字段：\n<span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。\n<span id=\"inline-blue\">description</span>: 包的简要说明。\n<span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。\n<span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。\n<span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 name 、email(可选)、web(可选)字段。\n<span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 maintainers 相同。包的作者应该是贡献者数组的第一个元素。\n<span id=\"inline-blue\">bugs</span>: 提交 bug 的地址，可以是网址或者电子邮件地址。\n<span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。\n<span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。\n<span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。\n\n\n# 包的发布\n通过使用 npm init 可以根据交互式回答产生一个符合标准的 package.json。创建一个 index.js 作为包的接口,一个简单的包就制作完成了。\n在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 npm adduser 根据提示完成账号的创建\n完成后可以使用 npm whoami 检测是否已经取得了账号。\n接下来,在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了，打开浏览器，访问 http://search.npmjs.org/ 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 npm install nigelyaomodule 命令来安装它。\n如果你的包将来有更新,只需要在 package.json 文件中修改 version 字段,然后重新使用 npm publish 命令就行了。\n如果你对已发布的包不满意，可以使用 npm unpublish 命令来取消发布。\n\n<p id=\"div-border-top-yellow\">*需要说明的是：json 文件不能有注释*\n</p>\n\n# 参考链接\n[http://javascript.ruanyifeng.com/nodejs/npm.html](http://javascript.ruanyifeng.com/nodejs/npm.html)\n\n# 常用命令\nnpm version  查看npm和node的版本\nnpm list --depth=0 [-g]  查看[全局]安装的包\nnpm root [-g]  查看[全局的]包的安装路径\n\n\n\n\n\n","source":"_posts/npm.md","raw":"title: npm 全面介绍\ndate: 2018-04-10 03:25:24\ncategories: 前端\ntags: [npm]\ncomments: false\nsummary_img: http://i1.piimg.com/588926/30e7b49044d5cfc4.png\n---\n\n<!-- <img src=\"http://i1.piimg.com/588926/30e7b49044d5cfc4.png\" alt=\"summary-img-src-npm\"> -->\n\n<!-- more -->\n\n# 什么是 NPM\n\nnpm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。\n\nnpm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n# 为什么要使用 NPM\nnpm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署上的很多问题，常见的场景有以下几种：\n\n- 允许用户从 npm 服务器下载别人编写的第三方包到本地使用。\n- 允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。\n\nnpm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n# 如何使用 NPM\n## 安装\nnpm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但是，Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。\n```\n$ sudo npm install npm@latest -g\n```\n如果是 Window 系统使用以下命令即可：\n```\nnpm install npm -g\n```\n也就是使用 npm 安装自己。之所以可以这样，是因为 npm 本身与 Node 的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n``` bash\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n\n## 使用\n### npm init\nnpm init 用来初始化生成一个新的 package.json 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n如果使用了 -f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的 package.json 文件。\n``` bash\n$ npm init -y\n```\n\n### npm set\nnpm set 用来设置环境变量\n``` bash\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。\n\n### npm info\nnpm info 命令可以查看每个模块的具体信息。比如，查看 underscore 模块的信息。\n``` bash\n$ npm info underscore\n```\n上面命令返回一个 JavaScript 对象，包含了 underscore 模块的详细信息。这个对象的每个成员，都可以直接从 info 命令查询。\n``` bash\n$ npm info underscore description\n\n$ npm info underscore homepage\n\n$ npm info underscore version\n```\n\n### npm search\nnpm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。\n``` bash\n$ npm search <搜索词>\n```\n\n### npm list\nnpm list 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。\n``` bash\n$ npm list\n\n# 加上 global 参数，会列出全局安装的模块\n$ npm list -global\n\n# npm list 命令也可以列出单个模块\n$ npm list underscore\n```\n\n### npm install\n使用 npm 安装包的命令格式为：\n`npm [install/i] [package_name]`\n\n#### 本地模式和全局模式\nnpm 在默认情况下会从 http://npmjs.org 搜索或下载包，将包安装到当前目录的 node_modules 子目录下。\n如果你熟悉 Ruby 的 gem 或者 Python 的 pip，你会发现 npm 与它们的行为不同，gem 或 pip 总是以全局模式安装，使包可以供所有的程序使用，而 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。\n\n我们在使用 supervisor 的时候使用了 `npm install -g supervisor` 命令，就是以全局模式安装 supervisor 。\n\n这里注意一点的就是，supervisor 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 `npm config set prefix \"路径\"` 安装完以后就可以用 supervisor 来启动服务了。\nsupervisor 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 Node.js 。\n\n\n一般来说，全局安装只适用于工具模块，比如 eslint 和 gulp 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为**本地模式不会注册 PATH 环境变量**。\n“本地安装”指的是将一个模块下载到当前项目的 node_modules 子目录，然后只有在项目目录之中，才能调用这个模块。\n\n本地模式和全局模式的特点如下：\n\n|模式|可通过 require 使用|注册 PATH|\n|:---:|:---:|:---:|\n|本地模式|是|否|\n|全局模式|否|是|\n\n``` bash\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n\nnpm install 也支持直接输入 Github 代码库地址。\n``` bash\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过， npm 都要强制重新安装，可以使用 -f 或 --force 参数。\n``` bash\n$ npm install <packageName> --force\n```\n\n#### 安装不同版本\ninstall 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 @ 和版本号。\n``` bash\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\ninstall 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 packages.json 文件的哪一项中。\n\n> --save：模块名将被添加到 dependencies，可以简化为参数-S。\n> --save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。\n\n\n``` bash\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n\n\n##### dependencies 依赖\n这个可以说是我们 npm 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 js 模块包。下面这段代码表示我们依赖了 `markdown-it` 这个包，版本是 `^8.1.0` ，代表最小依赖版本是 `8.1.0` ，如果这个包有更新，那么当我们使用 npm install 命令的时候，npm 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。\n``` javascript\n\"dependencies\": {\n    \"markdown-it\": \"^8.1.0\"\n}\n```\n\n##### devDependencies 开发依赖\n在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 devDependencies 的包，在别人引用的时候不会被 npm 下载。\n``` javascript\n\"devDependencies\": {\n    \"autoprefixer\": \"^6.4.0\",0\",\n    \"babel-preset-es2015\": \"^6.0.0\",\n    \"babel-preset-stage-2\": \"^6.0.0\",\n    \"babel-register\": \"^6.0.0\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\",\n    \"webpack-merge\": \"^0.14.1\",\n    \"highlightjs\": \"^9.8.0\"\n}\n```\n当你有了一个完整的 package.json 文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 npm install 就可以很方便的下载好这个模块所需要的包。\n\nnpm install 默认会安装 dependencies 字段和 devDependencies 字段中的所有模块，如果使用 --production 参数，可以只安装 dependencies 字段的模块。\n``` bash\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n\n一旦安装了某个模块，就可以在代码中用 require 命令加载这个模块。\n``` javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n\n\n### npm run\nnpm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。\npackage.json\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n\n#### scripts 脚本\n顾名思义，就是一些脚本代码，可以通过 `npm run script-key` 来调用，例如在这个 package.json 的文件夹下使用 `npm run dev` 就相当于运行了 `node build/dev-server.js` 这一段代码。使用 scripts 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。\nnpm run 是 npm run-script 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。\n\n``` javascript\n// 脚本\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\",\n    \"docs\": \"node build/docs.js\",\n    \"build-docs\": \"npm run docs & git checkout gh-pages & xcopy /sy dist\\\\* . & git add . & git commit -m 'auto-pages' & git push & git checkout master\",\n    \"build-publish\": \"rmdir /S /Q lib & npm run build &git add . & git commit -m auto-build & npm version patch & npm publish & git push\",\n    \"lint\": \"eslint --ext .js,.vue src\"\n}\n```\n\nnpm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。\nnpm 内置了两个命令简写， npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。\n\n``` javascript\n\"build\": \"npm run build-js && npm run build-css\"\n```\n上面的写法是先运行 npm run build-js ，然后再运行 npm run build-css ，两个命令中间用 && 连接。如果希望两个命令同时平行执行，它们中间可以用 & 连接。\n\n写在 scripts 属性中的命令，也可以在 node_modules/.bin 目录中直接写成 bash 脚本。下面是一个 bash 脚本。\n``` bash\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n假定上面的脚本文件名为 build.sh ，并且权限为可执行，就可以在 scripts 属性中引用该文件。\n``` javascript\n\"build-js\": \"bin/build.sh\"\n```\n\n### pre- 和 post- 脚本\nnpm run 为每条命令提供了 pre- 和 post- 两个钩子（hook）。以 npm run lint 为例，执行这条命令之前，npm 会先查看有没有定义 prelint 和 postlint 两个钩子，如果有的话，就会先执行 npm run prelint，然后执行 npm run lint，最后执行 npm run postlint。\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n上面代码是一个 package.json 文件的例子。如果执行 npm test，会按下面的顺序执行相应的命令。\n1. pretest\n2. test\n3. posttest\n\n如果执行过程出错，就不会执行排在后面的脚本，即如果 prelint 脚本执行出错，就不会接着执行 lint 和 postlint 脚本。\n\n### npm bin\nnpm bin 命令显示相对于当前目录的，Node 模块的可执行脚本所在的目录（即 .bin 目录）。\n``` bash\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n\n# 创建全局链接\nnpm 提供了一个有趣的命令 npm link，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 require 使用。但通过 npm link 命令可以打破这一限制。举个例子，我们已经通过 `npm install -g express` 安装了 express，这时在工程的目录下运行命令：\n`npm link express ./node_modules/express -> /user/local/lib/node_modules/express`\n我们可以在 node_modules 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。\n除了将全局的包链接到本地以外，使用 npm link 命令还可以将本地的包链接到全局。使用方法是在包目录（package.json 所在目录）中运行 npm link 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。\n\n# 创建包\n包是在模块基础上更深一步的抽象，Node.js 的包类似于 C/C++ 的函数库或者 Java、.Net 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。Node.js 根据 CommonJS 规范实现了包机制，开发了 npm 来解决包的发布和获取需求。\nNode.js 的包是一个目录，其中包含了一个 JSON 格式的包说明文件 package.json。严格符合 CommonJS 规范的包应该具备以下特征：\n。package.json 必须在包的顶层目录下；\n。二进制文件应该在 bin 目录下；\n。JavaScript 代码应该在 lib 目录下；\n。文档应该在 doc 目录下；\n。单元测试应该在 test 目录下。\n\nNode.js 对包的要求并没有这么严格，只要顶层目录下有 package.json，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 CommonJS 规范。\n\n我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 package.json，我们可以创建更复杂，更完善，更符合规范的包用于发布。\n    \nNode.js 在调用某个包时，会首先检查包中 packgage.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n    \npackage.json 是 CommonJS 规定的用来描述包的文件，完全符合规范的 package.json 文件应该含有以下字段：\n<span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。\n<span id=\"inline-blue\">description</span>: 包的简要说明。\n<span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。\n<span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。\n<span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 name 、email(可选)、web(可选)字段。\n<span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 maintainers 相同。包的作者应该是贡献者数组的第一个元素。\n<span id=\"inline-blue\">bugs</span>: 提交 bug 的地址，可以是网址或者电子邮件地址。\n<span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。\n<span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。\n<span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。\n\n\n# 包的发布\n通过使用 npm init 可以根据交互式回答产生一个符合标准的 package.json。创建一个 index.js 作为包的接口,一个简单的包就制作完成了。\n在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 npm adduser 根据提示完成账号的创建\n完成后可以使用 npm whoami 检测是否已经取得了账号。\n接下来,在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了，打开浏览器，访问 http://search.npmjs.org/ 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 npm install nigelyaomodule 命令来安装它。\n如果你的包将来有更新,只需要在 package.json 文件中修改 version 字段,然后重新使用 npm publish 命令就行了。\n如果你对已发布的包不满意，可以使用 npm unpublish 命令来取消发布。\n\n<p id=\"div-border-top-yellow\">*需要说明的是：json 文件不能有注释*\n</p>\n\n# 参考链接\n[http://javascript.ruanyifeng.com/nodejs/npm.html](http://javascript.ruanyifeng.com/nodejs/npm.html)\n\n# 常用命令\nnpm version  查看npm和node的版本\nnpm list --depth=0 [-g]  查看[全局]安装的包\nnpm root [-g]  查看[全局的]包的安装路径\n\n\n\n\n\n","slug":"npm","published":1,"updated":"2019-08-15T07:19:12.929Z","_id":"cjzccpczo001lz4v5cx08t53d","layout":"post","photos":[],"link":"","content":"<!-- <img src=\"http://i1.piimg.com/588926/30e7b49044d5cfc4.png\" alt=\"summary-img-src-npm\"> -->\n<a id=\"more\"></a>\n<h1 id=\"什么是-NPM\"><a href=\"#什么是-NPM\" class=\"headerlink\" title=\"什么是 NPM\"></a>什么是 NPM</h1><p>npm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。</p>\n<p>npm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>\n<h1 id=\"为什么要使用-NPM\"><a href=\"#为什么要使用-NPM\" class=\"headerlink\" title=\"为什么要使用 NPM\"></a>为什么要使用 NPM</h1><p>npm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署上的很多问题，常见的场景有以下几种：</p>\n<ul>\n<li>允许用户从 npm 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。</li>\n</ul>\n<p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h1 id=\"如何使用-NPM\"><a href=\"#如何使用-NPM\" class=\"headerlink\" title=\"如何使用 NPM\"></a>如何使用 NPM</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>npm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但是，Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install npm@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>如果是 Window 系统使用以下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install npm -g</span><br></pre></td></tr></table></figure></p>\n<p>也就是使用 npm 安装自己。之所以可以这样，是因为 npm 本身与 Node 的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 npm 命令列表</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个命令的简单用法</span></span><br><span class=\"line\">$ npm -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 npm 的版本</span></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 npm 的配置</span></span><br><span class=\"line\">$ npm config list -l</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p>npm init 用来初始化生成一个新的 package.json 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 -f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的 package.json 文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init -y</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h3><p>npm set 用来设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-name <span class=\"string\">'Your name'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-email <span class=\"string\">'Your email'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-url <span class=\"string\">'http://yourdomain.com'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-license <span class=\"string\">'MIT'</span></span><br></pre></td></tr></table></figure></p>\n<p>上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。</p>\n<h3 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h3><p>npm info 命令可以查看每个模块的具体信息。比如，查看 underscore 模块的信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore</span><br></pre></td></tr></table></figure></p>\n<p>上面命令返回一个 JavaScript 对象，包含了 underscore 模块的详细信息。这个对象的每个成员，都可以直接从 info 命令查询。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore description</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm info underscore homepage</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm info underscore version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h3><p>npm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search &lt;搜索词&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h3><p>npm list 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加上 global 参数，会列出全局安装的模块</span></span><br><span class=\"line\">$ npm list -global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm list 命令也可以列出单个模块</span></span><br><span class=\"line\">$ npm list underscore</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h3><p>使用 npm 安装包的命令格式为：<br><code>npm [install/i] [package_name]</code></p>\n<h4 id=\"本地模式和全局模式\"><a href=\"#本地模式和全局模式\" class=\"headerlink\" title=\"本地模式和全局模式\"></a>本地模式和全局模式</h4><p>npm 在默认情况下会从 <a href=\"http://npmjs.org\" target=\"_blank\" rel=\"noopener\">http://npmjs.org</a> 搜索或下载包，将包安装到当前目录的 node_modules 子目录下。<br>如果你熟悉 Ruby 的 gem 或者 Python 的 pip，你会发现 npm 与它们的行为不同，gem 或 pip 总是以全局模式安装，使包可以供所有的程序使用，而 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p>\n<p>我们在使用 supervisor 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 supervisor 。</p>\n<p>这里注意一点的就是，supervisor 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 supervisor 来启动服务了。<br>supervisor 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 Node.js 。</p>\n<p>一般来说，全局安装只适用于工具模块，比如 eslint 和 gulp 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为<strong>本地模式不会注册 PATH 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 node_modules 子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<p>本地模式和全局模式的特点如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">可通过 require 使用</th>\n<th style=\"text-align:center\">注册 PATH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">$ npm install &lt;package name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">$ sudo npm install -global &lt;package name&gt;</span><br><span class=\"line\">$ sudo npm install -g &lt;package name&gt;</span><br></pre></td></tr></table></figure>\n<p>npm install 也支持直接输入 Github 代码库地址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install git://github.com/package/path.git</span><br><span class=\"line\">$ npm install git://github.com/package/path.git<span class=\"comment\">#0.1.0</span></span><br></pre></td></tr></table></figure></p>\n<p>安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过， npm 都要强制重新安装，可以使用 -f 或 –force 参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;packageName&gt; --force</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h4><p>install 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 @ 和版本号。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax@latest</span><br><span class=\"line\">$ npm install sax@0.1.1</span><br><span class=\"line\">$ npm install sax@<span class=\"string\">\"&gt;=0.1.0 &lt;0.2.0\"</span></span><br></pre></td></tr></table></figure></p>\n<p>install 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 packages.json 文件的哪一项中。</p>\n<blockquote>\n<p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax --save</span><br><span class=\"line\">$ npm install node-tap --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ npm install sax -S</span><br><span class=\"line\">$ npm install node-tap -D</span><br></pre></td></tr></table></figure>\n<h5 id=\"dependencies-依赖\"><a href=\"#dependencies-依赖\" class=\"headerlink\" title=\"dependencies 依赖\"></a>dependencies 依赖</h5><p>这个可以说是我们 npm 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 js 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 npm install 命令的时候，npm 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"markdown-it\"</span>: <span class=\"string\">\"^8.1.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"devDependencies-开发依赖\"><a href=\"#devDependencies-开发依赖\" class=\"headerlink\" title=\"devDependencies 开发依赖\"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 devDependencies 的包，在别人引用的时候不会被 npm 下载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^6.4.0\"</span>,<span class=\"number\">0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-preset-es2015<span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-preset-stage<span class=\"number\">-2</span><span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-register<span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack<span class=\"string\">\": \"</span>^<span class=\"number\">1.13</span><span class=\"number\">.2</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-dev-middleware<span class=\"string\">\": \"</span>^<span class=\"number\">1.8</span><span class=\"number\">.3</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-hot-middleware<span class=\"string\">\": \"</span>^<span class=\"number\">2.12</span><span class=\"number\">.2</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-merge<span class=\"string\">\": \"</span>^<span class=\"number\">0.14</span><span class=\"number\">.1</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>highlightjs<span class=\"string\">\": \"</span>^<span class=\"number\">9.8</span><span class=\"number\">.0</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>当你有了一个完整的 package.json 文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 npm install 就可以很方便的下载好这个模块所需要的包。</p>\n<p>npm install 默认会安装 dependencies 字段和 devDependencies 字段中的所有模块，如果使用 –production 参数，可以只安装 dependencies 字段的模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --production</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ NODE_ENV=production npm install</span><br></pre></td></tr></table></figure></p>\n<p>一旦安装了某个模块，就可以在代码中用 require 命令加载这个模块。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">'backbone'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h3><p>npm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。<br>package.json<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint **.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha test/\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 package.json 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 scripts 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br>npm run 是 npm run-script 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 脚本</span></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"node build/dev-server.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"docs\"</span>: <span class=\"string\">\"node build/docs.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build-docs\"</span>: <span class=\"string\">\"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build-publish\"</span>: <span class=\"string\">\"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。<br>npm 内置了两个命令简写， npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build-js &amp;&amp; npm run build-css\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法是先运行 npm run build-js ，然后再运行 npm run build-css ，两个命令中间用 &amp;&amp; 连接。如果希望两个命令同时平行执行，它们中间可以用 &amp; 连接。</p>\n<p>写在 scripts 属性中的命令，也可以在 node_modules/.bin 目录中直接写成 bash 脚本。下面是一个 bash 脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> site/main</span><br><span class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure></p>\n<p>假定上面的脚本文件名为 build.sh ，并且权限为可执行，就可以在 scripts 属性中引用该文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build-js\"</span>: <span class=\"string\">\"bin/build.sh\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p>npm run 为每条命令提供了 pre- 和 post- 两个钩子（hook）。以 npm run lint 为例，执行这条命令之前，npm 会先查看有没有定义 prelint 和 postlint 两个钩子，如果有的话，就会先执行 npm run prelint，然后执行 npm run lint，最后执行 npm run postlint。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">    <span class=\"string\">\"karma\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --cache --ext .js --ext .jsx src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start --log-leve=error karma.config.js --single-run=true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"posttest\"</span>: <span class=\"string\">\"echo 'Finished running tests'\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码是一个 package.json 文件的例子。如果执行 npm test，会按下面的顺序执行相应的命令。</p>\n<ol>\n<li>pretest</li>\n<li>test</li>\n<li>posttest</li>\n</ol>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果 prelint 脚本执行出错，就不会接着执行 lint 和 postlint 脚本。</p>\n<h3 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h3><p>npm bin 命令显示相对于当前目录的，Node 模块的可执行脚本所在的目录（即 .bin 目录）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></span><br><span class=\"line\">$ npm bin</span><br><span class=\"line\">./node_modules/.bin</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建全局链接\"><a href=\"#创建全局链接\" class=\"headerlink\" title=\"创建全局链接\"></a>创建全局链接</h1><p>npm 提供了一个有趣的命令 npm link，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 require 使用。但通过 npm link 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 express，这时在工程的目录下运行命令：<br><code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 node_modules 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 npm link 命令还可以将本地的包链接到全局。使用方法是在包目录（package.json 所在目录）中运行 npm link 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p>\n<h1 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，Node.js 的包类似于 C/C++ 的函数库或者 Java、.Net 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。Node.js 根据 CommonJS 规范实现了包机制，开发了 npm 来解决包的发布和获取需求。<br>Node.js 的包是一个目录，其中包含了一个 JSON 格式的包说明文件 package.json。严格符合 CommonJS 规范的包应该具备以下特征：<br>。package.json 必须在包的顶层目录下；<br>。二进制文件应该在 bin 目录下；<br>。JavaScript 代码应该在 lib 目录下；<br>。文档应该在 doc 目录下；<br>。单元测试应该在 test 目录下。</p>\n<p>Node.js 对包的要求并没有这么严格，只要顶层目录下有 package.json，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 CommonJS 规范。</p>\n<p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 package.json，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p>\n<p>Node.js 在调用某个包时，会首先检查包中 packgage.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<p>package.json 是 CommonJS 规定的用来描述包的文件，完全符合规范的 package.json 文件应该含有以下字段：<br><span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id=\"inline-blue\">description</span>: 包的简要说明。<br><span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。<br><span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 name 、email(可选)、web(可选)字段。<br><span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 maintainers 相同。包的作者应该是贡献者数组的第一个元素。<br><span id=\"inline-blue\">bugs</span>: 提交 bug 的地址，可以是网址或者电子邮件地址。<br><span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p>\n<h1 id=\"包的发布\"><a href=\"#包的发布\" class=\"headerlink\" title=\"包的发布\"></a>包的发布</h1><p>通过使用 npm init 可以根据交互式回答产生一个符合标准的 package.json。创建一个 index.js 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 npm adduser 根据提示完成账号的创建<br>完成后可以使用 npm whoami 检测是否已经取得了账号。<br>接下来,在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了，打开浏览器，访问 <a href=\"http://search.npmjs.org/\" target=\"_blank\" rel=\"noopener\">http://search.npmjs.org/</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 npm install nigelyaomodule 命令来安装它。<br>如果你的包将来有更新,只需要在 package.json 文件中修改 version 字段,然后重新使用 npm publish 命令就行了。<br>如果你对已发布的包不满意，可以使用 npm unpublish 命令来取消发布。</p>\n<p id=\"div-border-top-yellow\"><em>需要说明的是：json 文件不能有注释</em><br></p>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://javascript.ruanyifeng.com/nodejs/npm.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p>npm version  查看npm和node的版本<br>npm list –depth=0 [-g]  查看[全局]安装的包<br>npm root [-g]  查看[全局的]包的安装路径</p>\n","site":{"data":{}},"excerpt":"<!-- <img src=\"http://i1.piimg.com/588926/30e7b49044d5cfc4.png\" alt=\"summary-img-src-npm\"> -->","more":"<h1 id=\"什么是-NPM\"><a href=\"#什么是-NPM\" class=\"headerlink\" title=\"什么是 NPM\"></a>什么是 NPM</h1><p>npm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。</p>\n<p>npm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>\n<h1 id=\"为什么要使用-NPM\"><a href=\"#为什么要使用-NPM\" class=\"headerlink\" title=\"为什么要使用 NPM\"></a>为什么要使用 NPM</h1><p>npm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署上的很多问题，常见的场景有以下几种：</p>\n<ul>\n<li>允许用户从 npm 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。</li>\n</ul>\n<p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h1 id=\"如何使用-NPM\"><a href=\"#如何使用-NPM\" class=\"headerlink\" title=\"如何使用 NPM\"></a>如何使用 NPM</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>npm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但是，Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install npm@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>如果是 Window 系统使用以下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install npm -g</span><br></pre></td></tr></table></figure></p>\n<p>也就是使用 npm 安装自己。之所以可以这样，是因为 npm 本身与 Node 的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 npm 命令列表</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个命令的简单用法</span></span><br><span class=\"line\">$ npm -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 npm 的版本</span></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 npm 的配置</span></span><br><span class=\"line\">$ npm config list -l</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p>npm init 用来初始化生成一个新的 package.json 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 -f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的 package.json 文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init -y</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h3><p>npm set 用来设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-name <span class=\"string\">'Your name'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-email <span class=\"string\">'Your email'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-url <span class=\"string\">'http://yourdomain.com'</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">set</span> init-license <span class=\"string\">'MIT'</span></span><br></pre></td></tr></table></figure></p>\n<p>上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。</p>\n<h3 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h3><p>npm info 命令可以查看每个模块的具体信息。比如，查看 underscore 模块的信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore</span><br></pre></td></tr></table></figure></p>\n<p>上面命令返回一个 JavaScript 对象，包含了 underscore 模块的详细信息。这个对象的每个成员，都可以直接从 info 命令查询。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore description</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm info underscore homepage</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm info underscore version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h3><p>npm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search &lt;搜索词&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h3><p>npm list 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加上 global 参数，会列出全局安装的模块</span></span><br><span class=\"line\">$ npm list -global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm list 命令也可以列出单个模块</span></span><br><span class=\"line\">$ npm list underscore</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h3><p>使用 npm 安装包的命令格式为：<br><code>npm [install/i] [package_name]</code></p>\n<h4 id=\"本地模式和全局模式\"><a href=\"#本地模式和全局模式\" class=\"headerlink\" title=\"本地模式和全局模式\"></a>本地模式和全局模式</h4><p>npm 在默认情况下会从 <a href=\"http://npmjs.org\" target=\"_blank\" rel=\"noopener\">http://npmjs.org</a> 搜索或下载包，将包安装到当前目录的 node_modules 子目录下。<br>如果你熟悉 Ruby 的 gem 或者 Python 的 pip，你会发现 npm 与它们的行为不同，gem 或 pip 总是以全局模式安装，使包可以供所有的程序使用，而 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p>\n<p>我们在使用 supervisor 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 supervisor 。</p>\n<p>这里注意一点的就是，supervisor 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 supervisor 来启动服务了。<br>supervisor 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 Node.js 。</p>\n<p>一般来说，全局安装只适用于工具模块，比如 eslint 和 gulp 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为<strong>本地模式不会注册 PATH 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 node_modules 子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<p>本地模式和全局模式的特点如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">可通过 require 使用</th>\n<th style=\"text-align:center\">注册 PATH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">$ npm install &lt;package name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">$ sudo npm install -global &lt;package name&gt;</span><br><span class=\"line\">$ sudo npm install -g &lt;package name&gt;</span><br></pre></td></tr></table></figure>\n<p>npm install 也支持直接输入 Github 代码库地址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install git://github.com/package/path.git</span><br><span class=\"line\">$ npm install git://github.com/package/path.git<span class=\"comment\">#0.1.0</span></span><br></pre></td></tr></table></figure></p>\n<p>安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过， npm 都要强制重新安装，可以使用 -f 或 –force 参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;packageName&gt; --force</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h4><p>install 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 @ 和版本号。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax@latest</span><br><span class=\"line\">$ npm install sax@0.1.1</span><br><span class=\"line\">$ npm install sax@<span class=\"string\">\"&gt;=0.1.0 &lt;0.2.0\"</span></span><br></pre></td></tr></table></figure></p>\n<p>install 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 packages.json 文件的哪一项中。</p>\n<blockquote>\n<p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax --save</span><br><span class=\"line\">$ npm install node-tap --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ npm install sax -S</span><br><span class=\"line\">$ npm install node-tap -D</span><br></pre></td></tr></table></figure>\n<h5 id=\"dependencies-依赖\"><a href=\"#dependencies-依赖\" class=\"headerlink\" title=\"dependencies 依赖\"></a>dependencies 依赖</h5><p>这个可以说是我们 npm 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 js 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 npm install 命令的时候，npm 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"markdown-it\"</span>: <span class=\"string\">\"^8.1.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"devDependencies-开发依赖\"><a href=\"#devDependencies-开发依赖\" class=\"headerlink\" title=\"devDependencies 开发依赖\"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 devDependencies 的包，在别人引用的时候不会被 npm 下载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^6.4.0\"</span>,<span class=\"number\">0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-preset-es2015<span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-preset-stage<span class=\"number\">-2</span><span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>babel-register<span class=\"string\">\": \"</span>^<span class=\"number\">6.0</span><span class=\"number\">.0</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack<span class=\"string\">\": \"</span>^<span class=\"number\">1.13</span><span class=\"number\">.2</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-dev-middleware<span class=\"string\">\": \"</span>^<span class=\"number\">1.8</span><span class=\"number\">.3</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-hot-middleware<span class=\"string\">\": \"</span>^<span class=\"number\">2.12</span><span class=\"number\">.2</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>webpack-merge<span class=\"string\">\": \"</span>^<span class=\"number\">0.14</span><span class=\"number\">.1</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>highlightjs<span class=\"string\">\": \"</span>^<span class=\"number\">9.8</span><span class=\"number\">.0</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>当你有了一个完整的 package.json 文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 npm install 就可以很方便的下载好这个模块所需要的包。</p>\n<p>npm install 默认会安装 dependencies 字段和 devDependencies 字段中的所有模块，如果使用 –production 参数，可以只安装 dependencies 字段的模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --production</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ NODE_ENV=production npm install</span><br></pre></td></tr></table></figure></p>\n<p>一旦安装了某个模块，就可以在代码中用 require 命令加载这个模块。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">'backbone'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h3><p>npm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。<br>package.json<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint **.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha test/\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 package.json 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 scripts 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br>npm run 是 npm run-script 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 脚本</span></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"node build/dev-server.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"docs\"</span>: <span class=\"string\">\"node build/docs.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build-docs\"</span>: <span class=\"string\">\"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build-publish\"</span>: <span class=\"string\">\"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。<br>npm 内置了两个命令简写， npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build-js &amp;&amp; npm run build-css\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法是先运行 npm run build-js ，然后再运行 npm run build-css ，两个命令中间用 &amp;&amp; 连接。如果希望两个命令同时平行执行，它们中间可以用 &amp; 连接。</p>\n<p>写在 scripts 属性中的命令，也可以在 node_modules/.bin 目录中直接写成 bash 脚本。下面是一个 bash 脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> site/main</span><br><span class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure></p>\n<p>假定上面的脚本文件名为 build.sh ，并且权限为可执行，就可以在 scripts 属性中引用该文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build-js\"</span>: <span class=\"string\">\"bin/build.sh\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p>npm run 为每条命令提供了 pre- 和 post- 两个钩子（hook）。以 npm run lint 为例，执行这条命令之前，npm 会先查看有没有定义 prelint 和 postlint 两个钩子，如果有的话，就会先执行 npm run prelint，然后执行 npm run lint，最后执行 npm run postlint。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">    <span class=\"string\">\"karma\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --cache --ext .js --ext .jsx src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start --log-leve=error karma.config.js --single-run=true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"posttest\"</span>: <span class=\"string\">\"echo 'Finished running tests'\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码是一个 package.json 文件的例子。如果执行 npm test，会按下面的顺序执行相应的命令。</p>\n<ol>\n<li>pretest</li>\n<li>test</li>\n<li>posttest</li>\n</ol>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果 prelint 脚本执行出错，就不会接着执行 lint 和 postlint 脚本。</p>\n<h3 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h3><p>npm bin 命令显示相对于当前目录的，Node 模块的可执行脚本所在的目录（即 .bin 目录）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></span><br><span class=\"line\">$ npm bin</span><br><span class=\"line\">./node_modules/.bin</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建全局链接\"><a href=\"#创建全局链接\" class=\"headerlink\" title=\"创建全局链接\"></a>创建全局链接</h1><p>npm 提供了一个有趣的命令 npm link，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 require 使用。但通过 npm link 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 express，这时在工程的目录下运行命令：<br><code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 node_modules 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 npm link 命令还可以将本地的包链接到全局。使用方法是在包目录（package.json 所在目录）中运行 npm link 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p>\n<h1 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，Node.js 的包类似于 C/C++ 的函数库或者 Java、.Net 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。Node.js 根据 CommonJS 规范实现了包机制，开发了 npm 来解决包的发布和获取需求。<br>Node.js 的包是一个目录，其中包含了一个 JSON 格式的包说明文件 package.json。严格符合 CommonJS 规范的包应该具备以下特征：<br>。package.json 必须在包的顶层目录下；<br>。二进制文件应该在 bin 目录下；<br>。JavaScript 代码应该在 lib 目录下；<br>。文档应该在 doc 目录下；<br>。单元测试应该在 test 目录下。</p>\n<p>Node.js 对包的要求并没有这么严格，只要顶层目录下有 package.json，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 CommonJS 规范。</p>\n<p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 package.json，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p>\n<p>Node.js 在调用某个包时，会首先检查包中 packgage.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<p>package.json 是 CommonJS 规定的用来描述包的文件，完全符合规范的 package.json 文件应该含有以下字段：<br><span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id=\"inline-blue\">description</span>: 包的简要说明。<br><span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。<br><span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 name 、email(可选)、web(可选)字段。<br><span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 maintainers 相同。包的作者应该是贡献者数组的第一个元素。<br><span id=\"inline-blue\">bugs</span>: 提交 bug 的地址，可以是网址或者电子邮件地址。<br><span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p>\n<h1 id=\"包的发布\"><a href=\"#包的发布\" class=\"headerlink\" title=\"包的发布\"></a>包的发布</h1><p>通过使用 npm init 可以根据交互式回答产生一个符合标准的 package.json。创建一个 index.js 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 npm adduser 根据提示完成账号的创建<br>完成后可以使用 npm whoami 检测是否已经取得了账号。<br>接下来,在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了，打开浏览器，访问 <a href=\"http://search.npmjs.org/\" target=\"_blank\" rel=\"noopener\">http://search.npmjs.org/</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 npm install nigelyaomodule 命令来安装它。<br>如果你的包将来有更新,只需要在 package.json 文件中修改 version 字段,然后重新使用 npm publish 命令就行了。<br>如果你对已发布的包不满意，可以使用 npm unpublish 命令来取消发布。</p>\n<p id=\"div-border-top-yellow\"><em>需要说明的是：json 文件不能有注释</em><br></p>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://javascript.ruanyifeng.com/nodejs/npm.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p>npm version  查看npm和node的版本<br>npm list –depth=0 [-g]  查看[全局]安装的包<br>npm root [-g]  查看[全局的]包的安装路径</p>"},{"title":"Sass 教程","date":"2017-10-23T02:49:15.000Z","comments":0,"_content":"\n<span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)\n\n# sass简介\n来自于官网的简介：\nSass is the most mature, stable, and powerful professional grade CSS extension language in the world.\n<font color=red> Sass 是世界上最成熟的，稳定的，功能强大的专业级 CSS 扩展语言。</font>\n\n<!-- more -->\n\n# sass 安装\n因为 sass 依赖 ruby 环境，所以装 sass 之前先确认安装了 ruby .\n在安装的时候，请勾选 Add Ruby executables to your PATH 这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到 ruby 环境.\n![](http://i1.piimg.com/567571/3a876fb3bb575d25.png)\n\n安装完 ruby 之后，在开始菜单中，打开我们的命令行，输入\n`ruby -v`\n\n![](http://i1.piimg.com/567571/e5795e583371ce6d.png)\n那么我们的 ruby 就安装成功了。\n\n然后直接在命令行中输入\n`gem install sass`\n按回车键确认，等待一段时间就会提示你 sass 安装成功。\n\n如果要安装 beta 版本的，可以在命令行中输入\n`gem install sass --pre`\n\n最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的 RubyGems 镜像安装 sass ，如果成功则忽略。\n由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过 gem sources 命令来配置源，先移除默认的 https://rubygems.org 源，然后添加淘宝的源 `https://ruby.taobao.org/` ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 gem install sass 了.\n\n```\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\ngem sources -l\n```\n如果输出：\n```\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n```\n则表示镜像替换成功，下一步\n```\ngem install sass\n```\n\n按回车键确认，等待一段时间就会提示你 sass 安装成功。\n\n如果你熟悉 git 命令的话，你还可以从 sass 的 Git repository 来安装，git 的命令行为：\n```\ngit clone git://github.com/nex3/sass.git\ncd sass\nrake install\n```\n\n# 如何升级 sass 版本\n\n我们可以使用命令 `gem update sass` 来升级我们的 sass 版本。\n\n如果想要安装sass的某一特定版本，命令行为\n`gem install sass --version=3.3.0`\n\n如果想要删除sass的某一特定版本，命令行为\n`gem uninstall sass --version=3.3.0`\n\n卸载sass,命令行为\n`gem uninstall sass`\n\n查看sass版本的命令行为\n`sass -v`\n\n查看ruby安装的所有程序包，命令语句为 `gem list` 。\n\n\n# sass 命令\n安装成功 sass 以后，我们来写个 demo 测试一下：\n创建一个 `style.scss` 文件：\n``` scss\n$fontSize: 14px;\nbody {\n  font-size: $fontSize;\n}\n```\n\n单文件转换\n``` \nsass style.scss style.css\n```\n\n单文件监听\n```\nsass --watch style.scss:style.css\n```\n\n文件夹监听\n```\nsass --watch sassFileDirectory:cssFileDirectory\n```\n\ncss 文件转成 sass/scss 文件\n```\nsass-convert style.css style.sass\nsass-convert style.css style.scss\n```\n\n## sass 命令配置选项\n运行命令行帮助文档，可以获得所有的配置选项\n```\nsass -h\n```\n\n配置选项 `--style`\n```\nsass style.scss:style.css --style compact\n```\n`--style` 表示解析后的 css 是什么格式，有四种取值分别为：expanded ，nested ，compact ，compressed 。\n\n配置选项 `--sourcemap`\n```\nsass style.scss:style.css --sourcemap\n```\n`--sourcemap` 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为 .css.map 文件。\n\n配置选项 `--debug-info`\n```\nsass style.scss:style.css --debug-info\n```\n`--debug-info` 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。\n\n\n\n# sass语法\n\n## 注释\n在介绍 sass 语法之前，最有必要的是先来了解一下 sass 中的注释。\nsass 有两种注释方式，一种是标准的 css 注释方式 `/* */`，另一种则是 `//` 双斜杆形式的单行注释，不过这种单行注释不会被转译出来，也就是说 `//` 这种注释不会转译到编译后的 css 文件中。\n\n需要说明的是：如果你的注释中有中文的话，请务必在 scss 文件开头加上：\n``` css\n@charset \"UTF-8\";\n```\n\n如果没有这个的话，会报错。\n\n## 变量\nsass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像 CSS 属性设置一样），如果值后面加上 !default 则表示默认值。\n普通变量\n定义之后可以在全局范围内使用。\n\n``` scss\n$fontSize: 12px;\nbody {\n    font-size: $fontSize;\n}\n```\n\n### 默认变量\nsass 的默认变量仅需要在值后面加上 `!default` 即可。\n\n``` scss\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n```\n\nsass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的。\n``` scss\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n$baseLineHeight: 2;\np {\n    line-height: $baseLineHeight;\n}\n```\n这个相当于给 $baseLineHeight 设置了一个默认值，如果你想重新设置的话，可以再写一个 $baseLineHeight 的属性值来覆盖它。\n\n### 特殊变量\n一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 `#{$variables}` 形式使用。\n``` scss\n$borderDirection: top !default;\n$baseFontSize: 12px !default;\n$baseLineHeight: 1.5 !default;\n\n//应用于 class 和属性\n.border-#{$borderDirection} {\n    border-#{$borderDirection}: 1px solid #ccc;\n}\n//应用于复杂的属性值\nbody {\n    font:#{$baseFontSize}/#{$baseLineHeight};\n}\n```\n\n\n这个地方我们如果不用 `#{$variables}` 形式的话，那么结果中 body 的样式就是：\n``` css\nbody {\n  font: 8px;\n}\n```\n这显然不是我们想要的。\n\n### 多值变量\n多值变量分为 list 类型和 map 类型，简单来说 list 类型有点像 js 中的数组，而 map 类型有点像 js 中的对象。\n\n#### list\nlist 数据可通过空格，逗号或小括号分隔多个值，可用 nth($var,$index) 取值。关于 list 数据操作还有很多其他函数如 `length($list)` ， `join($list,$list2,[$separator])` ， `append($list,$value,[$separator])` 等。\n\n定义\n``` scss\n//一维数组\n$px: 5px 10px 20px 30px;\n//二维数组\n$px: 5px 10px, 20px 30px;\n$px: (5px 10px) (20px 30px);\n```\n\n使用\n``` scss\n$linkColor: #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值\na{\n  color:nth($linkColor,1);\n\n  &:hover{\n    color:nth($linkColor,2);\n  }\n}\n```\n生成\n``` css\na{\n  color:#08c;\n}\na:hover{\n  color:#333;\n}\n```\n\n\n#### map\nmap 数据以 key和 value 成对出现，其中 value 又可以是 list 。格式为： `$map:(key1: value1,key2:value2,key3:value3);` 。可通过 `map-get($map,$key)` 取值。关于map数据还有很多其他函数如 `map-merge($map1,$map2)` ， `map-keys($map)` ， `map-values($map)` 等。\n\n定义\n``` scss\n$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);\n```\n使用\n``` scss\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n```\n生成\n```css\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n\n## 全局变量\n在变量值后面加上 !global 即为全局变量。\n在选择器中声明的变量会覆盖外面全局声明的变量。\n``` scss\n$fontSize: 12px;\nbody {\n  $fontSize: 14px;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n启用global之后的机制\n\n``` scss\n$fontSize: 12px;\nbody {\n  $fontSize: 14px !global;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了 !global 之后才会成为全局变量。\n\n\n## 嵌套(Nesting)\n\nsass 的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。\n\n### 选择器嵌套\n所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了 sass 文件的结构性和可读性。\n在选择器嵌套中，可以使用 `&` 表示父元素选择器\n\n``` scss\n#top_nav {\n  line-height: 30px;\n  text-transform: capitalize;\n  background-color: #333;\n  li {\n    display: block;\n  }\n  a {\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n    &:hover {\n      color: #ddd;\n    }\n  }\n}\n```\n\n### 属性嵌套\n所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。\n``` css\n.fakeshadow {\n  border: {\n    style: solid;\n    left: {\n      width: 4px;\n      color: #888;\n    }\n    right: {\n      width: 2px;\n      color: #ccc;\n    }\n  }\n}\n```\n当然这个只是属性嵌套的一个例子，在实际中这样来写 `border` 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。\n\n## @at-root\nsass3.3.0 中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。\n### 普通跳出嵌套\n``` scss\n/*没有跳出*/\n.parent-1 {\n  color: #f00;\n  .child {\n    width: 100px\n  }\n}\n\n/*单个选择器跳出*/\n.parent-2 {\n  color: #f00;\n  @at-root .child {\n    width: 200px;\n  }\n}\n\n\n/*多个选择器跳出*/\n.parent-3 {\n  background: #f00;\n  @at-root {\n    .child1 {\n      width: 300px;\n    }\n    .child2 {\n      width: 400px;\n    }\n  }\n}\n```\n\n\n默认 `@at-root` 只会跳出选择器嵌套，而不能跳出 `@media` 或 `@support` ，如果要跳出这两种，则需要使用 `@at-root(without:media)` ，`@at-root(without:support)` 。这个语法的关键词有四个： `all` （表示所有），`true`（表示常规CSS）， `media`（表示media）， 'support'（表示support，因为 `@support` 目前还无法广泛使用）。我们默认的 `@at-root` 其实就是 `@at-root(without:rule)` 。\n``` scss\n@media print {\n  .parent1 {\n    color: #000;\n    @at-root .child1 {\n      width: 200px\n    }\n  }\n}\n//跳出media嵌套，父级有效\n@media print {\n  .parent2 {\n    color: #f00;\n    @at-root (without:media) {\n      .child2 {\n        width: 200px;\n      }\n    }\n  }\n}\n//跳出media和父级\n@media print {\n  .parent3 {\n    color: #f00;\n    @at-root (without:all) {\n      .child3 {\n        width: 200px;\n      }\n    }\n  }\n}\n```\n\n`@at-root` 与 `&` 配合使用\n``` scss\n.child {\n  @at-root .parent & {\n    color: #f00;\n  }\n}\n```\n\n应用于`@keyframe`\n``` scss\n.demo {\n  ...\n  animation: motion 3s infinite;\n  @at-root {\n    @keyframes motion {\n      ...\n    }\n  }\n}\n```\n\n生成\n``` scss\n.demo {\n    ...   \n    animation: motion 3s infinite;\n}\n@keyframes motion {\n    ...\n}\n```\n\n我认为 `@at-root` 应用于 `@keyframe` 或许是 `@at-root` 最好的实践。\n跳出嵌套，我们为什么要用 `@at-root` 来实现呢？我们完全可以在写样式的时候，不使用嵌套的写法。\n但是 `@keyframe` 就不一样了，这个动画应用于当前选择器，所以把动画样式写入这个选择器的结构里，方便修改与查看。\n相比于之前在 css 中使用 @keyframe 来定义动画，然后在元素中调用，如果一个文件中 @keyframe 比较多的话，在我们想要调用动画的时候，动画与元素之间的关联性比较差。\n\n## 混合(mixin)\nsass 中使用 `@mixin` 声明混合，可以传递参数，参数名以 $ 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 @mixin 通过 @include 来调用。\n### 无参数mixin\n``` scss\n@mixin center-block {\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n.demo {\n  @include center-block;\n}\n```\n\n生成\n``` css\n.demo{\n    margin-left:auto;\n    margin-right:auto;\n}\n```\n\n\n### 有参数mixin\n``` scss\n@mixin opacity($opacity: 50) {\n  opacity: $opacity / 100;\n  filter: alpha(opacity=$opacity);\n}\n.opacity{\n  @include opacity; //参数使用默认值\n}\n.opacity-80{\n  @include opacity(80); //传递参数\n}\n```\n\n### 多个参数mixin\n调用时可直接传入值，如 `@include` 传入参数的个数小于 `@mixin` 定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。\n``` scss\n@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) {\n  border-bottom: $border;\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n.imgtext-h li {\n  @include horizontal-line(1px solid #ccc);\n}\n.imgtext-h-product li {\n  @include horizontal-line($padding:15px);\n}\n```\n\n生成\n``` css\n.imgtext-h li {\n    border-bottom: 1px solid #cccccc;\n    padding-top: 10px;\n    padding-bottom: 10px;\n}\n.imgtext-h--product li {\n    border-bottom: 1px dashed #cccccc;\n    padding-top: 15px;\n    padding-bottom: 15px;\n}\n```\n\n### 多组值参数mixin\n如果一个参数可以有多组值，如 `box-shadow` 、`transition` 等，那么参数则需要在变量后加三个点表示，如 `$variables...` 。\n``` scss\n//box-shadow可以有多组值，所以在变量参数后面添加...\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow;\n  box-shadow: $shadow;\n}\n.box {\n  border: 1px solid #ccc;\n  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));\n}\n```\n\n## @content\n@content 可以用来解决 css3 的 @media 等带来的问题。它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。\n``` scss\n@mixin max-screen($res) {\n  @media only screen and (max-width:$res) {\n    @content;\n  }\n}\n@include max-screen(480px) {\n  body {\n    color: red;\n  }\n}\n```\nPS：@mixin 通过 @include 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从 3.2.0 版本以后，建议传递参数的用 @mixin ，而非传递参数的使用下面的继承 % 。\n\n## 继承\nsass 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend ，后面紧跟需要继承的选择器。\n\n使用\n``` scss\nh1 {\n  border: 4px solid #ff9aa9;\n}\n.speaker {\n  @extend h1;\n  border-width: 2px;\n}\n```\n\n生成\n``` css\nh1,.speaker{\n  border: 4px solid #ff9aa9;\n}\n.speaker{\n  border-width: 2px;\n}\n```\n\n可以看出，选择器继承生成的样式不是拷贝的形式，而是以联合声明的方式存在的。\n\n\n### 继承的工作细节\n关于 @extend 有两个要点你应该知道：\n\n1、跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。\n举个例子，使用混合器的时候：\n``` scss\n@mixin border-colors {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo1 {\n  @include border-colors;\n}\n.demo2 {\n  @include border-colors; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n使用继承的时候：\n``` scss\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  @extend .demo1; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1, .demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。\n\n2、继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值， css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。\n\n混合器本身不会引起 css 层叠的问题，因为混合器把样式直接放到了 css 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。\n\n### 使用继承的最佳实践\n通常使用继承会让你的 css 美观、整洁。因为继承只会在生成 css 时复制选择器，而不会复制大段的 css 属性。但是如果你不小心，可能会让生成的 css 中包含大量的选择器复制。\n避免这种情况出现的最好方法就是不要在 css 规则中使用后代选择器（比如 .foo .bar）去继承 css 规则。如果你这么做，同时被继承的 css 规则有通过后代选择器修饰的样式，生成 css 中的选择器的数量很快就会失控。\n例如：\n``` scss\n.bip .baz {\n  color: red;\n}\n.foo .bar {\n  @extend .baz;\n}\n```\n生成的css如下：\n``` css\n.bip .baz, .bip .foo .bar, .foo .bip .bar {\n  color: red;\n}\n```\n所以如果允许，尽可能避免这种用法。\n** 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 **\n\n## 占位选择器 %\n从 sass 3.2.0 以后就可以定义占位选择器 % 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend 去继承相应的样式，都会解析出来所有的样式。占位选择器以 % 标识定义，通过 @extend 调用。\n``` scss\n%ir {\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n$lte7:true !default;\n%clearfix {\n  @if $lte7 {\n    *zoom: 1;\n  }\n  &:before,&:after {\n    content: '';\n    display: table;\n    font: 0/0;\n  }\n  &:after {\n    clear: both;\n  }\n}\n#header {\n  h1 {\n    @extend %ir;\n    width: 300px\n  }\n}\n.ir {\n  @extend %ir;\n}\n```\n如上代码，定义了两个占位选择器 `%ir` 和 `%clearfix` ，其中 `%clearfix` 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。\nps:在 @media 中暂时不能 @extend ， @media 外的代码片段，以后将会可以。\n\n## 函数\nsass 定义了很多函数可供使用，当然你也可以自己定义函数，以 @function 开始。sass 的官方函数链接为：[sass function](http://sass-lang.com/documentation/Sass/Script/Functions.html) ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 lighten 减淡和 darken 加深使用最多，其调用方法为 `lighten($color,$amout)` 和 `darken($color,$amount)` ，它们的第一个参数都是颜色值，第二个参数都是百分比。\n``` scss\n$baseFontSize: 10px !default;\n$gray: #ccc !default;\n\n@function pxToRem($px) {\n  @return $px / $baseFontSize * 1rem;\n}\nbody {\n  font-size: $baseFontSize;\n  color: lighten($gray,10%);\n}\n.test {\n  font-size: pxToRem(16px);\n  color: darken($gray,10%);\n}\n```\n关于 @mixin ，% ，@function 更多说明可参阅：\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n\n\n## 运算\nsass 具有运算的特性，可以对数值型的 Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。\n``` scss\n$baseFontSize: 14px !default;\n$baseLineHeight: 1.5 !default;\n$baseGap: $baseFontSize * $baseLineHeight !default;\n.balber {\n  font-size: $baseGap;    //21px\n}\n```\n\n## 条件判断及循环\n### @if判断\n@if 可一个条件单独使用，也可以和 @else 结合多条件使用。\n``` scss\n$lte7: true;\n$type: monster;\n.ib{\n    display:inline-block;\n    @if $lte7 {\n        *display:inline;\n        *zoom:1;\n    }\n}\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n生成的 css 如下：\n\n``` scss\n.ib {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\np {\n  color: green;\n}\n\n```\n\n### 三目判断\n语法为：`if($condition,$if_true,$if_false)`。\n三个参数分别表示：条件，条件为真的值，条件为假的值。\n``` scss\nif(true,1px,2px) => 1px\nif(false,1px,2px) => 2px \n```\n\n### for循环\nfor 循环有两种形式，分别为：\n`@for $var from <start> through <end>` 和 `@for $var from <start> to <end>` 。\n$i 表示变量，start 表示起始值，end 表示结束值，这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。\n使用\n``` scss\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n@for $i from 5 to 7 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n```\n\n生成\n``` css\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n\n.item-5 {\n  width: 10em;\n}\n\n.item-6 {\n  width: 12em;\n}\n```\n\n### each循环\n语法为：`@each $var in <list or map>` 。\n其中 $var 表示变量，而 list 和 map 表示 list 类型数据和 map 类型数据。sass 3.3.0 新加入了多字段循环和 map 数据循环。\n#### 单个字段 list 数据循环\n使用\n``` scss\n$animal-list: puma, sea-slug, egret, salamander;\n@each $animal in $animal-list {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n\n生成\n``` css\n.puma-icon {\n  background-image: url(\"/images/puma.png\");\n}\n\n.sea-slug-icon {\n  background-image: url(\"/images/sea-slug.png\");\n}\n\n.egret-icon {\n  background-image: url(\"/images/egret.png\");\n}\n\n.salamander-icon {\n  background-image: url(\"/images/salamander.png\");\n}\n```\n\n#### 多个字段 list 数据循环\n使用\n``` scss\n$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);\n@each $animal, $color, $cursor in $animal-data {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n\n生成\n``` css\n.puma-icon {\n  background-image: url('/images/puma.png');\n  border: 2px solid black;\n  cursor: default; \n}\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png');\n  border: 2px solid blue;\n  cursor: pointer; \n}\n.egret-icon {\n  background-image: url('/images/egret.png');\n  border: 2px solid white;\n  cursor: move; \n}\n```\n\n#### 多个字段 map 数据循环\n``` scss\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n\n```\n\n生成\n``` css\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n# 小结\n本文介绍了 sass 最基本部分,你可以轻松地使用 sass 编写清晰、无冗余、语义化的 css 。对于 sass 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。\n\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n[sass函数列表](http://sass-lang.com/documentation/Sass/Script/Functions.html)\n[sass guidelines](https://sass-guidelin.es/zh/)","source":"_posts/sass.md","raw":"---\ntitle: Sass 教程\ndate: 2017-10-23 10:49:15\ncategories: 前端\ntags: [css, sass]\ncomments: false\n---\n\n<span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)\n\n# sass简介\n来自于官网的简介：\nSass is the most mature, stable, and powerful professional grade CSS extension language in the world.\n<font color=red> Sass 是世界上最成熟的，稳定的，功能强大的专业级 CSS 扩展语言。</font>\n\n<!-- more -->\n\n# sass 安装\n因为 sass 依赖 ruby 环境，所以装 sass 之前先确认安装了 ruby .\n在安装的时候，请勾选 Add Ruby executables to your PATH 这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到 ruby 环境.\n![](http://i1.piimg.com/567571/3a876fb3bb575d25.png)\n\n安装完 ruby 之后，在开始菜单中，打开我们的命令行，输入\n`ruby -v`\n\n![](http://i1.piimg.com/567571/e5795e583371ce6d.png)\n那么我们的 ruby 就安装成功了。\n\n然后直接在命令行中输入\n`gem install sass`\n按回车键确认，等待一段时间就会提示你 sass 安装成功。\n\n如果要安装 beta 版本的，可以在命令行中输入\n`gem install sass --pre`\n\n最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的 RubyGems 镜像安装 sass ，如果成功则忽略。\n由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过 gem sources 命令来配置源，先移除默认的 https://rubygems.org 源，然后添加淘宝的源 `https://ruby.taobao.org/` ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 gem install sass 了.\n\n```\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\ngem sources -l\n```\n如果输出：\n```\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n```\n则表示镜像替换成功，下一步\n```\ngem install sass\n```\n\n按回车键确认，等待一段时间就会提示你 sass 安装成功。\n\n如果你熟悉 git 命令的话，你还可以从 sass 的 Git repository 来安装，git 的命令行为：\n```\ngit clone git://github.com/nex3/sass.git\ncd sass\nrake install\n```\n\n# 如何升级 sass 版本\n\n我们可以使用命令 `gem update sass` 来升级我们的 sass 版本。\n\n如果想要安装sass的某一特定版本，命令行为\n`gem install sass --version=3.3.0`\n\n如果想要删除sass的某一特定版本，命令行为\n`gem uninstall sass --version=3.3.0`\n\n卸载sass,命令行为\n`gem uninstall sass`\n\n查看sass版本的命令行为\n`sass -v`\n\n查看ruby安装的所有程序包，命令语句为 `gem list` 。\n\n\n# sass 命令\n安装成功 sass 以后，我们来写个 demo 测试一下：\n创建一个 `style.scss` 文件：\n``` scss\n$fontSize: 14px;\nbody {\n  font-size: $fontSize;\n}\n```\n\n单文件转换\n``` \nsass style.scss style.css\n```\n\n单文件监听\n```\nsass --watch style.scss:style.css\n```\n\n文件夹监听\n```\nsass --watch sassFileDirectory:cssFileDirectory\n```\n\ncss 文件转成 sass/scss 文件\n```\nsass-convert style.css style.sass\nsass-convert style.css style.scss\n```\n\n## sass 命令配置选项\n运行命令行帮助文档，可以获得所有的配置选项\n```\nsass -h\n```\n\n配置选项 `--style`\n```\nsass style.scss:style.css --style compact\n```\n`--style` 表示解析后的 css 是什么格式，有四种取值分别为：expanded ，nested ，compact ，compressed 。\n\n配置选项 `--sourcemap`\n```\nsass style.scss:style.css --sourcemap\n```\n`--sourcemap` 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为 .css.map 文件。\n\n配置选项 `--debug-info`\n```\nsass style.scss:style.css --debug-info\n```\n`--debug-info` 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。\n\n\n\n# sass语法\n\n## 注释\n在介绍 sass 语法之前，最有必要的是先来了解一下 sass 中的注释。\nsass 有两种注释方式，一种是标准的 css 注释方式 `/* */`，另一种则是 `//` 双斜杆形式的单行注释，不过这种单行注释不会被转译出来，也就是说 `//` 这种注释不会转译到编译后的 css 文件中。\n\n需要说明的是：如果你的注释中有中文的话，请务必在 scss 文件开头加上：\n``` css\n@charset \"UTF-8\";\n```\n\n如果没有这个的话，会报错。\n\n## 变量\nsass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像 CSS 属性设置一样），如果值后面加上 !default 则表示默认值。\n普通变量\n定义之后可以在全局范围内使用。\n\n``` scss\n$fontSize: 12px;\nbody {\n    font-size: $fontSize;\n}\n```\n\n### 默认变量\nsass 的默认变量仅需要在值后面加上 `!default` 即可。\n\n``` scss\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n```\n\nsass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的。\n``` scss\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n$baseLineHeight: 2;\np {\n    line-height: $baseLineHeight;\n}\n```\n这个相当于给 $baseLineHeight 设置了一个默认值，如果你想重新设置的话，可以再写一个 $baseLineHeight 的属性值来覆盖它。\n\n### 特殊变量\n一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 `#{$variables}` 形式使用。\n``` scss\n$borderDirection: top !default;\n$baseFontSize: 12px !default;\n$baseLineHeight: 1.5 !default;\n\n//应用于 class 和属性\n.border-#{$borderDirection} {\n    border-#{$borderDirection}: 1px solid #ccc;\n}\n//应用于复杂的属性值\nbody {\n    font:#{$baseFontSize}/#{$baseLineHeight};\n}\n```\n\n\n这个地方我们如果不用 `#{$variables}` 形式的话，那么结果中 body 的样式就是：\n``` css\nbody {\n  font: 8px;\n}\n```\n这显然不是我们想要的。\n\n### 多值变量\n多值变量分为 list 类型和 map 类型，简单来说 list 类型有点像 js 中的数组，而 map 类型有点像 js 中的对象。\n\n#### list\nlist 数据可通过空格，逗号或小括号分隔多个值，可用 nth($var,$index) 取值。关于 list 数据操作还有很多其他函数如 `length($list)` ， `join($list,$list2,[$separator])` ， `append($list,$value,[$separator])` 等。\n\n定义\n``` scss\n//一维数组\n$px: 5px 10px 20px 30px;\n//二维数组\n$px: 5px 10px, 20px 30px;\n$px: (5px 10px) (20px 30px);\n```\n\n使用\n``` scss\n$linkColor: #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值\na{\n  color:nth($linkColor,1);\n\n  &:hover{\n    color:nth($linkColor,2);\n  }\n}\n```\n生成\n``` css\na{\n  color:#08c;\n}\na:hover{\n  color:#333;\n}\n```\n\n\n#### map\nmap 数据以 key和 value 成对出现，其中 value 又可以是 list 。格式为： `$map:(key1: value1,key2:value2,key3:value3);` 。可通过 `map-get($map,$key)` 取值。关于map数据还有很多其他函数如 `map-merge($map1,$map2)` ， `map-keys($map)` ， `map-values($map)` 等。\n\n定义\n``` scss\n$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);\n```\n使用\n``` scss\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n```\n生成\n```css\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n\n## 全局变量\n在变量值后面加上 !global 即为全局变量。\n在选择器中声明的变量会覆盖外面全局声明的变量。\n``` scss\n$fontSize: 12px;\nbody {\n  $fontSize: 14px;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n启用global之后的机制\n\n``` scss\n$fontSize: 12px;\nbody {\n  $fontSize: 14px !global;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了 !global 之后才会成为全局变量。\n\n\n## 嵌套(Nesting)\n\nsass 的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。\n\n### 选择器嵌套\n所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了 sass 文件的结构性和可读性。\n在选择器嵌套中，可以使用 `&` 表示父元素选择器\n\n``` scss\n#top_nav {\n  line-height: 30px;\n  text-transform: capitalize;\n  background-color: #333;\n  li {\n    display: block;\n  }\n  a {\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n    &:hover {\n      color: #ddd;\n    }\n  }\n}\n```\n\n### 属性嵌套\n所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。\n``` css\n.fakeshadow {\n  border: {\n    style: solid;\n    left: {\n      width: 4px;\n      color: #888;\n    }\n    right: {\n      width: 2px;\n      color: #ccc;\n    }\n  }\n}\n```\n当然这个只是属性嵌套的一个例子，在实际中这样来写 `border` 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。\n\n## @at-root\nsass3.3.0 中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。\n### 普通跳出嵌套\n``` scss\n/*没有跳出*/\n.parent-1 {\n  color: #f00;\n  .child {\n    width: 100px\n  }\n}\n\n/*单个选择器跳出*/\n.parent-2 {\n  color: #f00;\n  @at-root .child {\n    width: 200px;\n  }\n}\n\n\n/*多个选择器跳出*/\n.parent-3 {\n  background: #f00;\n  @at-root {\n    .child1 {\n      width: 300px;\n    }\n    .child2 {\n      width: 400px;\n    }\n  }\n}\n```\n\n\n默认 `@at-root` 只会跳出选择器嵌套，而不能跳出 `@media` 或 `@support` ，如果要跳出这两种，则需要使用 `@at-root(without:media)` ，`@at-root(without:support)` 。这个语法的关键词有四个： `all` （表示所有），`true`（表示常规CSS）， `media`（表示media）， 'support'（表示support，因为 `@support` 目前还无法广泛使用）。我们默认的 `@at-root` 其实就是 `@at-root(without:rule)` 。\n``` scss\n@media print {\n  .parent1 {\n    color: #000;\n    @at-root .child1 {\n      width: 200px\n    }\n  }\n}\n//跳出media嵌套，父级有效\n@media print {\n  .parent2 {\n    color: #f00;\n    @at-root (without:media) {\n      .child2 {\n        width: 200px;\n      }\n    }\n  }\n}\n//跳出media和父级\n@media print {\n  .parent3 {\n    color: #f00;\n    @at-root (without:all) {\n      .child3 {\n        width: 200px;\n      }\n    }\n  }\n}\n```\n\n`@at-root` 与 `&` 配合使用\n``` scss\n.child {\n  @at-root .parent & {\n    color: #f00;\n  }\n}\n```\n\n应用于`@keyframe`\n``` scss\n.demo {\n  ...\n  animation: motion 3s infinite;\n  @at-root {\n    @keyframes motion {\n      ...\n    }\n  }\n}\n```\n\n生成\n``` scss\n.demo {\n    ...   \n    animation: motion 3s infinite;\n}\n@keyframes motion {\n    ...\n}\n```\n\n我认为 `@at-root` 应用于 `@keyframe` 或许是 `@at-root` 最好的实践。\n跳出嵌套，我们为什么要用 `@at-root` 来实现呢？我们完全可以在写样式的时候，不使用嵌套的写法。\n但是 `@keyframe` 就不一样了，这个动画应用于当前选择器，所以把动画样式写入这个选择器的结构里，方便修改与查看。\n相比于之前在 css 中使用 @keyframe 来定义动画，然后在元素中调用，如果一个文件中 @keyframe 比较多的话，在我们想要调用动画的时候，动画与元素之间的关联性比较差。\n\n## 混合(mixin)\nsass 中使用 `@mixin` 声明混合，可以传递参数，参数名以 $ 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 @mixin 通过 @include 来调用。\n### 无参数mixin\n``` scss\n@mixin center-block {\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n.demo {\n  @include center-block;\n}\n```\n\n生成\n``` css\n.demo{\n    margin-left:auto;\n    margin-right:auto;\n}\n```\n\n\n### 有参数mixin\n``` scss\n@mixin opacity($opacity: 50) {\n  opacity: $opacity / 100;\n  filter: alpha(opacity=$opacity);\n}\n.opacity{\n  @include opacity; //参数使用默认值\n}\n.opacity-80{\n  @include opacity(80); //传递参数\n}\n```\n\n### 多个参数mixin\n调用时可直接传入值，如 `@include` 传入参数的个数小于 `@mixin` 定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。\n``` scss\n@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) {\n  border-bottom: $border;\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n.imgtext-h li {\n  @include horizontal-line(1px solid #ccc);\n}\n.imgtext-h-product li {\n  @include horizontal-line($padding:15px);\n}\n```\n\n生成\n``` css\n.imgtext-h li {\n    border-bottom: 1px solid #cccccc;\n    padding-top: 10px;\n    padding-bottom: 10px;\n}\n.imgtext-h--product li {\n    border-bottom: 1px dashed #cccccc;\n    padding-top: 15px;\n    padding-bottom: 15px;\n}\n```\n\n### 多组值参数mixin\n如果一个参数可以有多组值，如 `box-shadow` 、`transition` 等，那么参数则需要在变量后加三个点表示，如 `$variables...` 。\n``` scss\n//box-shadow可以有多组值，所以在变量参数后面添加...\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow;\n  box-shadow: $shadow;\n}\n.box {\n  border: 1px solid #ccc;\n  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));\n}\n```\n\n## @content\n@content 可以用来解决 css3 的 @media 等带来的问题。它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。\n``` scss\n@mixin max-screen($res) {\n  @media only screen and (max-width:$res) {\n    @content;\n  }\n}\n@include max-screen(480px) {\n  body {\n    color: red;\n  }\n}\n```\nPS：@mixin 通过 @include 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从 3.2.0 版本以后，建议传递参数的用 @mixin ，而非传递参数的使用下面的继承 % 。\n\n## 继承\nsass 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend ，后面紧跟需要继承的选择器。\n\n使用\n``` scss\nh1 {\n  border: 4px solid #ff9aa9;\n}\n.speaker {\n  @extend h1;\n  border-width: 2px;\n}\n```\n\n生成\n``` css\nh1,.speaker{\n  border: 4px solid #ff9aa9;\n}\n.speaker{\n  border-width: 2px;\n}\n```\n\n可以看出，选择器继承生成的样式不是拷贝的形式，而是以联合声明的方式存在的。\n\n\n### 继承的工作细节\n关于 @extend 有两个要点你应该知道：\n\n1、跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。\n举个例子，使用混合器的时候：\n``` scss\n@mixin border-colors {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo1 {\n  @include border-colors;\n}\n.demo2 {\n  @include border-colors; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n使用继承的时候：\n``` scss\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  @extend .demo1; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1, .demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。\n\n2、继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值， css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。\n\n混合器本身不会引起 css 层叠的问题，因为混合器把样式直接放到了 css 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。\n\n### 使用继承的最佳实践\n通常使用继承会让你的 css 美观、整洁。因为继承只会在生成 css 时复制选择器，而不会复制大段的 css 属性。但是如果你不小心，可能会让生成的 css 中包含大量的选择器复制。\n避免这种情况出现的最好方法就是不要在 css 规则中使用后代选择器（比如 .foo .bar）去继承 css 规则。如果你这么做，同时被继承的 css 规则有通过后代选择器修饰的样式，生成 css 中的选择器的数量很快就会失控。\n例如：\n``` scss\n.bip .baz {\n  color: red;\n}\n.foo .bar {\n  @extend .baz;\n}\n```\n生成的css如下：\n``` css\n.bip .baz, .bip .foo .bar, .foo .bip .bar {\n  color: red;\n}\n```\n所以如果允许，尽可能避免这种用法。\n** 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 **\n\n## 占位选择器 %\n从 sass 3.2.0 以后就可以定义占位选择器 % 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend 去继承相应的样式，都会解析出来所有的样式。占位选择器以 % 标识定义，通过 @extend 调用。\n``` scss\n%ir {\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n$lte7:true !default;\n%clearfix {\n  @if $lte7 {\n    *zoom: 1;\n  }\n  &:before,&:after {\n    content: '';\n    display: table;\n    font: 0/0;\n  }\n  &:after {\n    clear: both;\n  }\n}\n#header {\n  h1 {\n    @extend %ir;\n    width: 300px\n  }\n}\n.ir {\n  @extend %ir;\n}\n```\n如上代码，定义了两个占位选择器 `%ir` 和 `%clearfix` ，其中 `%clearfix` 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。\nps:在 @media 中暂时不能 @extend ， @media 外的代码片段，以后将会可以。\n\n## 函数\nsass 定义了很多函数可供使用，当然你也可以自己定义函数，以 @function 开始。sass 的官方函数链接为：[sass function](http://sass-lang.com/documentation/Sass/Script/Functions.html) ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 lighten 减淡和 darken 加深使用最多，其调用方法为 `lighten($color,$amout)` 和 `darken($color,$amount)` ，它们的第一个参数都是颜色值，第二个参数都是百分比。\n``` scss\n$baseFontSize: 10px !default;\n$gray: #ccc !default;\n\n@function pxToRem($px) {\n  @return $px / $baseFontSize * 1rem;\n}\nbody {\n  font-size: $baseFontSize;\n  color: lighten($gray,10%);\n}\n.test {\n  font-size: pxToRem(16px);\n  color: darken($gray,10%);\n}\n```\n关于 @mixin ，% ，@function 更多说明可参阅：\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n\n\n## 运算\nsass 具有运算的特性，可以对数值型的 Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。\n``` scss\n$baseFontSize: 14px !default;\n$baseLineHeight: 1.5 !default;\n$baseGap: $baseFontSize * $baseLineHeight !default;\n.balber {\n  font-size: $baseGap;    //21px\n}\n```\n\n## 条件判断及循环\n### @if判断\n@if 可一个条件单独使用，也可以和 @else 结合多条件使用。\n``` scss\n$lte7: true;\n$type: monster;\n.ib{\n    display:inline-block;\n    @if $lte7 {\n        *display:inline;\n        *zoom:1;\n    }\n}\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n生成的 css 如下：\n\n``` scss\n.ib {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\np {\n  color: green;\n}\n\n```\n\n### 三目判断\n语法为：`if($condition,$if_true,$if_false)`。\n三个参数分别表示：条件，条件为真的值，条件为假的值。\n``` scss\nif(true,1px,2px) => 1px\nif(false,1px,2px) => 2px \n```\n\n### for循环\nfor 循环有两种形式，分别为：\n`@for $var from <start> through <end>` 和 `@for $var from <start> to <end>` 。\n$i 表示变量，start 表示起始值，end 表示结束值，这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。\n使用\n``` scss\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n@for $i from 5 to 7 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n```\n\n生成\n``` css\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n\n.item-5 {\n  width: 10em;\n}\n\n.item-6 {\n  width: 12em;\n}\n```\n\n### each循环\n语法为：`@each $var in <list or map>` 。\n其中 $var 表示变量，而 list 和 map 表示 list 类型数据和 map 类型数据。sass 3.3.0 新加入了多字段循环和 map 数据循环。\n#### 单个字段 list 数据循环\n使用\n``` scss\n$animal-list: puma, sea-slug, egret, salamander;\n@each $animal in $animal-list {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n\n生成\n``` css\n.puma-icon {\n  background-image: url(\"/images/puma.png\");\n}\n\n.sea-slug-icon {\n  background-image: url(\"/images/sea-slug.png\");\n}\n\n.egret-icon {\n  background-image: url(\"/images/egret.png\");\n}\n\n.salamander-icon {\n  background-image: url(\"/images/salamander.png\");\n}\n```\n\n#### 多个字段 list 数据循环\n使用\n``` scss\n$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);\n@each $animal, $color, $cursor in $animal-data {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n\n生成\n``` css\n.puma-icon {\n  background-image: url('/images/puma.png');\n  border: 2px solid black;\n  cursor: default; \n}\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png');\n  border: 2px solid blue;\n  cursor: pointer; \n}\n.egret-icon {\n  background-image: url('/images/egret.png');\n  border: 2px solid white;\n  cursor: move; \n}\n```\n\n#### 多个字段 map 数据循环\n``` scss\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n\n```\n\n生成\n``` css\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n# 小结\n本文介绍了 sass 最基本部分,你可以轻松地使用 sass 编写清晰、无冗余、语义化的 css 。对于 sass 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。\n\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n[sass函数列表](http://sass-lang.com/documentation/Sass/Script/Functions.html)\n[sass guidelines](https://sass-guidelin.es/zh/)","slug":"sass","published":1,"updated":"2019-08-15T07:18:45.057Z","_id":"cjzccpczr001oz4v57spf9uew","layout":"post","photos":[],"link":"","content":"<p><span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)</p>\n<h1 id=\"sass简介\"><a href=\"#sass简介\" class=\"headerlink\" title=\"sass简介\"></a>sass简介</h1><p>来自于官网的简介：<br>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>\n<font color=\"red\"> Sass 是世界上最成熟的，稳定的，功能强大的专业级 CSS 扩展语言。</font>\n\n<a id=\"more\"></a>\n<h1 id=\"sass-安装\"><a href=\"#sass-安装\" class=\"headerlink\" title=\"sass 安装\"></a>sass 安装</h1><p>因为 sass 依赖 ruby 环境，所以装 sass 之前先确认安装了 ruby .<br>在安装的时候，请勾选 Add Ruby executables to your PATH 这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到 ruby 环境.<br><img src=\"http://i1.piimg.com/567571/3a876fb3bb575d25.png\" alt=\"\"></p>\n<p>安装完 ruby 之后，在开始菜单中，打开我们的命令行，输入<br><code>ruby -v</code></p>\n<p><img src=\"http://i1.piimg.com/567571/e5795e583371ce6d.png\" alt=\"\"><br>那么我们的 ruby 就安装成功了。</p>\n<p>然后直接在命令行中输入<br><code>gem install sass</code><br>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>\n<p>如果要安装 beta 版本的，可以在命令行中输入<br><code>gem install sass --pre</code></p>\n<p>最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的 RubyGems 镜像安装 sass ，如果成功则忽略。<br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过 gem sources 命令来配置源，先移除默认的 <a href=\"https://rubygems.org\" target=\"_blank\" rel=\"noopener\">https://rubygems.org</a> 源，然后添加淘宝的源 <code>https://ruby.taobao.org/</code> ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 gem install sass 了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n<p>如果输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\">https://ruby.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>则表示镜像替换成功，下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure></p>\n<p>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>\n<p>如果你熟悉 git 命令的话，你还可以从 sass 的 Git repository 来安装，git 的命令行为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/nex3/sass.git</span><br><span class=\"line\">cd sass</span><br><span class=\"line\">rake install</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"如何升级-sass-版本\"><a href=\"#如何升级-sass-版本\" class=\"headerlink\" title=\"如何升级 sass 版本\"></a>如何升级 sass 版本</h1><p>我们可以使用命令 <code>gem update sass</code> 来升级我们的 sass 版本。</p>\n<p>如果想要安装sass的某一特定版本，命令行为<br><code>gem install sass --version=3.3.0</code></p>\n<p>如果想要删除sass的某一特定版本，命令行为<br><code>gem uninstall sass --version=3.3.0</code></p>\n<p>卸载sass,命令行为<br><code>gem uninstall sass</code></p>\n<p>查看sass版本的命令行为<br><code>sass -v</code></p>\n<p>查看ruby安装的所有程序包，命令语句为 <code>gem list</code> 。</p>\n<h1 id=\"sass-命令\"><a href=\"#sass-命令\" class=\"headerlink\" title=\"sass 命令\"></a>sass 命令</h1><p>安装成功 sass 以后，我们来写个 demo 测试一下：<br>创建一个 <code>style.scss</code> 文件：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>单文件转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss style.css</span><br></pre></td></tr></table></figure></p>\n<p>单文件监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch style.scss:style.css</span><br></pre></td></tr></table></figure></p>\n<p>文件夹监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch sassFileDirectory:cssFileDirectory</span><br></pre></td></tr></table></figure></p>\n<p>css 文件转成 sass/scss 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass-convert style.css style.sass</span><br><span class=\"line\">sass-convert style.css style.scss</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sass-命令配置选项\"><a href=\"#sass-命令配置选项\" class=\"headerlink\" title=\"sass 命令配置选项\"></a>sass 命令配置选项</h2><p>运行命令行帮助文档，可以获得所有的配置选项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass -h</span><br></pre></td></tr></table></figure></p>\n<p>配置选项 <code>--style</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --style compact</span><br></pre></td></tr></table></figure></p>\n<p><code>--style</code> 表示解析后的 css 是什么格式，有四种取值分别为：expanded ，nested ，compact ，compressed 。</p>\n<p>配置选项 <code>--sourcemap</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --sourcemap</span><br></pre></td></tr></table></figure></p>\n<p><code>--sourcemap</code> 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为 .css.map 文件。</p>\n<p>配置选项 <code>--debug-info</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --debug-info</span><br></pre></td></tr></table></figure></p>\n<p><code>--debug-info</code> 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。</p>\n<h1 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h1><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>在介绍 sass 语法之前，最有必要的是先来了解一下 sass 中的注释。<br>sass 有两种注释方式，一种是标准的 css 注释方式 <code>/* */</code>，另一种则是 <code>//</code> 双斜杆形式的单行注释，不过这种单行注释不会被转译出来，也就是说 <code>//</code> 这种注释不会转译到编译后的 css 文件中。</p>\n<p>需要说明的是：如果你的注释中有中文的话，请务必在 scss 文件开头加上：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如果没有这个的话，会报错。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>sass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像 CSS 属性设置一样），如果值后面加上 !default 则表示默认值。<br>普通变量<br>定义之后可以在全局范围内使用。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h3><p>sass 的默认变量仅需要在值后面加上 <code>!default</code> 即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个相当于给 $baseLineHeight 设置了一个默认值，如果你想重新设置的话，可以再写一个 $baseLineHeight 的属性值来覆盖它。</p>\n<h3 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h3><p>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 <code>#{$variables}</code> 形式使用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$borderDirection</span>: top !default;</span><br><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">12px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应用于 class 和属性</span></span><br><span class=\"line\"><span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$borderDirection</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$borderDirection</span>&#125;: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//应用于复杂的属性值</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>:#&#123;<span class=\"variable\">$baseFontSize</span>&#125;/#&#123;<span class=\"variable\">$baseLineHeight</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个地方我们如果不用 <code>#{$variables}</code> 形式的话，那么结果中 body 的样式就是：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这显然不是我们想要的。</p>\n<h3 id=\"多值变量\"><a href=\"#多值变量\" class=\"headerlink\" title=\"多值变量\"></a>多值变量</h3><p>多值变量分为 list 类型和 map 类型，简单来说 list 类型有点像 js 中的数组，而 map 类型有点像 js 中的对象。</p>\n<h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>list 数据可通过空格，逗号或小括号分隔多个值，可用 nth($var,$index) 取值。关于 list 数据操作还有很多其他函数如 <code>length($list)</code> ， <code>join($list,$list2,[$separator])</code> ， <code>append($list,$value,[$separator])</code> 等。</p>\n<p>定义<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一维数组</span></span><br><span class=\"line\"><span class=\"variable\">$px</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"><span class=\"comment\">//二维数组</span></span><br><span class=\"line\"><span class=\"variable\">$px</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"><span class=\"variable\">$px</span>: (<span class=\"number\">5px</span> <span class=\"number\">10px</span>) (<span class=\"number\">20px</span> <span class=\"number\">30px</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$linkColor</span>: <span class=\"number\">#08c</span> <span class=\"number\">#333</span> !default;<span class=\"comment\">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:nth(<span class=\"variable\">$linkColor</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;:hover&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:nth(<span class=\"variable\">$linkColor</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#08c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>map 数据以 key和 value 成对出现，其中 value 又可以是 list 。格式为： <code>$map:(key1: value1,key2:value2,key3:value3);</code> 。可通过 <code>map-get($map,$key)</code> 取值。关于map数据还有很多其他函数如 <code>map-merge($map1,$map2)</code> ， <code>map-keys($map)</code> ， <code>map-values($map)</code> 等。</p>\n<p>定义<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$heading</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$headings</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> in <span class=\"variable\">$headings</span> &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$header</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><p>在变量值后面加上 !global 即为全局变量。<br>在选择器中声明的变量会覆盖外面全局声明的变量。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启用global之后的机制</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了 !global 之后才会成为全局变量。</p>\n<h2 id=\"嵌套-Nesting\"><a href=\"#嵌套-Nesting\" class=\"headerlink\" title=\"嵌套(Nesting)\"></a>嵌套(Nesting)</h2><p>sass 的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。</p>\n<h3 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h3><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了 sass 文件的结构性和可读性。<br>在选择器嵌套中，可以使用 <code>&amp;</code> 表示父元素选择器</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#top_nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: capitalize;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h3><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fakeshadow</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: &#123;</span><br><span class=\"line\">    style: solid;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: &#123;</span><br><span class=\"line\">      width: <span class=\"number\">4px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">right</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然这个只是属性嵌套的一个例子，在实际中这样来写 <code>border</code> 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。</p>\n<h2 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h2><p>sass3.3.0 中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</p>\n<h3 id=\"普通跳出嵌套\"><a href=\"#普通跳出嵌套\" class=\"headerlink\" title=\"普通跳出嵌套\"></a>普通跳出嵌套</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*没有跳出*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*单个选择器跳出*/</span><br><span class=\"line\">.parent-<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  color: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  @at-root .child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多个选择器跳出*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  @at-root &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认 <code>@at-root</code> 只会跳出选择器嵌套，而不能跳出 <code>@media</code> 或 <code>@support</code> ，如果要跳出这两种，则需要使用 <code>@at-root(without:media)</code> ，<code>@at-root(without:support)</code> 。这个语法的关键词有四个： <code>all</code> （表示所有），<code>true</code>（表示常规CSS）， <code>media</code>（表示media）， ‘support’（表示support，因为 <code>@support</code> 目前还无法广泛使用）。我们默认的 <code>@at-root</code> 其实就是 <code>@at-root(without:rule)</code> 。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.parent1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    @at-root .child1 &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">200px</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//跳出media嵌套，父级有效</span><br><span class=\"line\">@media print &#123;</span><br><span class=\"line\">  .parent2 &#123;</span><br><span class=\"line\">    color: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">    @at-root (without:<span class=\"keyword\">media</span>) &#123;</span><br><span class=\"line\">      <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//跳出media和父级</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.parent3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">    @at-root (without:all) &#123;</span><br><span class=\"line\">      <span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>@at-root</code> 与 <code>&amp;</code> 配合使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  @at-root .parent &amp; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>应用于<code>@keyframe</code><br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: motion <span class=\"number\">3s</span> infinite;</span><br><span class=\"line\">  @at-root &#123;</span><br><span class=\"line\">    @keyframes motion &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    ...   </span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: motion <span class=\"number\">3s</span> infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes motion &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我认为 <code>@at-root</code> 应用于 <code>@keyframe</code> 或许是 <code>@at-root</code> 最好的实践。<br>跳出嵌套，我们为什么要用 <code>@at-root</code> 来实现呢？我们完全可以在写样式的时候，不使用嵌套的写法。<br>但是 <code>@keyframe</code> 就不一样了，这个动画应用于当前选择器，所以把动画样式写入这个选择器的结构里，方便修改与查看。<br>相比于之前在 css 中使用 @keyframe 来定义动画，然后在元素中调用，如果一个文件中 @keyframe 比较多的话，在我们想要调用动画的时候，动画与元素之间的关联性比较差。</p>\n<h2 id=\"混合-mixin\"><a href=\"#混合-mixin\" class=\"headerlink\" title=\"混合(mixin)\"></a>混合(mixin)</h2><p>sass 中使用 <code>@mixin</code> 声明混合，可以传递参数，参数名以 $ 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 @mixin 通过 @include 来调用。</p>\n<h3 id=\"无参数mixin\"><a href=\"#无参数mixin\" class=\"headerlink\" title=\"无参数mixin\"></a>无参数mixin</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> center-block &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: &#123;</span><br><span class=\"line\">    left: auto;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: auto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> center-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有参数mixin\"><a href=\"#有参数mixin\" class=\"headerlink\" title=\"有参数mixin\"></a>有参数mixin</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> opacity(<span class=\"variable\">$opacity</span>: 50) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"variable\">$opacity</span> / <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: alpha(opacity=<span class=\"variable\">$opacity</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.opacity</span>&#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> opacity; <span class=\"comment\">//参数使用默认值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.opacity-80</span>&#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> opacity(<span class=\"number\">80</span>); <span class=\"comment\">//传递参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个参数mixin\"><a href=\"#多个参数mixin\" class=\"headerlink\" title=\"多个参数mixin\"></a>多个参数mixin</h3><p>调用时可直接传入值，如 <code>@include</code> 传入参数的个数小于 <code>@mixin</code> 定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> horizontal-line(<span class=\"variable\">$border</span>:<span class=\"number\">1px</span> dashed <span class=\"number\">#ccc</span>,<span class=\"variable\">$padding</span>:<span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"variable\">$padding</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"variable\">$padding</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> horizontal-line(<span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h-product</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> horizontal-line(<span class=\"variable\">$padding</span>:<span class=\"number\">15px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgtext-h</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h--product</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> dashed <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多组值参数mixin\"><a href=\"#多组值参数mixin\" class=\"headerlink\" title=\"多组值参数mixin\"></a>多组值参数mixin</h3><p>如果一个参数可以有多组值，如 <code>box-shadow</code> 、<code>transition</code> 等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code> 。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//box-shadow可以有多组值，所以在变量参数后面添加...</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow(<span class=\"variable\">$shadow</span>...) &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> box-shadow (<span class=\"number\">0</span> 2px 2px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>),<span class=\"number\">0</span> 3px 3px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>),<span class=\"number\">0</span> 4px 4px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"content\"><a href=\"#content\" class=\"headerlink\" title=\"@content\"></a>@content</h2><p>@content 可以用来解决 css3 的 @media 等带来的问题。它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> max-screen(<span class=\"variable\">$res</span>) &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">media</span> only screen and (max-width:<span class=\"variable\">$res</span>) &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">include</span> max-screen(<span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>PS：@mixin 通过 @include 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从 3.2.0 版本以后，建议传递参数的用 @mixin ，而非传递参数的使用下面的继承 % 。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>sass 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend ，后面紧跟需要继承的选择器。</p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ff9aa9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.speaker</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> h1;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-class\">.speaker</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ff9aa9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.speaker</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，选择器继承生成的样式不是拷贝的形式，而是以联合声明的方式存在的。</p>\n<h3 id=\"继承的工作细节\"><a href=\"#继承的工作细节\" class=\"headerlink\" title=\"继承的工作细节\"></a>继承的工作细节</h3><p>关于 @extend 有两个要点你应该知道：</p>\n<p>1、跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>举个例子，使用混合器的时候：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-colors &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-colors;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-colors; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用继承的时候：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .demo1; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span>, <span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。</p>\n<p>2、继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值， css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</p>\n<p>混合器本身不会引起 css 层叠的问题，因为混合器把样式直接放到了 css 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。</p>\n<h3 id=\"使用继承的最佳实践\"><a href=\"#使用继承的最佳实践\" class=\"headerlink\" title=\"使用继承的最佳实践\"></a>使用继承的最佳实践</h3><p>通常使用继承会让你的 css 美观、整洁。因为继承只会在生成 css 时复制选择器，而不会复制大段的 css 属性。但是如果你不小心，可能会让生成的 css 中包含大量的选择器复制。<br>避免这种情况出现的最好方法就是不要在 css 规则中使用后代选择器（比如 .foo .bar）去继承 css 规则。如果你这么做，同时被继承的 css 规则有通过后代选择器修饰的样式，生成 css 中的选择器的数量很快就会失控。<br>例如：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .baz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的css如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span>, <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span>, <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以如果允许，尽可能避免这种用法。<br><strong> 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 </strong></p>\n<h2 id=\"占位选择器\"><a href=\"#占位选择器\" class=\"headerlink\" title=\"占位选择器 %\"></a>占位选择器 %</h2><p>从 sass 3.2.0 以后就可以定义占位选择器 % 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend 去继承相应的样式，都会解析出来所有的样式。占位选择器以 % 标识定义，通过 @extend 调用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%ir &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$lte7</span>:true !default;</span><br><span class=\"line\">%clearfix &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$lte7</span> &#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;:before,&amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">0</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %ir;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.ir &#123;</span><br><span class=\"line\">  @extend %ir;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上代码，定义了两个占位选择器 <code>%ir</code> 和 <code>%clearfix</code> ，其中 <code>%clearfix</code> 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。<br>ps:在 @media 中暂时不能 @extend ， @media 外的代码片段，以后将会可以。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>sass 定义了很多函数可供使用，当然你也可以自己定义函数，以 @function 开始。sass 的官方函数链接为：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">sass function</a> ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 lighten 减淡和 darken 加深使用最多，其调用方法为 <code>lighten($color,$amout)</code> 和 <code>darken($color,$amount)</code> ，它们的第一个参数都是颜色值，第二个参数都是百分比。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">10px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$gray</span>: <span class=\"number\">#ccc</span> !default;</span><br><span class=\"line\"></span><br><span class=\"line\">@function pxToRem(<span class=\"variable\">$px</span>) &#123;</span><br><span class=\"line\">  @return <span class=\"variable\">$px</span> / <span class=\"variable\">$baseFontSize</span> * 1rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$baseFontSize</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lighten(<span class=\"variable\">$gray</span>,<span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: pxToRem(<span class=\"number\">16px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: darken(<span class=\"variable\">$gray</span>,<span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于 @mixin ，% ，@function 更多说明可参阅：<br><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h2><p>sass 具有运算的特性，可以对数值型的 Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">14px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseGap</span>: <span class=\"variable\">$baseFontSize</span> * <span class=\"variable\">$baseLineHeight</span> !default;</span><br><span class=\"line\"><span class=\"selector-class\">.balber</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$baseGap</span>;    <span class=\"comment\">//21px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件判断及循环\"><a href=\"#条件判断及循环\" class=\"headerlink\" title=\"条件判断及循环\"></a>条件判断及循环</h2><h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"@if判断\"></a>@if判断</h3><p>@if 可一个条件单独使用，也可以和 @else 结合多条件使用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$lte7</span>: true;</span><br><span class=\"line\"><span class=\"variable\">$type</span>: monster;</span><br><span class=\"line\"><span class=\"selector-class\">.ib</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">    @<span class=\"keyword\">if</span> <span class=\"variable\">$lte7</span> &#123;</span><br><span class=\"line\">        *<span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\">        *zoom:<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$type</span> == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> if <span class=\"variable\">$type</span> == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> if <span class=\"variable\">$type</span> == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的 css 如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ib</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  *<span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目判断\"><a href=\"#三目判断\" class=\"headerlink\" title=\"三目判断\"></a>三目判断</h3><p>语法为：<code>if($condition,$if_true,$if_false)</code>。<br>三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true,1px,2px) =&gt; 1px</span><br><span class=\"line\">if(false,1px,2px) =&gt; 2px</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>for 循环有两种形式，分别为：<br><code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code> 。<br>$i 表示变量，start 表示起始值，end 表示结束值，这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。<br>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 3 &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 5 to 7 &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-6</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h3><p>语法为：<code>@each $var in &lt;list or map&gt;</code> 。<br>其中 $var 表示变量，而 list 和 map 表示 list 类型数据和 map 类型数据。sass 3.3.0 新加入了多字段循环和 map 数据循环。</p>\n<h4 id=\"单个字段-list-数据循环\"><a href=\"#单个字段-list-数据循环\" class=\"headerlink\" title=\"单个字段 list 数据循环\"></a>单个字段 list 数据循环</h4><p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$animal-list</span>: puma, sea-slug, egret, salamander;</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$animal</span> in <span class=\"variable\">$animal-list</span> &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/puma.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/sea-slug.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/egret.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/salamander.png\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个字段-list-数据循环\"><a href=\"#多个字段-list-数据循环\" class=\"headerlink\" title=\"多个字段 list 数据循环\"></a>多个字段 list 数据循环</h4><p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$animal-data</span>: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$animal</span>, <span class=\"variable\">$color</span>, <span class=\"variable\">$cursor</span> in <span class=\"variable\">$animal-data</span> &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: <span class=\"variable\">$cursor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/puma.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: default; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/sea-slug.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/egret.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid white;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: move; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个字段-map-数据循环\"><a href=\"#多个字段-map-数据循环\" class=\"headerlink\" title=\"多个字段 map 数据循环\"></a>多个字段 map 数据循环</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$headings</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> in <span class=\"variable\">$headings</span> &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$header</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了 sass 最基本部分,你可以轻松地使用 sass 编写清晰、无冗余、语义化的 css 。对于 sass 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。</p>\n<p><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"noopener\">sass文档</a><br><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">sass函数列表</a><br><a href=\"https://sass-guidelin.es/zh/\" target=\"_blank\" rel=\"noopener\">sass guidelines</a></p>\n","site":{"data":{}},"excerpt":"<p><span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)</p>\n<h1 id=\"sass简介\"><a href=\"#sass简介\" class=\"headerlink\" title=\"sass简介\"></a>sass简介</h1><p>来自于官网的简介：<br>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>\n<font color=\"red\"> Sass 是世界上最成熟的，稳定的，功能强大的专业级 CSS 扩展语言。</font>","more":"<h1 id=\"sass-安装\"><a href=\"#sass-安装\" class=\"headerlink\" title=\"sass 安装\"></a>sass 安装</h1><p>因为 sass 依赖 ruby 环境，所以装 sass 之前先确认安装了 ruby .<br>在安装的时候，请勾选 Add Ruby executables to your PATH 这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到 ruby 环境.<br><img src=\"http://i1.piimg.com/567571/3a876fb3bb575d25.png\" alt=\"\"></p>\n<p>安装完 ruby 之后，在开始菜单中，打开我们的命令行，输入<br><code>ruby -v</code></p>\n<p><img src=\"http://i1.piimg.com/567571/e5795e583371ce6d.png\" alt=\"\"><br>那么我们的 ruby 就安装成功了。</p>\n<p>然后直接在命令行中输入<br><code>gem install sass</code><br>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>\n<p>如果要安装 beta 版本的，可以在命令行中输入<br><code>gem install sass --pre</code></p>\n<p>最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的 RubyGems 镜像安装 sass ，如果成功则忽略。<br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过 gem sources 命令来配置源，先移除默认的 <a href=\"https://rubygems.org\" target=\"_blank\" rel=\"noopener\">https://rubygems.org</a> 源，然后添加淘宝的源 <code>https://ruby.taobao.org/</code> ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 gem install sass 了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n<p>如果输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\">https://ruby.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>则表示镜像替换成功，下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure></p>\n<p>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>\n<p>如果你熟悉 git 命令的话，你还可以从 sass 的 Git repository 来安装，git 的命令行为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/nex3/sass.git</span><br><span class=\"line\">cd sass</span><br><span class=\"line\">rake install</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"如何升级-sass-版本\"><a href=\"#如何升级-sass-版本\" class=\"headerlink\" title=\"如何升级 sass 版本\"></a>如何升级 sass 版本</h1><p>我们可以使用命令 <code>gem update sass</code> 来升级我们的 sass 版本。</p>\n<p>如果想要安装sass的某一特定版本，命令行为<br><code>gem install sass --version=3.3.0</code></p>\n<p>如果想要删除sass的某一特定版本，命令行为<br><code>gem uninstall sass --version=3.3.0</code></p>\n<p>卸载sass,命令行为<br><code>gem uninstall sass</code></p>\n<p>查看sass版本的命令行为<br><code>sass -v</code></p>\n<p>查看ruby安装的所有程序包，命令语句为 <code>gem list</code> 。</p>\n<h1 id=\"sass-命令\"><a href=\"#sass-命令\" class=\"headerlink\" title=\"sass 命令\"></a>sass 命令</h1><p>安装成功 sass 以后，我们来写个 demo 测试一下：<br>创建一个 <code>style.scss</code> 文件：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>单文件转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss style.css</span><br></pre></td></tr></table></figure></p>\n<p>单文件监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch style.scss:style.css</span><br></pre></td></tr></table></figure></p>\n<p>文件夹监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch sassFileDirectory:cssFileDirectory</span><br></pre></td></tr></table></figure></p>\n<p>css 文件转成 sass/scss 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass-convert style.css style.sass</span><br><span class=\"line\">sass-convert style.css style.scss</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sass-命令配置选项\"><a href=\"#sass-命令配置选项\" class=\"headerlink\" title=\"sass 命令配置选项\"></a>sass 命令配置选项</h2><p>运行命令行帮助文档，可以获得所有的配置选项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass -h</span><br></pre></td></tr></table></figure></p>\n<p>配置选项 <code>--style</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --style compact</span><br></pre></td></tr></table></figure></p>\n<p><code>--style</code> 表示解析后的 css 是什么格式，有四种取值分别为：expanded ，nested ，compact ，compressed 。</p>\n<p>配置选项 <code>--sourcemap</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --sourcemap</span><br></pre></td></tr></table></figure></p>\n<p><code>--sourcemap</code> 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为 .css.map 文件。</p>\n<p>配置选项 <code>--debug-info</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass style.scss:style.css --debug-info</span><br></pre></td></tr></table></figure></p>\n<p><code>--debug-info</code> 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。</p>\n<h1 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h1><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>在介绍 sass 语法之前，最有必要的是先来了解一下 sass 中的注释。<br>sass 有两种注释方式，一种是标准的 css 注释方式 <code>/* */</code>，另一种则是 <code>//</code> 双斜杆形式的单行注释，不过这种单行注释不会被转译出来，也就是说 <code>//</code> 这种注释不会转译到编译后的 css 文件中。</p>\n<p>需要说明的是：如果你的注释中有中文的话，请务必在 scss 文件开头加上：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">charset</span> <span class=\"string\">\"UTF-8\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如果没有这个的话，会报错。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>sass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像 CSS 属性设置一样），如果值后面加上 !default 则表示默认值。<br>普通变量<br>定义之后可以在全局范围内使用。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h3><p>sass 的默认变量仅需要在值后面加上 <code>!default</code> 即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个相当于给 $baseLineHeight 设置了一个默认值，如果你想重新设置的话，可以再写一个 $baseLineHeight 的属性值来覆盖它。</p>\n<h3 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h3><p>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 <code>#{$variables}</code> 形式使用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$borderDirection</span>: top !default;</span><br><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">12px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应用于 class 和属性</span></span><br><span class=\"line\"><span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$borderDirection</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$borderDirection</span>&#125;: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//应用于复杂的属性值</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>:#&#123;<span class=\"variable\">$baseFontSize</span>&#125;/#&#123;<span class=\"variable\">$baseLineHeight</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个地方我们如果不用 <code>#{$variables}</code> 形式的话，那么结果中 body 的样式就是：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这显然不是我们想要的。</p>\n<h3 id=\"多值变量\"><a href=\"#多值变量\" class=\"headerlink\" title=\"多值变量\"></a>多值变量</h3><p>多值变量分为 list 类型和 map 类型，简单来说 list 类型有点像 js 中的数组，而 map 类型有点像 js 中的对象。</p>\n<h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>list 数据可通过空格，逗号或小括号分隔多个值，可用 nth($var,$index) 取值。关于 list 数据操作还有很多其他函数如 <code>length($list)</code> ， <code>join($list,$list2,[$separator])</code> ， <code>append($list,$value,[$separator])</code> 等。</p>\n<p>定义<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一维数组</span></span><br><span class=\"line\"><span class=\"variable\">$px</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"><span class=\"comment\">//二维数组</span></span><br><span class=\"line\"><span class=\"variable\">$px</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>, <span class=\"number\">20px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\"><span class=\"variable\">$px</span>: (<span class=\"number\">5px</span> <span class=\"number\">10px</span>) (<span class=\"number\">20px</span> <span class=\"number\">30px</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$linkColor</span>: <span class=\"number\">#08c</span> <span class=\"number\">#333</span> !default;<span class=\"comment\">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:nth(<span class=\"variable\">$linkColor</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;:hover&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:nth(<span class=\"variable\">$linkColor</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#08c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>map 数据以 key和 value 成对出现，其中 value 又可以是 list 。格式为： <code>$map:(key1: value1,key2:value2,key3:value3);</code> 。可通过 <code>map-get($map,$key)</code> 取值。关于map数据还有很多其他函数如 <code>map-merge($map1,$map2)</code> ， <code>map-keys($map)</code> ， <code>map-values($map)</code> 等。</p>\n<p>定义<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$heading</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$headings</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> in <span class=\"variable\">$headings</span> &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$header</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><p>在变量值后面加上 !global 即为全局变量。<br>在选择器中声明的变量会覆盖外面全局声明的变量。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启用global之后的机制</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$fontSize</span>: <span class=\"number\">14px</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了 !global 之后才会成为全局变量。</p>\n<h2 id=\"嵌套-Nesting\"><a href=\"#嵌套-Nesting\" class=\"headerlink\" title=\"嵌套(Nesting)\"></a>嵌套(Nesting)</h2><p>sass 的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。</p>\n<h3 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h3><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了 sass 文件的结构性和可读性。<br>在选择器嵌套中，可以使用 <code>&amp;</code> 表示父元素选择器</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#top_nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: capitalize;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h3><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fakeshadow</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: &#123;</span><br><span class=\"line\">    style: solid;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: &#123;</span><br><span class=\"line\">      width: <span class=\"number\">4px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">right</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然这个只是属性嵌套的一个例子，在实际中这样来写 <code>border</code> 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。</p>\n<h2 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h2><p>sass3.3.0 中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</p>\n<h3 id=\"普通跳出嵌套\"><a href=\"#普通跳出嵌套\" class=\"headerlink\" title=\"普通跳出嵌套\"></a>普通跳出嵌套</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*没有跳出*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*单个选择器跳出*/</span><br><span class=\"line\">.parent-<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  color: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  @at-root .child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*多个选择器跳出*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.parent-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  @at-root &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认 <code>@at-root</code> 只会跳出选择器嵌套，而不能跳出 <code>@media</code> 或 <code>@support</code> ，如果要跳出这两种，则需要使用 <code>@at-root(without:media)</code> ，<code>@at-root(without:support)</code> 。这个语法的关键词有四个： <code>all</code> （表示所有），<code>true</code>（表示常规CSS）， <code>media</code>（表示media）， ‘support’（表示support，因为 <code>@support</code> 目前还无法广泛使用）。我们默认的 <code>@at-root</code> 其实就是 <code>@at-root(without:rule)</code> 。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.parent1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    @at-root .child1 &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">200px</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//跳出media嵌套，父级有效</span><br><span class=\"line\">@media print &#123;</span><br><span class=\"line\">  .parent2 &#123;</span><br><span class=\"line\">    color: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">    @at-root (without:<span class=\"keyword\">media</span>) &#123;</span><br><span class=\"line\">      <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//跳出media和父级</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.parent3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">    @at-root (without:all) &#123;</span><br><span class=\"line\">      <span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>@at-root</code> 与 <code>&amp;</code> 配合使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  @at-root .parent &amp; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>应用于<code>@keyframe</code><br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: motion <span class=\"number\">3s</span> infinite;</span><br><span class=\"line\">  @at-root &#123;</span><br><span class=\"line\">    @keyframes motion &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    ...   </span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: motion <span class=\"number\">3s</span> infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes motion &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我认为 <code>@at-root</code> 应用于 <code>@keyframe</code> 或许是 <code>@at-root</code> 最好的实践。<br>跳出嵌套，我们为什么要用 <code>@at-root</code> 来实现呢？我们完全可以在写样式的时候，不使用嵌套的写法。<br>但是 <code>@keyframe</code> 就不一样了，这个动画应用于当前选择器，所以把动画样式写入这个选择器的结构里，方便修改与查看。<br>相比于之前在 css 中使用 @keyframe 来定义动画，然后在元素中调用，如果一个文件中 @keyframe 比较多的话，在我们想要调用动画的时候，动画与元素之间的关联性比较差。</p>\n<h2 id=\"混合-mixin\"><a href=\"#混合-mixin\" class=\"headerlink\" title=\"混合(mixin)\"></a>混合(mixin)</h2><p>sass 中使用 <code>@mixin</code> 声明混合，可以传递参数，参数名以 $ 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 @mixin 通过 @include 来调用。</p>\n<h3 id=\"无参数mixin\"><a href=\"#无参数mixin\" class=\"headerlink\" title=\"无参数mixin\"></a>无参数mixin</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> center-block &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: &#123;</span><br><span class=\"line\">    left: auto;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: auto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> center-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有参数mixin\"><a href=\"#有参数mixin\" class=\"headerlink\" title=\"有参数mixin\"></a>有参数mixin</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> opacity(<span class=\"variable\">$opacity</span>: 50) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"variable\">$opacity</span> / <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: alpha(opacity=<span class=\"variable\">$opacity</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.opacity</span>&#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> opacity; <span class=\"comment\">//参数使用默认值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.opacity-80</span>&#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> opacity(<span class=\"number\">80</span>); <span class=\"comment\">//传递参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个参数mixin\"><a href=\"#多个参数mixin\" class=\"headerlink\" title=\"多个参数mixin\"></a>多个参数mixin</h3><p>调用时可直接传入值，如 <code>@include</code> 传入参数的个数小于 <code>@mixin</code> 定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> horizontal-line(<span class=\"variable\">$border</span>:<span class=\"number\">1px</span> dashed <span class=\"number\">#ccc</span>,<span class=\"variable\">$padding</span>:<span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"variable\">$padding</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"variable\">$padding</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> horizontal-line(<span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h-product</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> horizontal-line(<span class=\"variable\">$padding</span>:<span class=\"number\">15px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgtext-h</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.imgtext-h--product</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> dashed <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多组值参数mixin\"><a href=\"#多组值参数mixin\" class=\"headerlink\" title=\"多组值参数mixin\"></a>多组值参数mixin</h3><p>如果一个参数可以有多组值，如 <code>box-shadow</code> 、<code>transition</code> 等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code> 。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//box-shadow可以有多组值，所以在变量参数后面添加...</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow(<span class=\"variable\">$shadow</span>...) &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> box-shadow (<span class=\"number\">0</span> 2px 2px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>),<span class=\"number\">0</span> 3px 3px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>),<span class=\"number\">0</span> 4px 4px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"content\"><a href=\"#content\" class=\"headerlink\" title=\"@content\"></a>@content</h2><p>@content 可以用来解决 css3 的 @media 等带来的问题。它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> max-screen(<span class=\"variable\">$res</span>) &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">media</span> only screen and (max-width:<span class=\"variable\">$res</span>) &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">include</span> max-screen(<span class=\"number\">480px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>PS：@mixin 通过 @include 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从 3.2.0 版本以后，建议传递参数的用 @mixin ，而非传递参数的使用下面的继承 % 。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>sass 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend ，后面紧跟需要继承的选择器。</p>\n<p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ff9aa9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.speaker</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> h1;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-class\">.speaker</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ff9aa9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.speaker</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，选择器继承生成的样式不是拷贝的形式，而是以联合声明的方式存在的。</p>\n<h3 id=\"继承的工作细节\"><a href=\"#继承的工作细节\" class=\"headerlink\" title=\"继承的工作细节\"></a>继承的工作细节</h3><p>关于 @extend 有两个要点你应该知道：</p>\n<p>1、跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>举个例子，使用混合器的时候：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-colors &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-colors;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-colors; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用继承的时候：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .demo1; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo1</span>, <span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。</p>\n<p>2、继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值， css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</p>\n<p>混合器本身不会引起 css 层叠的问题，因为混合器把样式直接放到了 css 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。</p>\n<h3 id=\"使用继承的最佳实践\"><a href=\"#使用继承的最佳实践\" class=\"headerlink\" title=\"使用继承的最佳实践\"></a>使用继承的最佳实践</h3><p>通常使用继承会让你的 css 美观、整洁。因为继承只会在生成 css 时复制选择器，而不会复制大段的 css 属性。但是如果你不小心，可能会让生成的 css 中包含大量的选择器复制。<br>避免这种情况出现的最好方法就是不要在 css 规则中使用后代选择器（比如 .foo .bar）去继承 css 规则。如果你这么做，同时被继承的 css 规则有通过后代选择器修饰的样式，生成 css 中的选择器的数量很快就会失控。<br>例如：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .baz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的css如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span>, <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span>, <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以如果允许，尽可能避免这种用法。<br><strong> 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 </strong></p>\n<h2 id=\"占位选择器\"><a href=\"#占位选择器\" class=\"headerlink\" title=\"占位选择器 %\"></a>占位选择器 %</h2><p>从 sass 3.2.0 以后就可以定义占位选择器 % 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend 去继承相应的样式，都会解析出来所有的样式。占位选择器以 % 标识定义，通过 @extend 调用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%ir &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$lte7</span>:true !default;</span><br><span class=\"line\">%clearfix &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$lte7</span> &#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;:before,&amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">0</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %ir;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.ir &#123;</span><br><span class=\"line\">  @extend %ir;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上代码，定义了两个占位选择器 <code>%ir</code> 和 <code>%clearfix</code> ，其中 <code>%clearfix</code> 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。<br>ps:在 @media 中暂时不能 @extend ， @media 外的代码片段，以后将会可以。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>sass 定义了很多函数可供使用，当然你也可以自己定义函数，以 @function 开始。sass 的官方函数链接为：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">sass function</a> ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 lighten 减淡和 darken 加深使用最多，其调用方法为 <code>lighten($color,$amout)</code> 和 <code>darken($color,$amount)</code> ，它们的第一个参数都是颜色值，第二个参数都是百分比。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">10px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$gray</span>: <span class=\"number\">#ccc</span> !default;</span><br><span class=\"line\"></span><br><span class=\"line\">@function pxToRem(<span class=\"variable\">$px</span>) &#123;</span><br><span class=\"line\">  @return <span class=\"variable\">$px</span> / <span class=\"variable\">$baseFontSize</span> * 1rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$baseFontSize</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: lighten(<span class=\"variable\">$gray</span>,<span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: pxToRem(<span class=\"number\">16px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: darken(<span class=\"variable\">$gray</span>,<span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于 @mixin ，% ，@function 更多说明可参阅：<br><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h2><p>sass 具有运算的特性，可以对数值型的 Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseFontSize</span>: <span class=\"number\">14px</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$baseGap</span>: <span class=\"variable\">$baseFontSize</span> * <span class=\"variable\">$baseLineHeight</span> !default;</span><br><span class=\"line\"><span class=\"selector-class\">.balber</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$baseGap</span>;    <span class=\"comment\">//21px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件判断及循环\"><a href=\"#条件判断及循环\" class=\"headerlink\" title=\"条件判断及循环\"></a>条件判断及循环</h2><h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"@if判断\"></a>@if判断</h3><p>@if 可一个条件单独使用，也可以和 @else 结合多条件使用。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$lte7</span>: true;</span><br><span class=\"line\"><span class=\"variable\">$type</span>: monster;</span><br><span class=\"line\"><span class=\"selector-class\">.ib</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">    @<span class=\"keyword\">if</span> <span class=\"variable\">$lte7</span> &#123;</span><br><span class=\"line\">        *<span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\">        *zoom:<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$type</span> == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> if <span class=\"variable\">$type</span> == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> if <span class=\"variable\">$type</span> == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的 css 如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ib</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  *<span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目判断\"><a href=\"#三目判断\" class=\"headerlink\" title=\"三目判断\"></a>三目判断</h3><p>语法为：<code>if($condition,$if_true,$if_false)</code>。<br>三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true,1px,2px) =&gt; 1px</span><br><span class=\"line\">if(false,1px,2px) =&gt; 2px</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>for 循环有两种形式，分别为：<br><code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code> 。<br>$i 表示变量，start 表示起始值，end 表示结束值，这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。<br>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 3 &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 5 to 7 &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-6</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h3><p>语法为：<code>@each $var in &lt;list or map&gt;</code> 。<br>其中 $var 表示变量，而 list 和 map 表示 list 类型数据和 map 类型数据。sass 3.3.0 新加入了多字段循环和 map 数据循环。</p>\n<h4 id=\"单个字段-list-数据循环\"><a href=\"#单个字段-list-数据循环\" class=\"headerlink\" title=\"单个字段 list 数据循环\"></a>单个字段 list 数据循环</h4><p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$animal-list</span>: puma, sea-slug, egret, salamander;</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$animal</span> in <span class=\"variable\">$animal-list</span> &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/puma.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/sea-slug.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/egret.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/salamander.png\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个字段-list-数据循环\"><a href=\"#多个字段-list-数据循环\" class=\"headerlink\" title=\"多个字段 list 数据循环\"></a>多个字段 list 数据循环</h4><p>使用<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$animal-data</span>: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$animal</span>, <span class=\"variable\">$color</span>, <span class=\"variable\">$cursor</span> in <span class=\"variable\">$animal-data</span> &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: <span class=\"variable\">$cursor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/puma.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: default; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/sea-slug.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/egret.png'</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid white;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: move; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个字段-map-数据循环\"><a href=\"#多个字段-map-数据循环\" class=\"headerlink\" title=\"多个字段 map 数据循环\"></a>多个字段 map 数据循环</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$headings</span>: (h1: <span class=\"number\">2em</span>, h2: <span class=\"number\">1.5em</span>, h3: <span class=\"number\">1.2em</span>);</span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> in <span class=\"variable\">$headings</span> &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$header</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了 sass 最基本部分,你可以轻松地使用 sass 编写清晰、无冗余、语义化的 css 。对于 sass 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。</p>\n<p><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"noopener\">sass文档</a><br><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">sass函数列表</a><br><a href=\"https://sass-guidelin.es/zh/\" target=\"_blank\" rel=\"noopener\">sass guidelines</a></p>"},{"title":"vue2.x 做一个外卖app","date":"2018-11-10T19:25:24.000Z","comments":0,"_content":"\n## 简介\n\n<p id=\"div-border-top-green\">本项目是基于 vue2.4 最新的实战项目，vue-cli2.8 + vue2.4 + vue-resource + vue-router2.7 + es6 + mock + webpack 的一个移动端外卖 app。</p>\n\n![](/images/vue-sell-1.png)\n\n<p id=\"div-border-left-red\">现在最流行的开发方式就是前后分离了；\n[vue](/tags/vue) 也是现在最流行的前端框架之一。</p>\n\n<!-- more -->\n\n## 截屏演示\n![](/images/vue-sell-3.gif)\n\n## 移动端演示\n扫二维码在手机上查看效果更好\n![](/images/vue-sell-2.png)\n\n## 构建\nvue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：\n- 代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便\n- Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码\n- ESlint，统一代码风格\n- bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法\n- Stylus，类似于 sass/scss ，但是可以不写 `{ }` 和 `: `，使用起来还是很方便的\n\n除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。\n\n## 为什么写这个项目\nvue 的官网文档写的很好，很多同学在学习完文档以后，很难实际上手做项目，只能做一些 todo-list 的小 demo ,距离上手做项目还有一些差距。\n这一套 vue 的实战视频可以说是非常适合新手入门进阶，让你可以动手用 vue 来做项目，解决 vue 在实战中的问题才是大家最想学习的，而不是小打小闹的 demo。\n![](/images/vue-sell-5.png)\n\n而且这套视频教程包含现在最新的前端必备技术点详细教学：webpack、eslint、vue-cli构建、模块打包、mock、vue-resource、axios、以及真实项目中会遇到的各种问题以及解决方案。\n\n## 获取教程\n这个项目我从头到尾写了一遍，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。\n现在扫码即可获取视频教程以及本人联系方式 微信/QQ，你可以问我你在学这个项目中遇到的任何问题，我都会帮你解答。\n![](/images/vue-sell-pay.png)\n","source":"_posts/vue-sell.md","raw":"---\ntitle: vue2.x 做一个外卖app\ndate: 2018-11-11 03:25:24\ncategories: 前端\ntags: [vue]\ncomments: false\n---\n\n## 简介\n\n<p id=\"div-border-top-green\">本项目是基于 vue2.4 最新的实战项目，vue-cli2.8 + vue2.4 + vue-resource + vue-router2.7 + es6 + mock + webpack 的一个移动端外卖 app。</p>\n\n![](/images/vue-sell-1.png)\n\n<p id=\"div-border-left-red\">现在最流行的开发方式就是前后分离了；\n[vue](/tags/vue) 也是现在最流行的前端框架之一。</p>\n\n<!-- more -->\n\n## 截屏演示\n![](/images/vue-sell-3.gif)\n\n## 移动端演示\n扫二维码在手机上查看效果更好\n![](/images/vue-sell-2.png)\n\n## 构建\nvue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：\n- 代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便\n- Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码\n- ESlint，统一代码风格\n- bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法\n- Stylus，类似于 sass/scss ，但是可以不写 `{ }` 和 `: `，使用起来还是很方便的\n\n除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。\n\n## 为什么写这个项目\nvue 的官网文档写的很好，很多同学在学习完文档以后，很难实际上手做项目，只能做一些 todo-list 的小 demo ,距离上手做项目还有一些差距。\n这一套 vue 的实战视频可以说是非常适合新手入门进阶，让你可以动手用 vue 来做项目，解决 vue 在实战中的问题才是大家最想学习的，而不是小打小闹的 demo。\n![](/images/vue-sell-5.png)\n\n而且这套视频教程包含现在最新的前端必备技术点详细教学：webpack、eslint、vue-cli构建、模块打包、mock、vue-resource、axios、以及真实项目中会遇到的各种问题以及解决方案。\n\n## 获取教程\n这个项目我从头到尾写了一遍，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。\n现在扫码即可获取视频教程以及本人联系方式 微信/QQ，你可以问我你在学这个项目中遇到的任何问题，我都会帮你解答。\n![](/images/vue-sell-pay.png)\n","slug":"vue-sell","published":1,"updated":"2019-08-15T07:19:10.477Z","_id":"cjzccpczt001sz4v54d5ndbcs","layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p id=\"div-border-top-green\">本项目是基于 vue2.4 最新的实战项目，vue-cli2.8 + vue2.4 + vue-resource + vue-router2.7 + es6 + mock + webpack 的一个移动端外卖 app。</p>\n\n<p><img src=\"/images/vue-sell-1.png\" alt=\"\"></p>\n<p id=\"div-border-left-red\">现在最流行的开发方式就是前后分离了；<br><a href=\"/tags/vue\">vue</a> 也是现在最流行的前端框架之一。</p>\n\n<a id=\"more\"></a>\n<h2 id=\"截屏演示\"><a href=\"#截屏演示\" class=\"headerlink\" title=\"截屏演示\"></a>截屏演示</h2><p><img src=\"/images/vue-sell-3.gif\" alt=\"\"></p>\n<h2 id=\"移动端演示\"><a href=\"#移动端演示\" class=\"headerlink\" title=\"移动端演示\"></a>移动端演示</h2><p>扫二维码在手机上查看效果更好<br><img src=\"/images/vue-sell-2.png\" alt=\"\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>vue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：</p>\n<ul>\n<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>\n<li>Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码</li>\n<li>ESlint，统一代码风格</li>\n<li>bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法</li>\n<li>Stylus，类似于 sass/scss ，但是可以不写 <code>{ }</code> 和 <code>:</code>，使用起来还是很方便的</li>\n</ul>\n<p>除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。</p>\n<h2 id=\"为什么写这个项目\"><a href=\"#为什么写这个项目\" class=\"headerlink\" title=\"为什么写这个项目\"></a>为什么写这个项目</h2><p>vue 的官网文档写的很好，很多同学在学习完文档以后，很难实际上手做项目，只能做一些 todo-list 的小 demo ,距离上手做项目还有一些差距。<br>这一套 vue 的实战视频可以说是非常适合新手入门进阶，让你可以动手用 vue 来做项目，解决 vue 在实战中的问题才是大家最想学习的，而不是小打小闹的 demo。<br><img src=\"/images/vue-sell-5.png\" alt=\"\"></p>\n<p>而且这套视频教程包含现在最新的前端必备技术点详细教学：webpack、eslint、vue-cli构建、模块打包、mock、vue-resource、axios、以及真实项目中会遇到的各种问题以及解决方案。</p>\n<h2 id=\"获取教程\"><a href=\"#获取教程\" class=\"headerlink\" title=\"获取教程\"></a>获取教程</h2><p>这个项目我从头到尾写了一遍，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。<br>现在扫码即可获取视频教程以及本人联系方式 微信/QQ，你可以问我你在学这个项目中遇到的任何问题，我都会帮你解答。<br><img src=\"/images/vue-sell-pay.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p id=\"div-border-top-green\">本项目是基于 vue2.4 最新的实战项目，vue-cli2.8 + vue2.4 + vue-resource + vue-router2.7 + es6 + mock + webpack 的一个移动端外卖 app。</p>\n\n<p><img src=\"/images/vue-sell-1.png\" alt=\"\"></p>\n<p id=\"div-border-left-red\">现在最流行的开发方式就是前后分离了；<br><a href=\"/tags/vue\">vue</a> 也是现在最流行的前端框架之一。</p>","more":"<h2 id=\"截屏演示\"><a href=\"#截屏演示\" class=\"headerlink\" title=\"截屏演示\"></a>截屏演示</h2><p><img src=\"/images/vue-sell-3.gif\" alt=\"\"></p>\n<h2 id=\"移动端演示\"><a href=\"#移动端演示\" class=\"headerlink\" title=\"移动端演示\"></a>移动端演示</h2><p>扫二维码在手机上查看效果更好<br><img src=\"/images/vue-sell-2.png\" alt=\"\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>vue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：</p>\n<ul>\n<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>\n<li>Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码</li>\n<li>ESlint，统一代码风格</li>\n<li>bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法</li>\n<li>Stylus，类似于 sass/scss ，但是可以不写 <code>{ }</code> 和 <code>:</code>，使用起来还是很方便的</li>\n</ul>\n<p>除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。</p>\n<h2 id=\"为什么写这个项目\"><a href=\"#为什么写这个项目\" class=\"headerlink\" title=\"为什么写这个项目\"></a>为什么写这个项目</h2><p>vue 的官网文档写的很好，很多同学在学习完文档以后，很难实际上手做项目，只能做一些 todo-list 的小 demo ,距离上手做项目还有一些差距。<br>这一套 vue 的实战视频可以说是非常适合新手入门进阶，让你可以动手用 vue 来做项目，解决 vue 在实战中的问题才是大家最想学习的，而不是小打小闹的 demo。<br><img src=\"/images/vue-sell-5.png\" alt=\"\"></p>\n<p>而且这套视频教程包含现在最新的前端必备技术点详细教学：webpack、eslint、vue-cli构建、模块打包、mock、vue-resource、axios、以及真实项目中会遇到的各种问题以及解决方案。</p>\n<h2 id=\"获取教程\"><a href=\"#获取教程\" class=\"headerlink\" title=\"获取教程\"></a>获取教程</h2><p>这个项目我从头到尾写了一遍，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。<br>现在扫码即可获取视频教程以及本人联系方式 微信/QQ，你可以问我你在学这个项目中遇到的任何问题，我都会帮你解答。<br><img src=\"/images/vue-sell-pay.png\" alt=\"\"></p>"},{"title":"使用 Service worker 实现加速/离线访问博客","date":"2018-06-08T03:25:24.000Z","comments":0,"summary_img":null,"_content":"有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着**离线页面**的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。\n\n# Service worker\n\n于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。\n\n<!-- more -->\n\nService worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。\n**带来的效果是显而易见的：**\n<p id=\"div-border-top-green\">1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。\n2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。\n</p>\n\n# Service worker 使用场景\n\n现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。\n\n# 示例\n\n你现在可以断开你的网络，或者用浏览器中模拟无网络的情景，继续访问本站。\n<i style=\"color:red;\">如何在浏览器中模拟无网络环境？(在 Network 中选择 offline)</i>\n![](/images/service-worker-1.png)\n\n# 使用方法\n\n## 注册 Service worker\n要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里\n``` javascript\n<script>\n  if (navigator.serviceWorker) {\n    // 注册Service Worker scope表示作用的页面的path\n    // register函数返回Promise\n    navigator.serviceWorker.register('/service-worker.js',{scope: '/'}) \n      .then(function (registration) {\n        console.log(registration);\n      })\n      .catch(function (e) {\n        console.error(e);\n      })\n  } else {\n    console.log('Service Worker is not supported in this browser.')\n  }\n</script>\n```\n以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。\n`{scope: '/'}` 表示 Service worker 作用的范围。\n需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。\n如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。\n如果 service worker 文件注册到根目录下 /service-worker.js ，同时 `{scope: '/example'}` ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。\n\nservice-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。\n\n## 安装 Service worker\n\n![](/images/service-worker-2.png)\n\n[我的 service-worker.js](https://nigelyao.github.io/service-worker.js)\n关于这个 service-worker.js 怎么写，具体可以查看 API ，[MDN Service Worker API](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API)。\n\n<p id=\"div-border-left-red\">注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p>\n\n现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。\n或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。\n或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。\n![](/images/service-worker-3.png)\n\n# Service worker 核心 API\n![](/images/service-worker-4.png)\n## install\n![](/images/service-worker-5.png)\ninstall 是安装一个 service worker 缓存，使用方法可以是这样：\n``` javascript\n// Set the callback for the install step\nself.addEventListener('install', function(event) {\n  // Perform install steps\n});\n```\n在 install 的 callback 中，我们需要执行一下步骤：\n1、开启一个缓存\n2、缓存我们的文件\n3、确定所有的资源是否要被缓存\n\n## fetch\nfetch 用来监听用户的网络请求，并给出回应。\n``` javascript\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n```\n\n## activate\n你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：\n1、更新你 service worker 的 JavaScript 文件。\n2、更新后的 service worker 启动并触发 install 事件。\n3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。\n4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。\n5、一旦新的 service worker 生效后会触发 active 事件。\n\n一个典型的 activete 事件：\n``` javascript\nself.addEventListener('activate', function (event) { \n// 监听worker的activate事件\n  event.waitUntil( // 延迟activate事件直到\n    caches.keys().then(function(keys){\n      return Promise.all(keys.map(function(key, i){ // 清除旧版本缓存\n        if(key !== CACHE_VERSION){\n          return caches.delete(keys[i]);\n        }\n      }))\n    })\n  )\n});\n```\n\n# 其他使用场景\n在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。\n从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。\n``` html \n<iframe src=\"https://B.com/iframe.html\" style=\"width: 0; height: 0; border: 0\">\n</iframe>\n```\n``` javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>HTML5 For Web Designers</title>\n<script>\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/serviceworker.js');\n}\n</script>\n</head>\n</html> \n```\n","source":"_posts/service-worker.md","raw":"---\ntitle: 使用 Service worker 实现加速/离线访问博客\ndate: 2018-06-08 11:25:24\ncategories: 前端\ntags: [Service-worker]\ncomments: false\nsummary_img:\n---\n有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着**离线页面**的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。\n\n# Service worker\n\n于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。\n\n<!-- more -->\n\nService worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。\n**带来的效果是显而易见的：**\n<p id=\"div-border-top-green\">1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。\n2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。\n</p>\n\n# Service worker 使用场景\n\n现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。\n\n# 示例\n\n你现在可以断开你的网络，或者用浏览器中模拟无网络的情景，继续访问本站。\n<i style=\"color:red;\">如何在浏览器中模拟无网络环境？(在 Network 中选择 offline)</i>\n![](/images/service-worker-1.png)\n\n# 使用方法\n\n## 注册 Service worker\n要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里\n``` javascript\n<script>\n  if (navigator.serviceWorker) {\n    // 注册Service Worker scope表示作用的页面的path\n    // register函数返回Promise\n    navigator.serviceWorker.register('/service-worker.js',{scope: '/'}) \n      .then(function (registration) {\n        console.log(registration);\n      })\n      .catch(function (e) {\n        console.error(e);\n      })\n  } else {\n    console.log('Service Worker is not supported in this browser.')\n  }\n</script>\n```\n以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。\n`{scope: '/'}` 表示 Service worker 作用的范围。\n需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。\n如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。\n如果 service worker 文件注册到根目录下 /service-worker.js ，同时 `{scope: '/example'}` ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。\n\nservice-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。\n\n## 安装 Service worker\n\n![](/images/service-worker-2.png)\n\n[我的 service-worker.js](https://nigelyao.github.io/service-worker.js)\n关于这个 service-worker.js 怎么写，具体可以查看 API ，[MDN Service Worker API](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API)。\n\n<p id=\"div-border-left-red\">注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p>\n\n现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。\n或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。\n或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。\n![](/images/service-worker-3.png)\n\n# Service worker 核心 API\n![](/images/service-worker-4.png)\n## install\n![](/images/service-worker-5.png)\ninstall 是安装一个 service worker 缓存，使用方法可以是这样：\n``` javascript\n// Set the callback for the install step\nself.addEventListener('install', function(event) {\n  // Perform install steps\n});\n```\n在 install 的 callback 中，我们需要执行一下步骤：\n1、开启一个缓存\n2、缓存我们的文件\n3、确定所有的资源是否要被缓存\n\n## fetch\nfetch 用来监听用户的网络请求，并给出回应。\n``` javascript\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n```\n\n## activate\n你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：\n1、更新你 service worker 的 JavaScript 文件。\n2、更新后的 service worker 启动并触发 install 事件。\n3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。\n4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。\n5、一旦新的 service worker 生效后会触发 active 事件。\n\n一个典型的 activete 事件：\n``` javascript\nself.addEventListener('activate', function (event) { \n// 监听worker的activate事件\n  event.waitUntil( // 延迟activate事件直到\n    caches.keys().then(function(keys){\n      return Promise.all(keys.map(function(key, i){ // 清除旧版本缓存\n        if(key !== CACHE_VERSION){\n          return caches.delete(keys[i]);\n        }\n      }))\n    })\n  )\n});\n```\n\n# 其他使用场景\n在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。\n从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。\n``` html \n<iframe src=\"https://B.com/iframe.html\" style=\"width: 0; height: 0; border: 0\">\n</iframe>\n```\n``` javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>HTML5 For Web Designers</title>\n<script>\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/serviceworker.js');\n}\n</script>\n</head>\n</html> \n```\n","slug":"service-worker","published":1,"updated":"2019-08-15T07:19:11.372Z","_id":"cjzccpczx001vz4v5t4ve1k5h","layout":"post","photos":[],"link":"","content":"<p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<strong>离线页面</strong>的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p>\n<h1 id=\"Service-worker\"><a href=\"#Service-worker\" class=\"headerlink\" title=\"Service worker\"></a>Service worker</h1><p>于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。</p>\n<a id=\"more\"></a>\n<p>Service worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。<br><strong>带来的效果是显而易见的：</strong></p>\n<p id=\"div-border-top-green\">1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。<br>2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。<br></p>\n\n<h1 id=\"Service-worker-使用场景\"><a href=\"#Service-worker-使用场景\" class=\"headerlink\" title=\"Service worker 使用场景\"></a>Service worker 使用场景</h1><p>现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>你现在可以断开你的网络，或者用浏览器中模拟无网络的情景，继续访问本站。<br><i style=\"color:red;\">如何在浏览器中模拟无网络环境？(在 Network 中选择 offline)</i><br><img src=\"/images/service-worker-1.png\" alt=\"\"></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"注册-Service-worker\"><a href=\"#注册-Service-worker\" class=\"headerlink\" title=\"注册 Service worker\"></a>注册 Service worker</h2><p>要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.serviceWorker) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册Service Worker scope表示作用的页面的path</span></span><br><span class=\"line\">    <span class=\"comment\">// register函数返回Promise</span></span><br><span class=\"line\">    navigator.serviceWorker.register(<span class=\"string\">'/service-worker.js'</span>,&#123;<span class=\"attr\">scope</span>: <span class=\"string\">'/'</span>&#125;) </span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(registration);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker is not supported in this browser.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。<br><code>{scope: &#39;/&#39;}</code> 表示 Service worker 作用的范围。<br>需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。<br>如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。<br>如果 service worker 文件注册到根目录下 /service-worker.js ，同时 <code>{scope: &#39;/example&#39;}</code> ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。</p>\n<p>service-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。</p>\n<h2 id=\"安装-Service-worker\"><a href=\"#安装-Service-worker\" class=\"headerlink\" title=\"安装 Service worker\"></a>安装 Service worker</h2><p><img src=\"/images/service-worker-2.png\" alt=\"\"></p>\n<p><a href=\"https://nigelyao.github.io/service-worker.js\">我的 service-worker.js</a><br>关于这个 service-worker.js 怎么写，具体可以查看 API ，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"noopener\">MDN Service Worker API</a>。</p>\n<p id=\"div-border-left-red\">注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p>\n\n<p>现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。<br>或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。<br>或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。<br><img src=\"/images/service-worker-3.png\" alt=\"\"></p>\n<h1 id=\"Service-worker-核心-API\"><a href=\"#Service-worker-核心-API\" class=\"headerlink\" title=\"Service worker 核心 API\"></a>Service worker 核心 API</h1><p><img src=\"/images/service-worker-4.png\" alt=\"\"></p>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><p><img src=\"/images/service-worker-5.png\" alt=\"\"><br>install 是安装一个 service worker 缓存，使用方法可以是这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set the callback for the install step</span></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Perform install steps</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在 install 的 callback 中，我们需要执行一下步骤：<br>1、开启一个缓存<br>2、缓存我们的文件<br>3、确定所有的资源是否要被缓存</p>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>fetch 用来监听用户的网络请求，并给出回应。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Cache hit - return response</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fetch(event.request);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"activate\"><a href=\"#activate\" class=\"headerlink\" title=\"activate\"></a>activate</h2><p>你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：<br>1、更新你 service worker 的 JavaScript 文件。<br>2、更新后的 service worker 启动并触发 install 事件。<br>3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。<br>4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。<br>5、一旦新的 service worker 生效后会触发 active 事件。</p>\n<p>一个典型的 activete 事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// 监听worker的activate事件</span></span><br><span class=\"line\">  event.waitUntil( <span class=\"comment\">// 延迟activate事件直到</span></span><br><span class=\"line\">    caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keys</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(keys.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, i</span>)</span>&#123; <span class=\"comment\">// 清除旧版本缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key !== CACHE_VERSION)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caches.delete(keys[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"其他使用场景\"><a href=\"#其他使用场景\" class=\"headerlink\" title=\"其他使用场景\"></a>其他使用场景</h1><p>在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。<br>从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://B.com/iframe.html\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 0; height: 0; border: 0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;HTML5 For Web Designers&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">if ('serviceWorker' in navigator) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  navigator.serviceWorker.register('/</span>serviceworker.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<strong>离线页面</strong>的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p>\n<h1 id=\"Service-worker\"><a href=\"#Service-worker\" class=\"headerlink\" title=\"Service worker\"></a>Service worker</h1><p>于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。</p>","more":"<p>Service worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。<br><strong>带来的效果是显而易见的：</strong></p>\n<p id=\"div-border-top-green\">1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。<br>2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。<br></p>\n\n<h1 id=\"Service-worker-使用场景\"><a href=\"#Service-worker-使用场景\" class=\"headerlink\" title=\"Service worker 使用场景\"></a>Service worker 使用场景</h1><p>现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>你现在可以断开你的网络，或者用浏览器中模拟无网络的情景，继续访问本站。<br><i style=\"color:red;\">如何在浏览器中模拟无网络环境？(在 Network 中选择 offline)</i><br><img src=\"/images/service-worker-1.png\" alt=\"\"></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"注册-Service-worker\"><a href=\"#注册-Service-worker\" class=\"headerlink\" title=\"注册 Service worker\"></a>注册 Service worker</h2><p>要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (navigator.serviceWorker) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册Service Worker scope表示作用的页面的path</span></span><br><span class=\"line\">    <span class=\"comment\">// register函数返回Promise</span></span><br><span class=\"line\">    navigator.serviceWorker.register(<span class=\"string\">'/service-worker.js'</span>,&#123;<span class=\"attr\">scope</span>: <span class=\"string\">'/'</span>&#125;) </span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(registration);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service Worker is not supported in this browser.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。<br><code>{scope: &#39;/&#39;}</code> 表示 Service worker 作用的范围。<br>需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。<br>如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。<br>如果 service worker 文件注册到根目录下 /service-worker.js ，同时 <code>{scope: &#39;/example&#39;}</code> ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。</p>\n<p>service-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。</p>\n<h2 id=\"安装-Service-worker\"><a href=\"#安装-Service-worker\" class=\"headerlink\" title=\"安装 Service worker\"></a>安装 Service worker</h2><p><img src=\"/images/service-worker-2.png\" alt=\"\"></p>\n<p><a href=\"https://nigelyao.github.io/service-worker.js\">我的 service-worker.js</a><br>关于这个 service-worker.js 怎么写，具体可以查看 API ，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"noopener\">MDN Service Worker API</a>。</p>\n<p id=\"div-border-left-red\">注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p>\n\n<p>现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。<br>或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。<br>或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。<br><img src=\"/images/service-worker-3.png\" alt=\"\"></p>\n<h1 id=\"Service-worker-核心-API\"><a href=\"#Service-worker-核心-API\" class=\"headerlink\" title=\"Service worker 核心 API\"></a>Service worker 核心 API</h1><p><img src=\"/images/service-worker-4.png\" alt=\"\"></p>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><p><img src=\"/images/service-worker-5.png\" alt=\"\"><br>install 是安装一个 service worker 缓存，使用方法可以是这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set the callback for the install step</span></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Perform install steps</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在 install 的 callback 中，我们需要执行一下步骤：<br>1、开启一个缓存<br>2、缓存我们的文件<br>3、确定所有的资源是否要被缓存</p>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>fetch 用来监听用户的网络请求，并给出回应。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Cache hit - return response</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fetch(event.request);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"activate\"><a href=\"#activate\" class=\"headerlink\" title=\"activate\"></a>activate</h2><p>你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：<br>1、更新你 service worker 的 JavaScript 文件。<br>2、更新后的 service worker 启动并触发 install 事件。<br>3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。<br>4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。<br>5、一旦新的 service worker 生效后会触发 active 事件。</p>\n<p>一个典型的 activete 事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// 监听worker的activate事件</span></span><br><span class=\"line\">  event.waitUntil( <span class=\"comment\">// 延迟activate事件直到</span></span><br><span class=\"line\">    caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keys</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(keys.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, i</span>)</span>&#123; <span class=\"comment\">// 清除旧版本缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key !== CACHE_VERSION)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caches.delete(keys[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"其他使用场景\"><a href=\"#其他使用场景\" class=\"headerlink\" title=\"其他使用场景\"></a>其他使用场景</h1><p>在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。<br>从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://B.com/iframe.html\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 0; height: 0; border: 0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;HTML5 For Web Designers&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">if ('serviceWorker' in navigator) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  navigator.serviceWorker.register('/</span>serviceworker.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"jQuery使用技巧","date":"2017-11-22T03:54:55.000Z","comments":0,"_content":"### 禁用页面的右键菜单\n``` javascript\n$(document).ready(function(){  \n  $(document).bind(\"contextmenu\",function(e){  \n    return false;  \n  });  \n});\n```\n\n### 新窗口打开页面\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <a href=\"https://www.google.com\">google_新窗口</a>\n  <a href=\"https://www.google.com\" rel=\"external\">google_新窗口</a>\n  <a href=\"demo1.html\">当前窗口</a>\n<script>\n  $(function(){\n    $('a[href^=\"http://\"]').attr(\"target\",\"_blank\");\n  });\n</script>\n</body>\n</html>\n```\n\n### <font color='#099'>输入框文字获取和失去焦点【推荐】</font>\n\n<!-- more -->\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <input type=\"text\" class=\"text1\" />\n<script>\n$(document).ready(function() {  \n  $(\"input.text1\").val(\"Enter your search text here.\");  \n  textFill( $('input.text1') );  \n});\nfunction textFill(input){ //input focus text function  \n  var originalvalue = input.val();  \n  input.focus( function(){  \n    if( $.trim(input.val()) == originalvalue ){\n      input.val(''); \n    }  \n  }).blur( function(){  \n    if( $.trim(input.val()) == '' ){ \n      input.val(originalvalue); \n    }  \n  });  \n}\n</script>\n</body>\n</html>\n```\n\n### 返回头部滑动动画\n``` html\n<script>\njQuery.fn.scrollTo = function(speed) {\n  var targetOffset = $(this).offset().top;\n  $('html,body').stop().animate({scrollTop: targetOffset}, speed);\n  return this;\n}; \n// use\n$(\"#goheader\").click(function(){\n  $(\"body\").scrollTo(500);\n  return false;\n}); \n</script>\n```\n\n### 获取鼠标位置\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"XY\" ></div>\n<script>\n$(function(){\n  $(document).mousemove(function(e){  \n    $('#XY').html(\"X : \" + e.pageX + \" | Y : \" + e.pageY);  \n  });\n});\n</script>\n</body>\n</html>\n```\n\n### 关闭所有 jQuery 动画效果\n``` javascript\njQuery.fx.off = true;\n```\n\n### 检测鼠标的右键和左键\n``` javascript\n$('#box').mousedown(function(e) {\n  alert(e.which);\n});\n\n```\n\n### 回车提交表单\n``` javascript\n$(function() {\n  $('input').keyup(function(e) {\n    if(e.which == '13') {\n      alert('回车提交');\n    }\n  });\n});\n```\n\n### 切换复选框\n``` javascript\nvar tog = false;\n$('button').click(function() {\n  $(\"input[type=checkbox]\").attr(\"checked\",!tog);\n  tog = !tog;\n});\n```\n\n### 使用 siblings() 来选择同辈元素\n``` javascript\n//不这样做\n$('#nav li').click(function(){\n  $('#nav li').removeClass('active');\n  $(this).addClass('active');\n});\n//替代做法是\n$('#nav li').click(function() {\n  $(this).addClass('active').siblings().removeClass('active');\n});\n```\n\n### 为任何与选择器相匹配的元素绑定事件\n``` javascript\n$(\"table\").on(\"click\",\"td\",function(){ \n  $(this).toggleClass(\"hover\"); \n});\n```\n\n### $.proxy 的使用\n使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click(function(){\n      $(this).fadeOut();\n    });\n  });\n  </script>\n</body>\n</html>\n```\n你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 `$.proxy` 方法解决这个问题，代码如下：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click($.proxy(function(){\n      $(this).fadeOut();\n    },this));\n  });\n  </script>\n</body>\n</html>\n```\n这样才正确执行。\n\n### 限制 Text-Area 域中的字符的个数\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <textarea id=\"mytextarea\"></textarea>\n  <script>\n    jQuery.fn.maxLength = function(max){\n      this.each(function(){\n        var type = this.tagName.toLowerCase();\n          var inputType = this.type? this.type.toLowerCase() : null;\n            if(type == \"input\" && inputType == \"text\" || inputType == \"password\"){\n              //应用标准的maxLength\n              this.maxLength = max;\n            }else if(type == \"textarea\"){\n              this.onkeypress = function(e){\n                var ob = e || event;\n                var keyCode = ob.keyCode;\n                var hasSelection = document.selection? document.selection.createRange().text.length > 0 : this.selectionStart != this.selectionEnd;\n                return !(this.value.length >= max && (keyCode > 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) && !ob.ctrlKey && !ob.altKey && !hasSelection);\n              };\n              this.onkeyup = function(){\n                if(this.value.length > max){\n                  this.value = this.value.substring(0,max);\n                }\n              };\n            }\n      });\n    };\n    //use\n    $('#mytextarea').maxLength(10);\n  </script>    \n</body>\n</html>\n```\n\n### 解析 json 数据时报 parseError 错误\njQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：\n``` json\n// 1.4之前版本，key没引号，这样没问题\n{\n  key:\"coco\",\n  status:\"0\"\n}\n```\n但升级成jQuery1.4后，都必须加上双引号，格式如下：\n``` json\n{\n  \"key\":\"coco\",\n  \"status\":\"0\"\n}\n```\n\n### 从元素中除去 HTML\n``` html\n<script>\n(function($) { \n$.fn.stripHtml = function() { \n　var regexp = /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/gi; \n　this.each(function() { \n  　$(this).html( $(this).html().replace(regexp,'') ); \n　});\n　return $(this); \n} \n})(jQuery); \n//用法： \n$('div').stripHtml(); \n</script>\n```\n\n### 扩展 String 对象的方法\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div>\n    <input type=\"text\" /><button >check</button>\n  </div>\n  <script>\n  $.extend(String.prototype, {\n  isPositiveInteger:function(){\n    return (new RegExp(/^[1-9]\\d*$/).test(this));\n  },\n  isInteger:function(){\n    return (new RegExp(/^\\d+$/).test(this));\n  },\n  isNumber: function(value, element) {\n    return (new RegExp(/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/).test(this));\n  },\n  trim:function(){\n    return this.replace(/(^\\s*)|(\\s*$)|\\r|\\n/g, \"\");\n  },\n  trans:function() {\n    return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '\"');\n  },\n  replaceAll:function(os, ns) {\n    return this.replace(new RegExp(os,\"gm\"),ns);\n  },\n  skipChar:function(ch) {\n    if (!this || this.length===0) {return '';}\n    if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}\n    return this;\n  },\n  isValidPwd:function() {\n    return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); \n  },\n  isValidMail:function(){\n    return(new RegExp(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/).test(this.trim()));\n  },\n  isSpaces:function() {\n    for(var i=0; i<this.length; i+=1) {\n    var ch = this.charAt(i);\n    if (ch!=' '&& ch!=\"\\n\" && ch!=\"\\t\" && ch!=\"\\r\") {return false;}\n    }\n    return true;\n  },\n  isPhone:function() {\n    return (new RegExp(/(^([0-9]{3,4}[-])?\\d{3,8}(-\\d{1,6})?$)|(^\\([0-9]{3,4}\\)\\d{3,8}(\\(\\d{1,6}\\))?$)|(^\\d{3,8}$)/).test(this));\n  },\n  isUrl:function(){\n    return (new RegExp(/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&=:]*)$/).test(this));\n  },\n  isExternalUrl:function(){\n    return this.isUrl() && this.indexOf(\"://\"+document.domain) == -1;\n  }\n  });\n\n  $(\"button\").click(function(){\n    alert(   $(\"input\").val().isInteger()  );\n  });\n  </script>\n</body>\n</html>\n```\n\n","source":"_posts/use-jquery-skill.md","raw":"---\ntitle: jQuery使用技巧\ndate: 2017-11-22 11:54:55\ncategories: 前端\ntags: [JavaScript, jQuery]\ncomments: false\n---\n### 禁用页面的右键菜单\n``` javascript\n$(document).ready(function(){  \n  $(document).bind(\"contextmenu\",function(e){  \n    return false;  \n  });  \n});\n```\n\n### 新窗口打开页面\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <a href=\"https://www.google.com\">google_新窗口</a>\n  <a href=\"https://www.google.com\" rel=\"external\">google_新窗口</a>\n  <a href=\"demo1.html\">当前窗口</a>\n<script>\n  $(function(){\n    $('a[href^=\"http://\"]').attr(\"target\",\"_blank\");\n  });\n</script>\n</body>\n</html>\n```\n\n### <font color='#099'>输入框文字获取和失去焦点【推荐】</font>\n\n<!-- more -->\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <input type=\"text\" class=\"text1\" />\n<script>\n$(document).ready(function() {  \n  $(\"input.text1\").val(\"Enter your search text here.\");  \n  textFill( $('input.text1') );  \n});\nfunction textFill(input){ //input focus text function  \n  var originalvalue = input.val();  \n  input.focus( function(){  \n    if( $.trim(input.val()) == originalvalue ){\n      input.val(''); \n    }  \n  }).blur( function(){  \n    if( $.trim(input.val()) == '' ){ \n      input.val(originalvalue); \n    }  \n  });  \n}\n</script>\n</body>\n</html>\n```\n\n### 返回头部滑动动画\n``` html\n<script>\njQuery.fn.scrollTo = function(speed) {\n  var targetOffset = $(this).offset().top;\n  $('html,body').stop().animate({scrollTop: targetOffset}, speed);\n  return this;\n}; \n// use\n$(\"#goheader\").click(function(){\n  $(\"body\").scrollTo(500);\n  return false;\n}); \n</script>\n```\n\n### 获取鼠标位置\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"XY\" ></div>\n<script>\n$(function(){\n  $(document).mousemove(function(e){  \n    $('#XY').html(\"X : \" + e.pageX + \" | Y : \" + e.pageY);  \n  });\n});\n</script>\n</body>\n</html>\n```\n\n### 关闭所有 jQuery 动画效果\n``` javascript\njQuery.fx.off = true;\n```\n\n### 检测鼠标的右键和左键\n``` javascript\n$('#box').mousedown(function(e) {\n  alert(e.which);\n});\n\n```\n\n### 回车提交表单\n``` javascript\n$(function() {\n  $('input').keyup(function(e) {\n    if(e.which == '13') {\n      alert('回车提交');\n    }\n  });\n});\n```\n\n### 切换复选框\n``` javascript\nvar tog = false;\n$('button').click(function() {\n  $(\"input[type=checkbox]\").attr(\"checked\",!tog);\n  tog = !tog;\n});\n```\n\n### 使用 siblings() 来选择同辈元素\n``` javascript\n//不这样做\n$('#nav li').click(function(){\n  $('#nav li').removeClass('active');\n  $(this).addClass('active');\n});\n//替代做法是\n$('#nav li').click(function() {\n  $(this).addClass('active').siblings().removeClass('active');\n});\n```\n\n### 为任何与选择器相匹配的元素绑定事件\n``` javascript\n$(\"table\").on(\"click\",\"td\",function(){ \n  $(this).toggleClass(\"hover\"); \n});\n```\n\n### $.proxy 的使用\n使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click(function(){\n      $(this).fadeOut();\n    });\n  });\n  </script>\n</body>\n</html>\n```\n你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 `$.proxy` 方法解决这个问题，代码如下：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click($.proxy(function(){\n      $(this).fadeOut();\n    },this));\n  });\n  </script>\n</body>\n</html>\n```\n这样才正确执行。\n\n### 限制 Text-Area 域中的字符的个数\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <textarea id=\"mytextarea\"></textarea>\n  <script>\n    jQuery.fn.maxLength = function(max){\n      this.each(function(){\n        var type = this.tagName.toLowerCase();\n          var inputType = this.type? this.type.toLowerCase() : null;\n            if(type == \"input\" && inputType == \"text\" || inputType == \"password\"){\n              //应用标准的maxLength\n              this.maxLength = max;\n            }else if(type == \"textarea\"){\n              this.onkeypress = function(e){\n                var ob = e || event;\n                var keyCode = ob.keyCode;\n                var hasSelection = document.selection? document.selection.createRange().text.length > 0 : this.selectionStart != this.selectionEnd;\n                return !(this.value.length >= max && (keyCode > 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) && !ob.ctrlKey && !ob.altKey && !hasSelection);\n              };\n              this.onkeyup = function(){\n                if(this.value.length > max){\n                  this.value = this.value.substring(0,max);\n                }\n              };\n            }\n      });\n    };\n    //use\n    $('#mytextarea').maxLength(10);\n  </script>    \n</body>\n</html>\n```\n\n### 解析 json 数据时报 parseError 错误\njQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：\n``` json\n// 1.4之前版本，key没引号，这样没问题\n{\n  key:\"coco\",\n  status:\"0\"\n}\n```\n但升级成jQuery1.4后，都必须加上双引号，格式如下：\n``` json\n{\n  \"key\":\"coco\",\n  \"status\":\"0\"\n}\n```\n\n### 从元素中除去 HTML\n``` html\n<script>\n(function($) { \n$.fn.stripHtml = function() { \n　var regexp = /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/gi; \n　this.each(function() { \n  　$(this).html( $(this).html().replace(regexp,'') ); \n　});\n　return $(this); \n} \n})(jQuery); \n//用法： \n$('div').stripHtml(); \n</script>\n```\n\n### 扩展 String 对象的方法\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div>\n    <input type=\"text\" /><button >check</button>\n  </div>\n  <script>\n  $.extend(String.prototype, {\n  isPositiveInteger:function(){\n    return (new RegExp(/^[1-9]\\d*$/).test(this));\n  },\n  isInteger:function(){\n    return (new RegExp(/^\\d+$/).test(this));\n  },\n  isNumber: function(value, element) {\n    return (new RegExp(/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/).test(this));\n  },\n  trim:function(){\n    return this.replace(/(^\\s*)|(\\s*$)|\\r|\\n/g, \"\");\n  },\n  trans:function() {\n    return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '\"');\n  },\n  replaceAll:function(os, ns) {\n    return this.replace(new RegExp(os,\"gm\"),ns);\n  },\n  skipChar:function(ch) {\n    if (!this || this.length===0) {return '';}\n    if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}\n    return this;\n  },\n  isValidPwd:function() {\n    return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); \n  },\n  isValidMail:function(){\n    return(new RegExp(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/).test(this.trim()));\n  },\n  isSpaces:function() {\n    for(var i=0; i<this.length; i+=1) {\n    var ch = this.charAt(i);\n    if (ch!=' '&& ch!=\"\\n\" && ch!=\"\\t\" && ch!=\"\\r\") {return false;}\n    }\n    return true;\n  },\n  isPhone:function() {\n    return (new RegExp(/(^([0-9]{3,4}[-])?\\d{3,8}(-\\d{1,6})?$)|(^\\([0-9]{3,4}\\)\\d{3,8}(\\(\\d{1,6}\\))?$)|(^\\d{3,8}$)/).test(this));\n  },\n  isUrl:function(){\n    return (new RegExp(/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&=:]*)$/).test(this));\n  },\n  isExternalUrl:function(){\n    return this.isUrl() && this.indexOf(\"://\"+document.domain) == -1;\n  }\n  });\n\n  $(\"button\").click(function(){\n    alert(   $(\"input\").val().isInteger()  );\n  });\n  </script>\n</body>\n</html>\n```\n\n","slug":"use-jquery-skill","published":1,"updated":"2019-08-15T07:18:44.131Z","_id":"cjzccpd00001zz4v5pxwil1ew","layout":"post","photos":[],"link":"","content":"<h3 id=\"禁用页面的右键菜单\"><a href=\"#禁用页面的右键菜单\" class=\"headerlink\" title=\"禁用页面的右键菜单\"></a>禁用页面的右键菜单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">  &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"新窗口打开页面\"><a href=\"#新窗口打开页面\" class=\"headerlink\" title=\"新窗口打开页面\"></a>新窗口打开页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"external\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"demo1.html\"</span>&gt;</span>当前窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>,<span class=\"string\">\"_blank\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输入框文字获取和失去焦点【推荐】\"><a href=\"#输入框文字获取和失去焦点【推荐】\" class=\"headerlink\" title=\"输入框文字获取和失去焦点【推荐】\"></a><font color=\"#099\">输入框文字获取和失去焦点【推荐】</font></h3><a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here.\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">  textFill( $(<span class=\"string\">'input.text1'</span>) );  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function  </span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> originalvalue = input.val();  </span></span><br><span class=\"line\"><span class=\"javascript\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      input.val(<span class=\"string\">''</span>); </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;).blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )&#123; </span></span><br><span class=\"line\"><span class=\"undefined\">      input.val(originalvalue); </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"返回头部滑动动画\"><a href=\"#返回头部滑动动画\" class=\"headerlink\" title=\"返回头部滑动动画\"></a>返回头部滑动动画</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">jQuery.fn.scrollTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">speed</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> targetOffset = $(<span class=\"keyword\">this</span>).offset().top;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'html,body'</span>).stop().animate(&#123;<span class=\"attr\">scrollTop</span>: targetOffset&#125;, speed);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;; </span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// use</span></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">\"#goheader\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"body\"</span>).scrollTo(<span class=\"number\">500</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取鼠标位置\"><a href=\"#获取鼠标位置\" class=\"headerlink\" title=\"获取鼠标位置\"></a>获取鼠标位置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"XY\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#XY'</span>).html(<span class=\"string\">\"X : \"</span> + e.pageX + <span class=\"string\">\" | Y : \"</span> + e.pageY);  </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭所有-jQuery-动画效果\"><a href=\"#关闭所有-jQuery-动画效果\" class=\"headerlink\" title=\"关闭所有 jQuery 动画效果\"></a>关闭所有 jQuery 动画效果</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fx.off = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检测鼠标的右键和左键\"><a href=\"#检测鼠标的右键和左键\" class=\"headerlink\" title=\"检测鼠标的右键和左键\"></a>检测鼠标的右键和左键</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#box'</span>).mousedown(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(e.which);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"回车提交表单\"><a href=\"#回车提交表单\" class=\"headerlink\" title=\"回车提交表单\"></a>回车提交表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'input'</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.which == <span class=\"string\">'13'</span>) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'回车提交'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换复选框\"><a href=\"#切换复选框\" class=\"headerlink\" title=\"切换复选框\"></a>切换复选框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tog = <span class=\"literal\">false</span>;</span><br><span class=\"line\">$(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"input[type=checkbox]\"</span>).attr(<span class=\"string\">\"checked\"</span>,!tog);</span><br><span class=\"line\">  tog = !tog;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-siblings-来选择同辈元素\"><a href=\"#使用-siblings-来选择同辈元素\" class=\"headerlink\" title=\"使用 siblings() 来选择同辈元素\"></a>使用 siblings() 来选择同辈元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不这样做</span></span><br><span class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#nav li'</span>).removeClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//替代做法是</span></span><br><span class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>).siblings().removeClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"为任何与选择器相匹配的元素绑定事件\"><a href=\"#为任何与选择器相匹配的元素绑定事件\" class=\"headerlink\" title=\"为任何与选择器相匹配的元素绑定事件\"></a>为任何与选择器相匹配的元素绑定事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"table\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"td\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"hover\"</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-的使用\"><a href=\"#proxy-的使用\" class=\"headerlink\" title=\"$.proxy 的使用\"></a>$.proxy 的使用</h3><p>使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#panel</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 300px;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#panel button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"keyword\">this</span>).fadeOut();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 <code>$.proxy</code> 方法解决这个问题，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#panel</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 300px;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#panel button'</span>).click($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"keyword\">this</span>).fadeOut();</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样才正确执行。</p>\n<h3 id=\"限制-Text-Area-域中的字符的个数\"><a href=\"#限制-Text-Area-域中的字符的个数\" class=\"headerlink\" title=\"限制 Text-Area 域中的字符的个数\"></a>限制 Text-Area 域中的字符的个数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mytextarea\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    jQuery.fn.maxLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">max</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">this</span>.tagName.toLowerCase();</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">var</span> inputType = <span class=\"keyword\">this</span>.type? <span class=\"keyword\">this</span>.type.toLowerCase() : <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(type == <span class=\"string\">\"input\"</span> &amp;&amp; inputType == <span class=\"string\">\"text\"</span> || inputType == <span class=\"string\">\"password\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"comment\">//应用标准的maxLength</span></span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.maxLength = max;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">\"textarea\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> ob = e || event;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> keyCode = ob.keyCode;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> hasSelection = <span class=\"built_in\">document</span>.selection? <span class=\"built_in\">document</span>.selection.createRange().text.length &gt; <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.selectionStart != <span class=\"keyword\">this</span>.selectionEnd;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.value.length &gt;= max &amp;&amp; (keyCode &gt; <span class=\"number\">50</span> || keyCode == <span class=\"number\">32</span> || keyCode == <span class=\"number\">0</span> || keyCode == <span class=\"number\">13</span>) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.onkeyup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.value.length &gt; max)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.substring(<span class=\"number\">0</span>,max);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//use</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#mytextarea'</span>).maxLength(<span class=\"number\">10</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"解析-json-数据时报-parseError-错误\"><a href=\"#解析-json-数据时报-parseError-错误\" class=\"headerlink\" title=\"解析 json 数据时报 parseError 错误\"></a>解析 json 数据时报 parseError 错误</h3><p>jQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.4之前版本，key没引号，这样没问题</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:\"coco\",</span><br><span class=\"line\">  status:\"0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但升级成jQuery1.4后，都必须加上双引号，格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>:<span class=\"string\">\"coco\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"从元素中除去-HTML\"><a href=\"#从元素中除去-HTML\" class=\"headerlink\" title=\"从元素中除去 HTML\"></a>从元素中除去 HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">$.fn.stripHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">var</span> regexp = <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/gi</span>; </span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">  　$(<span class=\"keyword\">this</span>).html( $(<span class=\"keyword\">this</span>).html().replace(regexp,<span class=\"string\">''</span>) ); </span></span><br><span class=\"line\"><span class=\"undefined\">　&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>); </span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)(jQuery); </span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//用法： </span></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'div'</span>).stripHtml(); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展-String-对象的方法\"><a href=\"#扩展-String-对象的方法\" class=\"headerlink\" title=\"扩展 String 对象的方法\"></a>扩展 String 对象的方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span>check<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $.extend(<span class=\"built_in\">String</span>.prototype, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  isPositiveInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[1-9]\\d*$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\d+$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, element</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^-?(?:\\d+|\\d&#123;1,3&#125;(?:,\\d&#123;3&#125;)+)(?:\\.\\d+)?$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  trim:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^\\s*)|(\\s*$)|\\r|\\n/g</span>, <span class=\"string\">\"\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  trans:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&amp;gt;/g</span>,<span class=\"string\">'&gt;'</span>).replace(<span class=\"regexp\">/&amp;quot;/g</span>, <span class=\"string\">'\"'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  replaceAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">os, ns</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(os,<span class=\"string\">\"gm\"</span>),ns);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  skipChar:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ch</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span> || <span class=\"keyword\">this</span>.length===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt(<span class=\"number\">0</span>)===ch) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.substring(<span class=\"number\">1</span>).skipChar(ch);&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isValidPwd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^([_]|[a-zA-Z0-9])&#123;6,32&#125;$/</span>).test(<span class=\"keyword\">this</span>)); </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isValidMail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>).test(<span class=\"keyword\">this</span>.trim()));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isSpaces:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"keyword\">this</span>.length; i+=<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ch = <span class=\"keyword\">this</span>.charAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (ch!=<span class=\"string\">' '</span>&amp;&amp; ch!=<span class=\"string\">\"\\n\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\t\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\r\"</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isPhone:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/(^([0-9]&#123;3,4&#125;[-])?\\d&#123;3,8&#125;(-\\d&#123;1,6&#125;)?$)|(^\\([0-9]&#123;3,4&#125;\\)\\d&#123;3,8&#125;(\\(\\d&#123;1,6&#125;\\))?$)|(^\\d&#123;3,8&#125;$)/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&amp;=:]*)$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isExternalUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isUrl() &amp;&amp; <span class=\"keyword\">this</span>.indexOf(<span class=\"string\">\"://\"</span>+<span class=\"built_in\">document</span>.domain) == <span class=\"number\">-1</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(   $(<span class=\"string\">\"input\"</span>).val().isInteger()  );</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"禁用页面的右键菜单\"><a href=\"#禁用页面的右键菜单\" class=\"headerlink\" title=\"禁用页面的右键菜单\"></a>禁用页面的右键菜单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">  &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"新窗口打开页面\"><a href=\"#新窗口打开页面\" class=\"headerlink\" title=\"新窗口打开页面\"></a>新窗口打开页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"external\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"demo1.html\"</span>&gt;</span>当前窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>,<span class=\"string\">\"_blank\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输入框文字获取和失去焦点【推荐】\"><a href=\"#输入框文字获取和失去焦点【推荐】\" class=\"headerlink\" title=\"输入框文字获取和失去焦点【推荐】\"></a><font color=\"#099\">输入框文字获取和失去焦点【推荐】</font></h3>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here.\"</span>);  </span></span><br><span class=\"line\"><span class=\"javascript\">  textFill( $(<span class=\"string\">'input.text1'</span>) );  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function  </span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> originalvalue = input.val();  </span></span><br><span class=\"line\"><span class=\"javascript\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      input.val(<span class=\"string\">''</span>); </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;).blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )&#123; </span></span><br><span class=\"line\"><span class=\"undefined\">      input.val(originalvalue); </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"返回头部滑动动画\"><a href=\"#返回头部滑动动画\" class=\"headerlink\" title=\"返回头部滑动动画\"></a>返回头部滑动动画</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">jQuery.fn.scrollTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">speed</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> targetOffset = $(<span class=\"keyword\">this</span>).offset().top;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'html,body'</span>).stop().animate(&#123;<span class=\"attr\">scrollTop</span>: targetOffset&#125;, speed);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;; </span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// use</span></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">\"#goheader\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"body\"</span>).scrollTo(<span class=\"number\">500</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取鼠标位置\"><a href=\"#获取鼠标位置\" class=\"headerlink\" title=\"获取鼠标位置\"></a>获取鼠标位置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"XY\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#XY'</span>).html(<span class=\"string\">\"X : \"</span> + e.pageX + <span class=\"string\">\" | Y : \"</span> + e.pageY);  </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭所有-jQuery-动画效果\"><a href=\"#关闭所有-jQuery-动画效果\" class=\"headerlink\" title=\"关闭所有 jQuery 动画效果\"></a>关闭所有 jQuery 动画效果</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fx.off = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检测鼠标的右键和左键\"><a href=\"#检测鼠标的右键和左键\" class=\"headerlink\" title=\"检测鼠标的右键和左键\"></a>检测鼠标的右键和左键</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#box'</span>).mousedown(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(e.which);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"回车提交表单\"><a href=\"#回车提交表单\" class=\"headerlink\" title=\"回车提交表单\"></a>回车提交表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'input'</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.which == <span class=\"string\">'13'</span>) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'回车提交'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换复选框\"><a href=\"#切换复选框\" class=\"headerlink\" title=\"切换复选框\"></a>切换复选框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tog = <span class=\"literal\">false</span>;</span><br><span class=\"line\">$(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"input[type=checkbox]\"</span>).attr(<span class=\"string\">\"checked\"</span>,!tog);</span><br><span class=\"line\">  tog = !tog;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-siblings-来选择同辈元素\"><a href=\"#使用-siblings-来选择同辈元素\" class=\"headerlink\" title=\"使用 siblings() 来选择同辈元素\"></a>使用 siblings() 来选择同辈元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不这样做</span></span><br><span class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#nav li'</span>).removeClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//替代做法是</span></span><br><span class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>).siblings().removeClass(<span class=\"string\">'active'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"为任何与选择器相匹配的元素绑定事件\"><a href=\"#为任何与选择器相匹配的元素绑定事件\" class=\"headerlink\" title=\"为任何与选择器相匹配的元素绑定事件\"></a>为任何与选择器相匹配的元素绑定事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"table\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"td\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"hover\"</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-的使用\"><a href=\"#proxy-的使用\" class=\"headerlink\" title=\"$.proxy 的使用\"></a>$.proxy 的使用</h3><p>使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#panel</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 300px;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#panel button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"keyword\">this</span>).fadeOut();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 <code>$.proxy</code> 方法解决这个问题，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#panel</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 300px;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#panel button'</span>).click($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"keyword\">this</span>).fadeOut();</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样才正确执行。</p>\n<h3 id=\"限制-Text-Area-域中的字符的个数\"><a href=\"#限制-Text-Area-域中的字符的个数\" class=\"headerlink\" title=\"限制 Text-Area 域中的字符的个数\"></a>限制 Text-Area 域中的字符的个数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mytextarea\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    jQuery.fn.maxLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">max</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">this</span>.tagName.toLowerCase();</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">var</span> inputType = <span class=\"keyword\">this</span>.type? <span class=\"keyword\">this</span>.type.toLowerCase() : <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(type == <span class=\"string\">\"input\"</span> &amp;&amp; inputType == <span class=\"string\">\"text\"</span> || inputType == <span class=\"string\">\"password\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"comment\">//应用标准的maxLength</span></span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.maxLength = max;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">\"textarea\"</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> ob = e || event;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> keyCode = ob.keyCode;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> hasSelection = <span class=\"built_in\">document</span>.selection? <span class=\"built_in\">document</span>.selection.createRange().text.length &gt; <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.selectionStart != <span class=\"keyword\">this</span>.selectionEnd;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.value.length &gt;= max &amp;&amp; (keyCode &gt; <span class=\"number\">50</span> || keyCode == <span class=\"number\">32</span> || keyCode == <span class=\"number\">0</span> || keyCode == <span class=\"number\">13</span>) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">this</span>.onkeyup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.value.length &gt; max)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.substring(<span class=\"number\">0</span>,max);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">              &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//use</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#mytextarea'</span>).maxLength(<span class=\"number\">10</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"解析-json-数据时报-parseError-错误\"><a href=\"#解析-json-数据时报-parseError-错误\" class=\"headerlink\" title=\"解析 json 数据时报 parseError 错误\"></a>解析 json 数据时报 parseError 错误</h3><p>jQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.4之前版本，key没引号，这样没问题</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  key:\"coco\",</span><br><span class=\"line\">  status:\"0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但升级成jQuery1.4后，都必须加上双引号，格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>:<span class=\"string\">\"coco\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"从元素中除去-HTML\"><a href=\"#从元素中除去-HTML\" class=\"headerlink\" title=\"从元素中除去 HTML\"></a>从元素中除去 HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">$.fn.stripHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">var</span> regexp = <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/gi</span>; </span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">  　$(<span class=\"keyword\">this</span>).html( $(<span class=\"keyword\">this</span>).html().replace(regexp,<span class=\"string\">''</span>) ); </span></span><br><span class=\"line\"><span class=\"undefined\">　&#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">　<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>); </span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)(jQuery); </span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//用法： </span></span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">'div'</span>).stripHtml(); </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展-String-对象的方法\"><a href=\"#扩展-String-对象的方法\" class=\"headerlink\" title=\"扩展 String 对象的方法\"></a>扩展 String 对象的方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span>check<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $.extend(<span class=\"built_in\">String</span>.prototype, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  isPositiveInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[1-9]\\d*$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\d+$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, element</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^-?(?:\\d+|\\d&#123;1,3&#125;(?:,\\d&#123;3&#125;)+)(?:\\.\\d+)?$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  trim:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^\\s*)|(\\s*$)|\\r|\\n/g</span>, <span class=\"string\">\"\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  trans:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&amp;gt;/g</span>,<span class=\"string\">'&gt;'</span>).replace(<span class=\"regexp\">/&amp;quot;/g</span>, <span class=\"string\">'\"'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  replaceAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">os, ns</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(os,<span class=\"string\">\"gm\"</span>),ns);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  skipChar:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ch</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span> || <span class=\"keyword\">this</span>.length===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt(<span class=\"number\">0</span>)===ch) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.substring(<span class=\"number\">1</span>).skipChar(ch);&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isValidPwd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^([_]|[a-zA-Z0-9])&#123;6,32&#125;$/</span>).test(<span class=\"keyword\">this</span>)); </span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isValidMail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>).test(<span class=\"keyword\">this</span>.trim()));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isSpaces:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"keyword\">this</span>.length; i+=<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ch = <span class=\"keyword\">this</span>.charAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (ch!=<span class=\"string\">' '</span>&amp;&amp; ch!=<span class=\"string\">\"\\n\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\t\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\r\"</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isPhone:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/(^([0-9]&#123;3,4&#125;[-])?\\d&#123;3,8&#125;(-\\d&#123;1,6&#125;)?$)|(^\\([0-9]&#123;3,4&#125;\\)\\d&#123;3,8&#125;(\\(\\d&#123;1,6&#125;\\))?$)|(^\\d&#123;3,8&#125;$)/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&amp;=:]*)$/</span>).test(<span class=\"keyword\">this</span>));</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  isExternalUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isUrl() &amp;&amp; <span class=\"keyword\">this</span>.indexOf(<span class=\"string\">\"://\"</span>+<span class=\"built_in\">document</span>.domain) == <span class=\"number\">-1</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(   $(<span class=\"string\">\"input\"</span>).val().isInteger()  );</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"【转】为什么一些生活中很外向开朗的人会喜欢独来独往","date":"2017-12-24T14:25:24.000Z","comments":0,"_content":"\n<p id=\"div-border-left-purple\">因为他是一个内向的人。\n    不要怀疑，很多人都是这样。\n\n    内向的人，通过独处来恢复精力。\n    所以他们不是喜欢孤独，而是，孤独才是他们的常态。\n    他们跟别人交流、相处，其实都是在消耗精力。\n</p>\n\n\n\n下面详述：\n\n<!-- more -->\n\n心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。\n这个模型中，把人的性格用五个维度来区分。\n分别是：\n\n<span id=\"inline-red\">外向性（Extraversion）</span>\n<span id=\"inline-yellow\">神经质（Neuroticism）</span>\n<span id=\"inline-green\">亲和性（Agreeableness）</span>\n<span id=\"inline-blue\">负责性（Conscientiousness）</span>\n<span id=\"inline-purple\">经验开放性（Openness to experience）</span>\n\n在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。\n这里的「外向」和「内向」是有一定描述的。\n\n外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。\n\n内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。\n\n可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。\n\n因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。\n\n\n更深入地说，外向与内向的差异，主要在于下面三点：\n\n##### 经验的广度和深度\n\n外向的人倾向于广度。\n他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。\n\n内向的人则倾向于拓展某一方面的深度。\n他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。\n对他们而言，太多的经验会造成压力。\n\n##### 对刺激的反应\n\n外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。\n\n内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。\n\n##### 精力的来源 （这是重点）\n\n外向的人会从外部世界获得精力。\n对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。\n\n内向的人，则是自己制造精力。\n对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。\n\n但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。\n同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。\n\n关键只在于精力的水平，以及恢复精力的方式。\n\n\n这里给一张图，帮助大家理解：\n\n![](http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg)\n\n\n\n\n作者：Lachel\n原文：https://www.zhihu.com/question/24303670","source":"_posts/why-introversion-like-alone.md","raw":"---\ntitle: 【转】为什么一些生活中很外向开朗的人会喜欢独来独往\ndate: 2017-12-24 22:25:24\ncategories: 综合\ntags: [essay]\ncomments: false\n---\n\n<p id=\"div-border-left-purple\">因为他是一个内向的人。\n    不要怀疑，很多人都是这样。\n\n    内向的人，通过独处来恢复精力。\n    所以他们不是喜欢孤独，而是，孤独才是他们的常态。\n    他们跟别人交流、相处，其实都是在消耗精力。\n</p>\n\n\n\n下面详述：\n\n<!-- more -->\n\n心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。\n这个模型中，把人的性格用五个维度来区分。\n分别是：\n\n<span id=\"inline-red\">外向性（Extraversion）</span>\n<span id=\"inline-yellow\">神经质（Neuroticism）</span>\n<span id=\"inline-green\">亲和性（Agreeableness）</span>\n<span id=\"inline-blue\">负责性（Conscientiousness）</span>\n<span id=\"inline-purple\">经验开放性（Openness to experience）</span>\n\n在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。\n这里的「外向」和「内向」是有一定描述的。\n\n外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。\n\n内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。\n\n可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。\n\n因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。\n\n\n更深入地说，外向与内向的差异，主要在于下面三点：\n\n##### 经验的广度和深度\n\n外向的人倾向于广度。\n他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。\n\n内向的人则倾向于拓展某一方面的深度。\n他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。\n对他们而言，太多的经验会造成压力。\n\n##### 对刺激的反应\n\n外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。\n\n内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。\n\n##### 精力的来源 （这是重点）\n\n外向的人会从外部世界获得精力。\n对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。\n\n内向的人，则是自己制造精力。\n对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。\n\n但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。\n同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。\n\n关键只在于精力的水平，以及恢复精力的方式。\n\n\n这里给一张图，帮助大家理解：\n\n![](http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg)\n\n\n\n\n作者：Lachel\n原文：https://www.zhihu.com/question/24303670","slug":"why-introversion-like-alone","published":1,"updated":"2019-08-15T07:18:43.246Z","_id":"cjzccpd010022z4v5dax9epoz","layout":"post","photos":[],"link":"","content":"<p id=\"div-border-left-purple\">因为他是一个内向的人。<br>    不要怀疑，很多人都是这样。<br><br>    内向的人，通过独处来恢复精力。<br>    所以他们不是喜欢孤独，而是，孤独才是他们的常态。<br>    他们跟别人交流、相处，其实都是在消耗精力。<br></p>\n\n\n\n<p>下面详述：</p>\n<a id=\"more\"></a>\n<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>\n<p><span id=\"inline-red\">外向性（Extraversion）</span><br><span id=\"inline-yellow\">神经质（Neuroticism）</span><br><span id=\"inline-green\">亲和性（Agreeableness）</span><br><span id=\"inline-blue\">负责性（Conscientiousness）</span><br><span id=\"inline-purple\">经验开放性（Openness to experience）</span></p>\n<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>\n<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>\n<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>\n<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>\n<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>\n<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>\n<h5 id=\"经验的广度和深度\"><a href=\"#经验的广度和深度\" class=\"headerlink\" title=\"经验的广度和深度\"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>\n<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>\n<h5 id=\"对刺激的反应\"><a href=\"#对刺激的反应\" class=\"headerlink\" title=\"对刺激的反应\"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>\n<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>\n<h5 id=\"精力的来源-（这是重点）\"><a href=\"#精力的来源-（这是重点）\" class=\"headerlink\" title=\"精力的来源 （这是重点）\"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>\n<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>\n<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>\n<p>关键只在于精力的水平，以及恢复精力的方式。</p>\n<p>这里给一张图，帮助大家理解：</p>\n<p><img src=\"http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg\" alt=\"\"></p>\n<p>作者：Lachel<br>原文：<a href=\"https://www.zhihu.com/question/24303670\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24303670</a></p>\n","site":{"data":{}},"excerpt":"<p id=\"div-border-left-purple\">因为他是一个内向的人。<br>    不要怀疑，很多人都是这样。<br><br>    内向的人，通过独处来恢复精力。<br>    所以他们不是喜欢孤独，而是，孤独才是他们的常态。<br>    他们跟别人交流、相处，其实都是在消耗精力。<br></p>\n\n\n\n<p>下面详述：</p>","more":"<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>\n<p><span id=\"inline-red\">外向性（Extraversion）</span><br><span id=\"inline-yellow\">神经质（Neuroticism）</span><br><span id=\"inline-green\">亲和性（Agreeableness）</span><br><span id=\"inline-blue\">负责性（Conscientiousness）</span><br><span id=\"inline-purple\">经验开放性（Openness to experience）</span></p>\n<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>\n<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>\n<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>\n<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>\n<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>\n<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>\n<h5 id=\"经验的广度和深度\"><a href=\"#经验的广度和深度\" class=\"headerlink\" title=\"经验的广度和深度\"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>\n<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>\n<h5 id=\"对刺激的反应\"><a href=\"#对刺激的反应\" class=\"headerlink\" title=\"对刺激的反应\"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>\n<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>\n<h5 id=\"精力的来源-（这是重点）\"><a href=\"#精力的来源-（这是重点）\" class=\"headerlink\" title=\"精力的来源 （这是重点）\"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>\n<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>\n<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>\n<p>关键只在于精力的水平，以及恢复精力的方式。</p>\n<p>这里给一张图，帮助大家理解：</p>\n<p><img src=\"http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg\" alt=\"\"></p>\n<p>作者：Lachel<br>原文：<a href=\"https://www.zhihu.com/question/24303670\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24303670</a></p>"},{"title":"【转】为什么我们放弃了 Zepto","date":"2018-02-13T17:25:24.000Z","comments":0,"summary_img":"http://i2.muimg.com/567571/fae45a374015a1c2.png","_content":"\n<!-- <img src=\"http://i2.muimg.com/567571/fae45a374015a1c2.png\" alt=\"summary-img-src-zepto\"> -->\n\n<!-- more -->\n\n> [Foundation](http://foundation.zurb.com/) 是 [Zurb](http://zurb.com/) 公司开源的一套前端框架，和 [Bootstrap](http://www.bootcss.com/) 类似。\n\n\n在漆深的洞中，聪明、强壮的雪人（雪人 -- Yeti -- 是 Foundation 框架的吉祥物，这里其实是暗指 Foundation 框架）听到人们的询问“Zepto 去哪儿了？”。\n\n\n回顾 Foundation 版本 4 开发时，我们考虑采用 Zepto 库（jQuery 可选），主要是由于 Zepto 体积小、加载速度快。\n\n\n随着时间的推移，我们发现文件体积的大小根本和执行效率没有任何比例关系。当然，必须承认，Zepto 下载的确很快。但是，一旦下载到浏览器之后，它并不像 jQuery 一样执行速度快。并且，很多第三方插件都依赖 jQuery，不支持 Zepto -- 实际上，我们发现某些第三方插件和 Zepto 有冲突。\n\n\n对于我们来讲，维护多套代码很不容易。例如，Zepto 缺少合适的高度计算函数，这让某些栅格（grid）的计算变得很困难。\n\n\n为了解决这些问题，我们发现解决办法其实极其简单：基于 jQuery 2 构建 Foundation 版本 5。除了获得更好的执行速度和广泛的业界支持外，jQuery 2 的文档更优秀、支持也同样更好。jQuery 的 API 在各个版本是兼容的。\n\n\n等一等，为了把问题讲清楚，我们还是先假定 Zepto 的执行速度可能比 jQeury 快。我们不希望犯同样的错误，因此，我们将 Zepto 和 jQuery 2 进行对比测试，测试结果是：[jQuery 2 每秒执行的操作次数比 Zepto 多](http://jsperf.com/zepto-vs-jquery-2013/25)。这让 Foundation 版本 5 的执行效率更高，同时让所有用户感受到更好的体验。\n\n\n最后，我们希望帮助大家更快速地设计优秀的产品 -- 这次，我们的一点儿改变，让 Foundation 这个前端框架的速度得到大幅提升！\n\n\n\n## 译者总结：\n在开源的世界中，充斥着大量的开源项目，但是，只有少部分的开源项目为广大开发者所熟知并积极使用。一个好的开源项目必须有一个强大的社区和一批积极的贡献者，jQuery 就是其中一个幸运儿。\n\n原文地址：[http://zurb.com/article/1293/why-we-dropped-zepto](http://zurb.com/article/1293/why-we-dropped-zepto)","source":"_posts/why-we-dropped-zepto.md","raw":"---\ntitle: 【转】为什么我们放弃了 Zepto\ndate: 2018-02-14 01:25:24\ncategories: 综合\ntags: [zepto]\ncomments: false\nsummary_img: http://i2.muimg.com/567571/fae45a374015a1c2.png\n---\n\n<!-- <img src=\"http://i2.muimg.com/567571/fae45a374015a1c2.png\" alt=\"summary-img-src-zepto\"> -->\n\n<!-- more -->\n\n> [Foundation](http://foundation.zurb.com/) 是 [Zurb](http://zurb.com/) 公司开源的一套前端框架，和 [Bootstrap](http://www.bootcss.com/) 类似。\n\n\n在漆深的洞中，聪明、强壮的雪人（雪人 -- Yeti -- 是 Foundation 框架的吉祥物，这里其实是暗指 Foundation 框架）听到人们的询问“Zepto 去哪儿了？”。\n\n\n回顾 Foundation 版本 4 开发时，我们考虑采用 Zepto 库（jQuery 可选），主要是由于 Zepto 体积小、加载速度快。\n\n\n随着时间的推移，我们发现文件体积的大小根本和执行效率没有任何比例关系。当然，必须承认，Zepto 下载的确很快。但是，一旦下载到浏览器之后，它并不像 jQuery 一样执行速度快。并且，很多第三方插件都依赖 jQuery，不支持 Zepto -- 实际上，我们发现某些第三方插件和 Zepto 有冲突。\n\n\n对于我们来讲，维护多套代码很不容易。例如，Zepto 缺少合适的高度计算函数，这让某些栅格（grid）的计算变得很困难。\n\n\n为了解决这些问题，我们发现解决办法其实极其简单：基于 jQuery 2 构建 Foundation 版本 5。除了获得更好的执行速度和广泛的业界支持外，jQuery 2 的文档更优秀、支持也同样更好。jQuery 的 API 在各个版本是兼容的。\n\n\n等一等，为了把问题讲清楚，我们还是先假定 Zepto 的执行速度可能比 jQeury 快。我们不希望犯同样的错误，因此，我们将 Zepto 和 jQuery 2 进行对比测试，测试结果是：[jQuery 2 每秒执行的操作次数比 Zepto 多](http://jsperf.com/zepto-vs-jquery-2013/25)。这让 Foundation 版本 5 的执行效率更高，同时让所有用户感受到更好的体验。\n\n\n最后，我们希望帮助大家更快速地设计优秀的产品 -- 这次，我们的一点儿改变，让 Foundation 这个前端框架的速度得到大幅提升！\n\n\n\n## 译者总结：\n在开源的世界中，充斥着大量的开源项目，但是，只有少部分的开源项目为广大开发者所熟知并积极使用。一个好的开源项目必须有一个强大的社区和一批积极的贡献者，jQuery 就是其中一个幸运儿。\n\n原文地址：[http://zurb.com/article/1293/why-we-dropped-zepto](http://zurb.com/article/1293/why-we-dropped-zepto)","slug":"why-we-dropped-zepto","published":1,"updated":"2019-08-15T07:19:09.568Z","_id":"cjzccpd5e003az4v56tizy4nu","layout":"post","photos":[],"link":"","content":"<!-- <img src=\"http://i2.muimg.com/567571/fae45a374015a1c2.png\" alt=\"summary-img-src-zepto\"> -->\n<a id=\"more\"></a>\n<blockquote>\n<p><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"noopener\">Foundation</a> 是 <a href=\"http://zurb.com/\" target=\"_blank\" rel=\"noopener\">Zurb</a> 公司开源的一套前端框架，和 <a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a> 类似。</p>\n</blockquote>\n<p>在漆深的洞中，聪明、强壮的雪人（雪人 – Yeti – 是 Foundation 框架的吉祥物，这里其实是暗指 Foundation 框架）听到人们的询问“Zepto 去哪儿了？”。</p>\n<p>回顾 Foundation 版本 4 开发时，我们考虑采用 Zepto 库（jQuery 可选），主要是由于 Zepto 体积小、加载速度快。</p>\n<p>随着时间的推移，我们发现文件体积的大小根本和执行效率没有任何比例关系。当然，必须承认，Zepto 下载的确很快。但是，一旦下载到浏览器之后，它并不像 jQuery 一样执行速度快。并且，很多第三方插件都依赖 jQuery，不支持 Zepto – 实际上，我们发现某些第三方插件和 Zepto 有冲突。</p>\n<p>对于我们来讲，维护多套代码很不容易。例如，Zepto 缺少合适的高度计算函数，这让某些栅格（grid）的计算变得很困难。</p>\n<p>为了解决这些问题，我们发现解决办法其实极其简单：基于 jQuery 2 构建 Foundation 版本 5。除了获得更好的执行速度和广泛的业界支持外，jQuery 2 的文档更优秀、支持也同样更好。jQuery 的 API 在各个版本是兼容的。</p>\n<p>等一等，为了把问题讲清楚，我们还是先假定 Zepto 的执行速度可能比 jQeury 快。我们不希望犯同样的错误，因此，我们将 Zepto 和 jQuery 2 进行对比测试，测试结果是：<a href=\"http://jsperf.com/zepto-vs-jquery-2013/25\" target=\"_blank\" rel=\"noopener\">jQuery 2 每秒执行的操作次数比 Zepto 多</a>。这让 Foundation 版本 5 的执行效率更高，同时让所有用户感受到更好的体验。</p>\n<p>最后，我们希望帮助大家更快速地设计优秀的产品 – 这次，我们的一点儿改变，让 Foundation 这个前端框架的速度得到大幅提升！</p>\n<h2 id=\"译者总结：\"><a href=\"#译者总结：\" class=\"headerlink\" title=\"译者总结：\"></a>译者总结：</h2><p>在开源的世界中，充斥着大量的开源项目，但是，只有少部分的开源项目为广大开发者所熟知并积极使用。一个好的开源项目必须有一个强大的社区和一批积极的贡献者，jQuery 就是其中一个幸运儿。</p>\n<p>原文地址：<a href=\"http://zurb.com/article/1293/why-we-dropped-zepto\" target=\"_blank\" rel=\"noopener\">http://zurb.com/article/1293/why-we-dropped-zepto</a></p>\n","site":{"data":{}},"excerpt":"<!-- <img src=\"http://i2.muimg.com/567571/fae45a374015a1c2.png\" alt=\"summary-img-src-zepto\"> -->","more":"<blockquote>\n<p><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"noopener\">Foundation</a> 是 <a href=\"http://zurb.com/\" target=\"_blank\" rel=\"noopener\">Zurb</a> 公司开源的一套前端框架，和 <a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a> 类似。</p>\n</blockquote>\n<p>在漆深的洞中，聪明、强壮的雪人（雪人 – Yeti – 是 Foundation 框架的吉祥物，这里其实是暗指 Foundation 框架）听到人们的询问“Zepto 去哪儿了？”。</p>\n<p>回顾 Foundation 版本 4 开发时，我们考虑采用 Zepto 库（jQuery 可选），主要是由于 Zepto 体积小、加载速度快。</p>\n<p>随着时间的推移，我们发现文件体积的大小根本和执行效率没有任何比例关系。当然，必须承认，Zepto 下载的确很快。但是，一旦下载到浏览器之后，它并不像 jQuery 一样执行速度快。并且，很多第三方插件都依赖 jQuery，不支持 Zepto – 实际上，我们发现某些第三方插件和 Zepto 有冲突。</p>\n<p>对于我们来讲，维护多套代码很不容易。例如，Zepto 缺少合适的高度计算函数，这让某些栅格（grid）的计算变得很困难。</p>\n<p>为了解决这些问题，我们发现解决办法其实极其简单：基于 jQuery 2 构建 Foundation 版本 5。除了获得更好的执行速度和广泛的业界支持外，jQuery 2 的文档更优秀、支持也同样更好。jQuery 的 API 在各个版本是兼容的。</p>\n<p>等一等，为了把问题讲清楚，我们还是先假定 Zepto 的执行速度可能比 jQeury 快。我们不希望犯同样的错误，因此，我们将 Zepto 和 jQuery 2 进行对比测试，测试结果是：<a href=\"http://jsperf.com/zepto-vs-jquery-2013/25\" target=\"_blank\" rel=\"noopener\">jQuery 2 每秒执行的操作次数比 Zepto 多</a>。这让 Foundation 版本 5 的执行效率更高，同时让所有用户感受到更好的体验。</p>\n<p>最后，我们希望帮助大家更快速地设计优秀的产品 – 这次，我们的一点儿改变，让 Foundation 这个前端框架的速度得到大幅提升！</p>\n<h2 id=\"译者总结：\"><a href=\"#译者总结：\" class=\"headerlink\" title=\"译者总结：\"></a>译者总结：</h2><p>在开源的世界中，充斥着大量的开源项目，但是，只有少部分的开源项目为广大开发者所熟知并积极使用。一个好的开源项目必须有一个强大的社区和一批积极的贡献者，jQuery 就是其中一个幸运儿。</p>\n<p>原文地址：<a href=\"http://zurb.com/article/1293/why-we-dropped-zepto\" target=\"_blank\" rel=\"noopener\">http://zurb.com/article/1293/why-we-dropped-zepto</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzccpcyl0008z4v5dcxge5a4","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpcyt000fz4v55opmmrvh"},{"post_id":"cjzccpcy70003z4v5yghat0z1","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpcyy000jz4v5nwem97qu"},{"post_id":"cjzccpcyp000dz4v52bcespe0","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpcz0000lz4v5gz26uptx"},{"post_id":"cjzccpcyc0004z4v5al2hy56x","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpcz2000pz4v5gz6w069l"},{"post_id":"cjzccpcyx000iz4v5ybdk7w13","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpcz4000sz4v5vwa7c75i"},{"post_id":"cjzccpcyj0007z4v5rjwqp2v3","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpcz7000xz4v52pf2x6kh"},{"post_id":"cjzccpcym0009z4v5ll1jq3qf","category_id":"cjzccpcz0000mz4v596ofgj2r","_id":"cjzccpcz90010z4v58x3rcp07"},{"post_id":"cjzccpcz6000wz4v5nwmnm3td","category_id":"cjzccpcz5000vz4v5gr9sth4v","_id":"cjzccpczd0016z4v52ffm9ex1"},{"post_id":"cjzccpcys000ez4v5f0ph1mx6","category_id":"cjzccpcz5000vz4v5gr9sth4v","_id":"cjzccpczi001bz4v5kere9lna"},{"post_id":"cjzccpcz7000zz4v5at4l11og","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpczl001ez4v59d2cbx0c"},{"post_id":"cjzccpcza0013z4v5r7w1hsdg","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpczn001jz4v5rddetd6v"},{"post_id":"cjzccpcyy000kz4v5vqc7t4kq","category_id":"cjzccpcz5000vz4v5gr9sth4v","_id":"cjzccpczq001mz4v5fttjpuab"},{"post_id":"cjzccpczc0015z4v5whoa2n3l","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpczs001pz4v5bfnp47ui"},{"post_id":"cjzccpczg001az4v572t8lqaj","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpczv001tz4v58mprl9gd"},{"post_id":"cjzccpcz1000oz4v5vfzsr09z","category_id":"cjzccpcz5000vz4v5gr9sth4v","_id":"cjzccpczy001wz4v513ly96kx"},{"post_id":"cjzccpczj001dz4v5bj4ofnd5","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd010020z4v57nhki7s0"},{"post_id":"cjzccpczm001iz4v5g7wawaxc","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd030023z4v58y4h3x5o"},{"post_id":"cjzccpcz3000rz4v5678ky0ih","category_id":"cjzccpcz5000vz4v5gr9sth4v","_id":"cjzccpd040026z4v59n2moi6f"},{"post_id":"cjzccpczo001lz4v5cx08t53d","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd050028z4v5cz6gd40f"},{"post_id":"cjzccpczr001oz4v57spf9uew","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd07002bz4v5qna1kc6s"},{"post_id":"cjzccpczt001sz4v54d5ndbcs","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd07002cz4v51pp40rj3"},{"post_id":"cjzccpczx001vz4v5t4ve1k5h","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd07002ez4v55j2gbb6x"},{"post_id":"cjzccpd00001zz4v5pxwil1ew","category_id":"cjzccpcyh0005z4v5ddazebck","_id":"cjzccpd08002gz4v56h473f9e"},{"post_id":"cjzccpd010022z4v5dax9epoz","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpd09002jz4v5or94z7yz"},{"post_id":"cjzccpd5e003az4v56tizy4nu","category_id":"cjzccpcyo000az4v5qzx9e8s8","_id":"cjzccpd5n003fz4v5q6sv7of8"}],"PostTag":[{"post_id":"cjzccpcy70003z4v5yghat0z1","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpcyp000cz4v5f99f72yd"},{"post_id":"cjzccpcyc0004z4v5al2hy56x","tag_id":"cjzccpcyo000bz4v5ersx39ml","_id":"cjzccpcz3000qz4v5iyl4lv4p"},{"post_id":"cjzccpcyc0004z4v5al2hy56x","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpcz4000tz4v581g1386d"},{"post_id":"cjzccpcyj0007z4v5rjwqp2v3","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpcz7000yz4v5l9tvxo4z"},{"post_id":"cjzccpcyl0008z4v5dcxge5a4","tag_id":"cjzccpcz5000uz4v5u8u0nq34","_id":"cjzccpczb0014z4v5a6yqgye1"},{"post_id":"cjzccpcz7000zz4v5at4l11og","tag_id":"cjzccpcyo000bz4v5ersx39ml","_id":"cjzccpcze0017z4v5a7iyipx8"},{"post_id":"cjzccpcz7000zz4v5at4l11og","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpczj001cz4v574tgntpv"},{"post_id":"cjzccpcza0013z4v5r7w1hsdg","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpczl001fz4v5n1fhslte"},{"post_id":"cjzccpcym0009z4v5ll1jq3qf","tag_id":"cjzccpcyo000bz4v5ersx39ml","_id":"cjzccpczo001kz4v53wbr3bew"},{"post_id":"cjzccpczc0015z4v5whoa2n3l","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpczq001nz4v5fvcpvyv8"},{"post_id":"cjzccpczg001az4v572t8lqaj","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpczt001rz4v51unlv19d"},{"post_id":"cjzccpcyp000dz4v52bcespe0","tag_id":"cjzccpczf0018z4v5yi9cjb2n","_id":"cjzccpczw001uz4v51qptvs46"},{"post_id":"cjzccpczm001iz4v5g7wawaxc","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpczz001yz4v5os747hlk"},{"post_id":"cjzccpcys000ez4v5f0ph1mx6","tag_id":"cjzccpczm001hz4v5s8ikjgej","_id":"cjzccpd010021z4v5mue8ujqz"},{"post_id":"cjzccpcys000ez4v5f0ph1mx6","tag_id":"cjzccpczs001qz4v5n6xtm6uz","_id":"cjzccpd030024z4v5n1ogx605"},{"post_id":"cjzccpcyx000iz4v5ybdk7w13","tag_id":"cjzccpczz001xz4v5zcf43hx6","_id":"cjzccpd050027z4v5egsj9n9f"},{"post_id":"cjzccpd010022z4v5dax9epoz","tag_id":"cjzccpcyo000bz4v5ersx39ml","_id":"cjzccpd050029z4v5duzxi40d"},{"post_id":"cjzccpcyy000kz4v5vqc7t4kq","tag_id":"cjzccpczm001hz4v5s8ikjgej","_id":"cjzccpd08002fz4v5k7jj9pnd"},{"post_id":"cjzccpcyy000kz4v5vqc7t4kq","tag_id":"cjzccpczs001qz4v5n6xtm6uz","_id":"cjzccpd08002hz4v5kn0j8qed"},{"post_id":"cjzccpcz1000oz4v5vfzsr09z","tag_id":"cjzccpczm001hz4v5s8ikjgej","_id":"cjzccpd0a002lz4v5vm3bs2ih"},{"post_id":"cjzccpcz1000oz4v5vfzsr09z","tag_id":"cjzccpczs001qz4v5n6xtm6uz","_id":"cjzccpd0a002mz4v5v1jl4i3d"},{"post_id":"cjzccpcz3000rz4v5678ky0ih","tag_id":"cjzccpczm001hz4v5s8ikjgej","_id":"cjzccpd0b002pz4v5180oiadv"},{"post_id":"cjzccpcz3000rz4v5678ky0ih","tag_id":"cjzccpczs001qz4v5n6xtm6uz","_id":"cjzccpd0c002qz4v5tc72oune"},{"post_id":"cjzccpcz6000wz4v5nwmnm3td","tag_id":"cjzccpczm001hz4v5s8ikjgej","_id":"cjzccpd0d002tz4v5g8fxvvl6"},{"post_id":"cjzccpcz6000wz4v5nwmnm3td","tag_id":"cjzccpczs001qz4v5n6xtm6uz","_id":"cjzccpd0d002uz4v51nn1x4os"},{"post_id":"cjzccpczj001dz4v5bj4ofnd5","tag_id":"cjzccpd0c002sz4v5gsmt4hpq","_id":"cjzccpd0d002wz4v5160unlo1"},{"post_id":"cjzccpczo001lz4v5cx08t53d","tag_id":"cjzccpd0c002sz4v5gsmt4hpq","_id":"cjzccpd0e002yz4v5f315epvz"},{"post_id":"cjzccpczr001oz4v57spf9uew","tag_id":"cjzccpd0e002xz4v5qqjevgri","_id":"cjzccpd0f0031z4v5mnsbd4jd"},{"post_id":"cjzccpczr001oz4v57spf9uew","tag_id":"cjzccpd0e002zz4v590c46c3d","_id":"cjzccpd0f0032z4v5zu8gpbn0"},{"post_id":"cjzccpczt001sz4v54d5ndbcs","tag_id":"cjzccpd0f0030z4v5z6yowiz3","_id":"cjzccpd0g0034z4v5omakx48d"},{"post_id":"cjzccpczx001vz4v5t4ve1k5h","tag_id":"cjzccpd0f0033z4v5vkvq5ryh","_id":"cjzccpd0g0036z4v5pdhwvrgo"},{"post_id":"cjzccpd00001zz4v5pxwil1ew","tag_id":"cjzccpcyi0006z4v545ai3no1","_id":"cjzccpd0h0037z4v5ept5rdcq"},{"post_id":"cjzccpd00001zz4v5pxwil1ew","tag_id":"cjzccpd0g0035z4v5poiaaewi","_id":"cjzccpd0h0038z4v56o8a7rvk"},{"post_id":"cjzccpd5e003az4v56tizy4nu","tag_id":"cjzccpd5i003cz4v55atom8ca","_id":"cjzccpd5p003hz4v5x7cs8va7"}],"Tag":[{"name":"JavaScript","_id":"cjzccpcyi0006z4v545ai3no1"},{"name":"essay","_id":"cjzccpcyo000bz4v5ersx39ml"},{"name":"CSS","_id":"cjzccpcz5000uz4v5u8u0nq34"},{"name":"Git","_id":"cjzccpczf0018z4v5yi9cjb2n"},{"name":"Hexo","_id":"cjzccpczm001hz4v5s8ikjgej"},{"name":"Next","_id":"cjzccpczs001qz4v5n6xtm6uz"},{"name":"gulp","_id":"cjzccpczz001xz4v5zcf43hx6"},{"name":"npm","_id":"cjzccpd0c002sz4v5gsmt4hpq"},{"name":"css","_id":"cjzccpd0e002xz4v5qqjevgri"},{"name":"sass","_id":"cjzccpd0e002zz4v590c46c3d"},{"name":"vue","_id":"cjzccpd0f0030z4v5z6yowiz3"},{"name":"Service-worker","_id":"cjzccpd0f0033z4v5vkvq5ryh"},{"name":"jQuery","_id":"cjzccpd0g0035z4v5poiaaewi"},{"name":"zepto","_id":"cjzccpd5i003cz4v55atom8ca"}]}}